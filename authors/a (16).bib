
@ARTICLE{Hammad2020,
author={Hammad, M. and Basit, H.A. and Jarzabek, S. and Koschke, R.},
title={A systematic mapping study of clone visualization},
journal={Computer Science Review},
year={2020},
volume={37},
doi={10.1016/j.cosrev.2020.100266},
art_number={100266},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85090296836&doi=10.1016%2fj.cosrev.2020.100266&partnerID=40&md5=67ae6375125f59e1f20caafb3c647227},
affiliation={Eindhoven University of Technology, Netherlands; Prince Sultan University, Saudi Arabia; Bialystok University of Technology, Poland; University of Bremen, Germany},
abstract={Knowing code clones (similar code fragments) is helpful in software maintenance and re-engineering. As clone detectors return huge numbers of clones, visualization techniques have been proposed to make cloning information more comprehensible and useful for programmers. We present a mapping study of clone visualization techniques, classifying visualizations in respect to the user goals to be achieved by means of clone visualizations and relevant clone-related information needs. Our mapping study will aid tool users in selecting clone visualization tools suitable for the task at hand, tool vendors in improving capabilities of their tools, and researchers in identifying open problems in clone visualization research. © 2020 The Authors.},
author_keywords={Clone;  Feature analysis;  Human-computer interaction;  Information needs;  User goals;  Visualization techniques},
keywords={Classification (of information);  Clone cells;  Mapping;  Visualization, Code clone;  Code fragments;  Mapping studies;  Systematic mapping studies;  User goals;  Visualization research;  Visualization technique;  Visualization tools, Cloning},
references={Roy, C.K., Cordy, J.R., (2007) A Survey on Software Clone Detection Research: Technical Report Tr 2007-541, , School of Computing, Queen's University; Kapser, C.J., Godfrey, M.W., "cloning considered harmful" considered harmful: Patterns of cloning in software (2008) Empir. Softw. Eng., 13 (6), pp. 645-692; Monden, A., Nakae, D., Kamiya, T., Sato, S.-I., Matsumoto, K.-I., Software quality analysis by code clones in industrial legacy software (2002) Software Metrics, 2002. Proceedings. Eighth Ieee Symposium on, pp. 87-94. , IEEE; Clements, P., Northrop, L., (2002) Software Product Lines: Practices and Patterns, , Addison-Wesley; Funaro, M., Braga, D., Campi, A., Ghezzi, C., A hybrid approach (syntactic and textual) to clone detection (2010) Proceedings of the 4th International Workshop on Software Clones, pp. 79-80. , ACM; Jacko, J.A., (2012) Human Computer Interaction Handbook: Fundamentals, Evolving Technologies, and Emerging Applications, , CRC press; Diehl, S., (2007) Software Visualization: Visualizing the Structure, Behaviour, and Evolution of Software, , Springer Science & Business Media; Koschke, R., Survey of research on software clones (2006) Dagstuhl Seminar Proceedings. No. 06301 in Dagstuhl Seminar Proceedings; Roy, C.K., Cordy, J.R., Koschke, R., Comparison and evaluation of code clone detection techniques and tools: A qualitative approach (2009) Sci. Comput. Progr., 74 (7), pp. 470-495; Carpendale, S., Ghanam, Y., (2008) A Survey Paper on Software Architecture Visualization: Technical Report 2008-906-19, , University of Calgary; Teyseyre, A.R., Campo, M.R., An overview of 3D software visualization (2009) Ieee Trans. Vis. Comput. Graphics, 15 (1), pp. 87-105; Bassil, S., Keller, R.K., A qualitative and quantitative evaluation of software visualization tools (2001) Proceedings of the Workshop on Software Visualization, pp. 33-37. , IEEE; Koschke, R., Software visualization in software maintenance, reverse engineering, and re-engineering: A research survey (2003) J. Softw. Maint. Evol.: Res. Pract., 15 (2), pp. 87-109; Caserta, P., Zendra, O., Visualization of the static aspects of software: A survey (2011) Ieee Trans. Vis. Comput. Graphics, 17 (7), pp. 913-933; Zibran, M.F., Analysis and visualization for clone refactoring (2015) International Workshop on Software Clones, pp. 47-48; Kitchenham, B.A., Charters, S., (2007) Guidelines for Performing Systematic Literature Reviews in Software Engineering: Technical Report ebse-2007-01, , School of Computer Science and Mathematics, Keele University, Keele and Department of Computer Science, University of Durham, Durham, UK; Petersen, K., Feldt, R., Mujtaba, S., Mattsson, M., Systematic mapping studies in software engineering (2008) International Conference on Evaluation and Assessment in Software Engineering, pp. 68-77. , BCS Learning & Development Ltd. Swindon, UK; Petersen, K., Vakkalanka, S., Kuzniarz, L., Guidelines for conducting systematic mapping studies in software engineering: An update (2015) Inf. Softw. Technol., 64, pp. 1-18; Basit, H.A., Hammad, M., Jarzabek, S., Koschke, R., What do we need to know about clones? deriving information needs from user goals (2015) International Workshop on Software Clones, pp. 51-57. , IEEE; Basit, H.A., Hammad, M., Koschke, R., A survey on goal-oriented visualization of clone data (2015) Ieee Working Conference on Software Visualization, pp. 46-55. , IEEE; Adar, E., GUESS: A language and interface for graph exploration (2006) Proceedings of the Sigchi Conference on Human Factors in Computing Systems, pp. 791-800; Carter, S., Frank, R., Tansley, D., Clone detection in telecommunications software systems: A neural net approach (1993) Int. Workshop on Application of Neural Networks to Telecommunications, pp. 273-287; Basit, H.A., Jarzabek, S., Detecting higher-level similarity patterns in programs (2005) European Software Engineering Conference and Acm Sigsoft International Symposium on Foundations of Software Engineering, pp. 156-165. , ACM; Koschke, R., Identifying and removing software clones (2008) Software Evolution, pp. 15-36. , Springer; Roy, C.K., Cordy, J.R., Scenario-based comparison of clone detection techniques (2008) Program Comprehension, 2008. Icpc 2008. The 16th Ieee International Conference on, pp. 153-162. , IEEE; Novais, R.L., Torres, A., Mendes, T.S., Mendonça, M., Zazworka, N., Software evolution visualization: A systematic mapping study (2013) Inf. Softw. Technol., 55 (11), pp. 1860-1883; Bassi, S., Keller, R.K., Software visualization tools: Survey and analysis (2001) International Workshop on Program Comprehension, pp. 7-17. , IEEE; Brereton, P., Kitchenham, B., Budgen, D., Turner, M., Khalil, M., Lessons from applying the systematic literature review process within the software engineering domain (2007) J. Syst. Softw., 80 (4), pp. 571-583; Kitchenham, B., Brereton, O., Budgen, D., Turner, M., Bailey, J., Linkman, S., Systematic literature reviews in software engineering - A systematic literature review (2009) Inf. Softw. Technol., 51 (1), pp. 7-15; Kitchenham, B., Budgen, D., Brereton, P., The value of mapping studies - A participant-observer case study (2010) International Conference on Evaluation and Assessment in Software Engineering, pp. 25-33. , British Computer Society; Wohlin, C., Runeson, P., Da Mota Silveira Neto, P., Engström, E., Do Carmo MacHado, I., De Almeida, E., On the reliability of mapping studies in software engineering (2013) J. Syst. Softw., 86 (10), pp. 2594-2610; Wieringa, R., Maiden, N., Mead, N., Rolland, C., Requirements engineering paper classification and evaluation criteria: A proposal and a discussion (2006) Requir. Eng., 11 (1), pp. 102-107; Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) Ieee Trans. Softw. Eng., 33 (9), pp. 577-591; Roy, C.K., Zibran, M.F., Koschke, R., The vision of software clone management: Past, present and the future (2014) Ieee Conference on Software Maintenance, Reengineering and Reverse Engineering (CSMR-WCRE), 2014 Software Evolution Week, pp. 18-33; Rattana, D., Bhatiab, R., Singh, M., Software clone detection: A systematic review (2013) Inf. Softw. Technol., 55 (7), pp. 1165-1199; Gupta, A., Suri, B., A survey on code clone, its behavior and applications (2018) Networking Communication and Data Knowledge Engineering, pp. 27-39. , Springer; Basili, V.R., Weiss, D.M., A methodology for collecting valid software engineering data (1984) Ieee Trans. Softw. Eng., 10 SE (6), pp. 728-738; Geesaman, P., Cordy, J., Zouaq, A., Light-weight ontology alignment using best-match clone detection (2013) Software Clones (IWSC), 2013 7th International Workshop on; Martin, D., Cordy, J.R., Analyzing web service similarity using contextual clones (2011) Proceedings of the 5th International Workshop on Software Clones, pp. 41-46; Giesecke, S., Generic modelling of code clones (2006) DRSS. No. 06301 in Dagstuhl Seminar Proceedings, pp. 1-23; Koschke, R., Baxter, I., Conradt, M., Cordy, J.R., Software clone management towards industrial application (2012) Dagstuhl Seminar: Software Clone Management towards Industrial Application; Harder, J., Tiarks, R., A controlled experiment on software clones (2012) International Conference on Program Comprehension, pp. 219-228. , IEEE Computer Society Press; Bazrafshan, S., Koschke, R., Effect of clone information on the performance of developers fixing cloned bugs (2014) Conference on Source Code Analysis and Manipulation, pp. 1-10. , IEEE Computer Society Press; Bazrafshan, S., (2017) Empirical Research towards a Relevance Assessment of Software Clones, , (Ph.D. dissertation) University of Bremen, Germany; Tsantalis, N., Krishnan, G.P., Refactoring clones: A new perspective (2013) International Workshop on Software Clones, pp. 12-13; Jarzabek, S., Li, S., Unifying clones with a generative programming technique: A case study (2006) J. Softw. Maint. Evol. Res. Pract., 18 (4), pp. 267-292; Koschke, R., Frontiers of software clone management (2008) Front. Softw. Maint., pp. 119-128; Krinke, J., A study of consistent and inconsistent changes to code clones (2007) Reverse Engineering, 2007. Wcre 2007. 14th Working Conference on, pp. 170-178; Barbour, L., Khomh, F., Zou, Y., Late propagation in software clones (2011) Ieee International Conference on Software Maintenance, pp. 273-282; Li, W., Shatnawi, R., An empirical study of the bad smells and class error probability in the post-release object-oriented system evolution (2007) J. Syst. Softw., 80 (7), pp. 1120-1128. , Dynamic Resource Management in Distributed Real-Time Systems; Juergens, E., Deissenboeck, F., Hummel, B., Wagner, S., Do code clones matter? (2009) IEEE/ACM International Conference on Software Engineering; Göde, N., Koschke, R., Frequency and risks of changes to clones (2011) IEEE/ACM International Conference on Software Engineering, pp. 311-320. , ACM Press; Harder, J., How multiple developers affect the evolution of code clones (2013) Ieee International Conference on Software Maintenance, pp. 30-39; Basit, H.A., Jarzabek, S., Data mining approach for detecting higher-level clones in software (2009) Ieee Trans. Softw. Eng., 35 (4), pp. 497-514; Lague, B., Proulx, D., Mayrand, J., Merlo, E.M., Hudepohl, J., Assessing the benefits of incorporating function clone detection in a development process (1997) Ieee International Conference on Software Maintenance, pp. 314-321; Johnson, J., Identifying redundancy in source code using fingerprints (1993) Proceedings of the 1993 Conference of the Centre for Advanced Studies on Collaborative Research: Software Engineering, 1, pp. 171-183; Murphy, G.C., Notkin, D., Sullivan, K., Software reflexion models: Bridging the gap between source and high-level models (1995) Proceedings of the Acm Sigsoft Symposium on the Foundations of Software Engineering, pp. 18-28. , ACM Press; Koschke, R., Frenzel, P., Breu, A.P., Angstmann, K., Extending the reflexion method for consolidating software variants into product lines (2009) Softw. Qual. J., 17 (4), pp. 331-366; Ma, Y.S., Woo, D.K., Applying a code clone detection method to domain analysis of device drivers (2007) Software Engineering Conference, 2007. Apsec 2007. 14th Asia-Pacific, pp. 254-261; Zhang, T., Kim, M., Automated transplantation and differential testing for clones (2017) IEEE/ACM International Conference on Software Engineering, pp. 665-676; Chou, A., Yang, J., Chelf, B., Hallem, S., Engler, D.R., An empirical study of operating system errors (2001) Symposium on Operating Systems Principles, pp. 73-88; Li, Z., Lu, S., Myagmar, S., Zhou, Y., CP-Miner: Finding copy-paste and related bugs in large-scale software code (2006) Ieee Trans. Softw. Eng., 32 (3), pp. 176-192; Juergens, E., Hummel, B., Deissenboeck, F., Feilkas, M., Static bug detection through analysis of inconsistent clones (2008) Testmethoden für Software (TESO); Bazrafshan, S., Koschke, R., Göde, N., Approximate code search in program histories (2011) Reverse Engineering (WCRE), 2011 18th Working Conference on, pp. 109-118; Li, J., Ernst, M., CBCD: Cloned buggy code detector (2012) IEEE/ACM International Conference on Software Engineering, pp. 310-320. , IEEE; Jang, J., Agrawal, A., Brumley, D., ReDeBug: Finding unpatched code clones in entire OS distributions (2012) Symposium on Security and Privacy; Juergens, E., Deissenboeck, F., Domann, C., Feilkas, M., Hummel, B., Schaetz, B., Streit, J., Wagner, S., Can clone detection support quality assessments of requirements specifications? (2010) IEEE/ACM International Conference on Software Engineering; Fowler, M., (2000) Refactoring: Improving the Design of Existing Code, , Addison-Wesley; Godfrey, M., Lijie, Z., Using origin analysis to detect merging and splitting of source code entities (2005) Ieee Trans. Softw. Eng., 31 (2), pp. 166-181; Hunt, J.J., Tichy, W.F., Extensible language-aware merging (2002) Ieee International Conference on Software Maintenance, pp. 511-520; Debray, S.K., Evans, W., Muth, R., De Sutter, B., Compiler techniques for code compaction (2000) Acm Trans. Program. Lang. Syst., 22 (2), pp. 378-415; Chen, W.-K., Li, B., Gupta, R., Code compaction of matching single-entry multiple-exit regions (2003) International Static Analysis Symposium, pp. 401-417; Ishihara, T., Hotta, K., Higo, Y., Igaki, H., Kusumoto, S., Inter-project functional clone detection toward building libraries - An empirical study on 13,000 projects (2012) Reverse Engineering (WCRE), 2012 19th Working Conference on, pp. 387-391; Bruntink, M., Deursen, A.V., Engelen, R.V., Tourwe, T., On the use of clone detection for identifying crosscutting concern code (2005) Ieee Trans. Softw. Eng., 31 (10), pp. 804-818; Faust, D., Verhoef, C., Software product line migration and deployment (2003) Softw. - Pract. Exp., 33 (10), pp. 933-955; Mende, T., Beckwermert, F., Koschke, R., Meier, G., Supporting the grow-and-prune model in software product lines evolution using clone detection (2008) Software Maintenance and Reengineering, 2008. Csmr 2008. 12th European Conference on, pp. 163-172; Mende, T., Beckwermert, R.K.F., An evaluation of code similarity identification for the grow-and-prune model (2009) J. Softw. Maint. Evol. Res. Pract., 21 (2), pp. 143-169; Koschke, R., Frenzel, P., Breu, A.P., Angstmann, K., Extending the reflexion method for consolidating software variants into product lines (2009) Softw. Qual. J., 17 (4), pp. 331-366; Dubinsky, Y., Rubin, J., Berger, T., Duszynski, S., Becker, M., Czarnecki, K., An Exploratory study of cloning in industrial software product lines (2013) Software Maintenance and Reengineering (CSMR), 2013 17th European Conference on, pp. 25-34; Göde, N., Koschke, R., Incremental clone detection (2009) Conference on Software Maintenance and Reengineering, pp. 219-228. , IEEE Computer Society Press; Lavoie, T., Khomh, F., Merlo, E., Zou, Y., Inferring repository file structure modifications using nearest-neighbor clone detection (2012) Ieee Working Conference on Reverse Engineering, pp. 325-334; Pate, J.R., Tairas, R., Kraft, N.A., Clone evolution: A systematic review (2013) J. Softw.: Evol. Process., 25 (3), pp. 261-283; Antoniol, G., Casazza, G., Di Penta, M., Merlo, E., Modeling clones evolution through time series (2001) Ieee International Conference on Software Maintenance, pp. 273-280; Antoniol, G., Villano, U., Merlo, E., Di Penta, M., Analyzing cloning evolution in the Linux kernel (2002) Inf. Softw. Technol., 44 (13), pp. 755-765; Kim, M., Sazawal, V., Notkin, D., Murphy, G., An empirical study of code clone genealogies (2005) Acm Sigsoft Softw. Eng. Notes, 30 (5), pp. 187-196; Godfrey, M., Tu, Q., Tracking structural evolution using origin analysis (2002) International Workshop on Principles of Software Evolution, pp. 117-119; Davies, J., German, D.M., Godfrey, M.W., Hindle, A., Software bertillonage: Finding the provenance of an entity (2011) Proceedings of the 8th Working Conference on Mining Software Repositories, pp. 183-192; Godfrey, M.W., German, D.M., Davies, J., Hindle, A., Determining the provenance of software artifacts (2011) Proceedings of the 5th International Workshop on Software Clones, pp. 65-66; German, D.M., Di Penta, M., Antoniol, G., Guéhéneuc, Y.-G., Code siblings: Phenotype evolution (2009) International Workshop on Detection of Software Clones; Merlo, E., Detection of plagiarism in university projects using metrics-based spectral similarity (2006) Dagstuhl Seminar Proceedings. No. 06301 in Dagstuhl Seminar Proceedings; Walenstein, A., Lakhotia, A., The software similarity problem in malware analysis (2006) Dagstuhl Seminar Proceedings. No. 06301 in Dagstuhl Seminar Proceedings; Bruschi, D., Martignoni, L., Monga, M., Using code normalization for fighting self-mutating malware (2006) Proceedings of the International Symposium on Secure Software Engineering, pp. 37-44; Price, B., Baecker, R., Small, I., A principled taxonomy of software visualization (1993) J. Vis. Lang. Comput., 4 (3), pp. 211-266; Roman, G.C., Cox, K.C., A taxonomy of program visualization systems (1993) Computer, 26 (12), pp. 11-24; Shneiderman, B., The eyes have it: A task by data type taxonomy for information visualizations (1996) Ieee Symposium on Visual Languages, pp. 336-343. , IEEE; Keim, D., Kriegel, H.-P., Visualization techniques for mining large databases: A comparison (1996) Ieee Trans. Knowl. Data Eng., 8 (6), pp. 923-936; Keim, D., Visual database exploration techniques (1997) Tutorial KDD'97 International Conference on Knowledge Discovery and Data Mining; Card, S.K., MacKinlay, J., The structure of the information visualization design space (1997) Visualization Conference, Information Visualization Symposium and Parallel Rendering Symposium, pp. 92-99; Card, S., MacKinlay, J., Shneiderman, B., (1999) Readings in Information Visualization - Using Vision to Think, , Morgan Kaufmann; Chi, E.H., A taxonomy of visualization techniques using the data state reference model (2000) Ieee Symposium on Information Visualization, pp. 69-75; Maletic, J.I., Marcus, A., Collard, M.L., A task oriented view of software visualization (2002) International Workshop on Visualizing Software for Understanding and Analysis, pp. 32-40. , IEEE Press; De Oliveira, M.C.F., Levkowitz, H., From visual data exploration to visual data mining: A survey (2003) Ieee Trans. Vis. Comput. Graphics, 9 (3), pp. 378-394; Gallagher, K., Hatch, A., Munro, M., Software architecture visualization: An evaluation framework and its application (2008) Ieee Trans. Softw. Eng., 34 (2), pp. 260-270; Myller, N., Bednarik, R., Sutinen, E., Ben-Ari, M., Extending the engagement taxonomy: Software visualization and collaborative learning (2009) Acm Trans. Comput. Educ., 9 (1), pp. 71-727; Shiffrin, R.M., Schneider, W., Controlled and automatic human information processing: II. Perceptual learning, automatic attending, and a general theory (1977) Psychol. Rev., 84, pp. 127-190; MacKinlay, J., Automating the design of graphical presentations of relational information (1986) Acm Trans. Graph., 5, pp. 110-141; Bertin, J., (2011) Semiology of Graphics: Diagrams, Networks, Maps, , ESRI PR; Deissenboeck, F., Hummel, B., Juergens, E., Pfaehler, M., Schaetz, B., Model clone detection in practice (2010) International Workshop on Software Clones, pp. 57-64. , ACM; Cleveland, W., McGill, R., Graphical perception: Theory, experimentation, and application to the development of graphical methods (1984) J. Amer. Statist. Assoc., 79, pp. 531-540; Spence, I., No humble pie: The origins and usage of a statistical chart (2005) J. Educ. Behav. Stat., 30 (4), pp. 353-368; Skau, D., Kosara, R., Arcs, angles, or areas: Individual data encodings in pie and donut charts (2016) Eurovis; Inselberg, A., Dimsdale, B., Parallel coordinates: A tool for visualizing multi-dimensional geometry (1990) Proceedings of the 1st Conference on Visualization'90, pp. 361-378. , IEEE Computer Society Press; Mane, K.K., (2006) Envisioning Knowledge: Tightly Coupling Knowledge Analysis and Visualization, , (Ph.D. thesis, Doctoral Dissertation) Indiana University, Bloomington, IN; Loua, T., (1873) Altlas Statistique de la Population de Paris, , J. Dejey (Paris); Eick, S.G., Steffen, J.L., Sumner, E.E., Jr., Seesoft - A tool for visualizing line oriented software statistics (1992) Ieee Trans. Softw. Eng., 18 (11), pp. 957-968; Kaser, O., Lemire, D., Tag-cloud drawing: Algorithms for cloud visualization (2007) Workshop on Tagging and Metadata for Social Information Organization; Oelke, D., Gurevych, I., A study on human-generated tag structures to inform tag cloud layout (2014) International Working Conference on Advanced Visual Interfaces, pp. 297-304. , ACM Press; Mandal, M., Roy, C.K., Schneider, K.A., Automatic ranking of clones for refactoring through mining association rules (2014) 2014 Software Evolution Week - Ieee Conference on Software Maintenance, Reengineering, and Reverse Engineering (CSMR-WCRE), pp. 114-123; Tsantalis, N., Chatzigeorgiou, A., Identification of extract method refactoring opportunities for the decomposition of methods (2011) J. Syst. Softw., 84 (10), pp. 1757-1782; Tairas, R., Gray, J., Increasing clone maintenance support by unifying clone detection and refactoring activities (2012) Inf. Softw. Technol., 54 (12), pp. 1297-1307; Tsantalis, N., Mazinanian, D., Rostami, S., Clone Refactoring with Lambda Expressions (2017) IEEE/ACM International Conference on Software Engineering, pp. 60-70; Hotta, K., Higo, Y., Kusumoto, S., Identifying, Tailoring, And suggesting form template method refactoring opportunities with program dependence graph (2012) Conference on Software Maintenance and Reengineering, pp. 53-62; Bian, Y., Koru, G., Su, X., Ma, P., SPAPE: A semantic-preserving amorphous procedure extraction method for near-miss clones (2013) J. Syst. Softw., 86 (8), pp. 2077-2093; Bavota, G., De Lucia, A., Marcus, A., Oliveto, R., Palomba, F., Supporting extract class refactoring in Eclipse: The ARIES project (2012) IEEE/ACM International Conference on Software Engineering, pp. 1419-1422; Riva, C., Visualizing software release histories with 3DSoftVis (2000) IEEE/ACM International Conference on Software Engineering, p. 789; Collberg, C., Kobourov, S., Nagra, J., Pitts, J., Wampler, K., A system for graph-based visualization of the evolution of software (2003) Acm Symposium on Software Visualization, pp. 77-87. , ACM; Wu, X., (2003) Visualization of Version Control Information, , (Master's thesis) University of Victoria; Wu, J., Spitzer, C.W., Hassan, A.E., Holt, R.C., Evolution spectrographs: Visualizing punctuated change in software evolution (2004) International Workshop on Principles of Software Evolution, pp. 57-66; Froehlich, J., Dourish, P., Unifying artifacts and activities in a visual tool for distributed software development teams (2004) IEEE/ACM International Conference on Software Engineering, pp. 387-396. , IEEE Computer Society Press; Gall, H.C., Lanza, M., Software evolution: Analysis and visualization (2006) IEEE/ACM International Conference on Software Engineering, pp. 1055-1056. , ACM; Voinea, S.-L., (2007) Software Evolution Visualization, , (Ph.D. thesis) Technical University of Eindhoven; Lanza, M., Ducasse, S., Polymetric views - A lightweight visual approach to reverse engineering (2003) Ieee Trans. Softw. Eng., 29 (9), pp. 782-795; Chen, P.P.-S., The entity-relationship model - Toward a unified view of data (1976) Acm Trans. Database Syst., 1 (1), pp. 9-36; Gibson, H., Faith, J., Vickers, P., A survey of two-dimensional graph layout techniques for information visualisation (2013) Inf. Vis., 12 (3-4), pp. 324-357; Eades, P., Tamassia, R., (1989) Algorithms for Drawing Graphs: An Annotated Bibliography, , Department of Computer Science, Brown University Providence eRI; Di Battista, G., Eades, P., Tamassia, R., Tollis, I.G., Algorithms for drawing graphs: An annotated bibliography (1994) Comput. Geom., 4 (5), pp. 235-282; Burch, M., Konevtsova, N., Heinrich, J., Hoeferlin, M., Weiskopf, D., Evaluation of traditional, orthogonal, and radial tree diagrams by an eye tracking study (2011) Ieee Trans. Vis. Comput. Graphics, 17 (12), pp. 2440-2448; Coomans, M., Timmermans, H., DDDiver: 3D interactive visualization of entity relationships (2001) Data Visualization 2001, pp. 291-299. , Springer; Shneiderman, B., Tree visualization with tree-maps: 2-d space-filling approach (1992) Acm Trans. Graph., 11 (1), pp. 92-99; Robertson, G.G., MacKinlay, J.D., Card, S.K., Cone trees: Animated 3D visualizations of hierarchical information (1991) Proceedings of the Sigchi Conference on Human Factors in Computing Systems, pp. 189-194. , ACM; Lamping, J., Rao, R., Pirolli, P., A focus+ context technique based on hyperbolic geometry for visualizing large hierarchies (1995) Proceedings of the Sigchi Conference on Human Factors in Computing Systems, pp. 401-408. , ACM Press/Addison-Wesley Publishing Co; Zhao, S., McGuffin, M.J., Chignell, M.H., Elastic hierarchies: Combining treemaps and node-link diagrams (2005) Ieee Symposium on Information Visualization, pp. 57-64. , IEEE; Dang, T., Forbes, A., CactusTree: A tree drawing approach for hierarchical edge bundling (2017) Ieee Pacific Visualization Symposium, pp. 210-214; Dang, T., Murray, P., Etemadpour, R., Forbes, A.G., A user study of techniques for visualizing structure and connectivity in hierarchical datasets (2017) International Workshop on Visualization and User Interfaces for Ontologies and Linked Data Co-Located with the International Semantic Web Conference, 1947, pp. 45-59. , CEUR Workshop Proceedings CEUR-WS.org; Johnson, B., Shneiderman, B., Tree-maps: A space-filling approach to the visualization of hierarchical information structures (1991) Ieee Conference on Visualization, pp. 284-291; Holten, D., Vliegen, R., Van Wijk, J.J., Visual realism for the visualization of software metrics (2005) International Workshop on Visualizing Software for Understanding and Analysis, pp. 1-6; Van Wijk, J.J., Wetering De, H.Van, Cushion treemaps: Visualization of hierarchical information (1999) Proceedings of the Sigchi Conference on Human Factors in Computing Systems, pp. 73-78; Wang, W., Wang, H., Dai, G., Wang, H., Visualization of large hierarchical data by circle packing (2006) Proceedings of the Sigchi Conference on Human Factors in Computing Systems, pp. 517-520. , ACM; Babaria, K., (2004) Using Treemaps to Visualize Gene Ontologies, , Human Computer Interaction Lab and Institute for Systems Research; Bruls, M., Huizing, K., Van Wijk, J.J., Squarified treemaps (2000) Data Visualization, Eurographics, pp. 33-42. , Springer; Stasko, J., Catrambone, R., Guzdial, M., McDonald, K., An evaluation of space filling information visualizations for depicting hierarchical structures (2000) Int. J. Hum.-Comput. Stud., 53 (5), pp. 663-694; Aurenhammer, F., Voronoi diagrams - A survey of a fundamental geometric data structure (1991) Commun. Acm, 23 (3), pp. 345-405; Wattenberg, M., A note on space-filling visualizations and space-filling curves (2005) Ieee Symposium on Information Visualization, pp. 181-186. , IEEE; Auber, D., Huet, C., Lambert, A., Renoust, B., Sallaberry, A., Saulnier, A., Gospermap: Using a gosper curve for laying out hierarchical data (2013) Ieee Trans. Vis. Comput. Graphics, 19 (11), pp. 1820-1832; Wettel, R., Lanza, M., Visualizing software systems as cities (2007) International Workshop on Visualizing Software for Understanding and Analysis, pp. 92-99; Wettel, R., Lanza, M., Codecity: 3D visualization of large-scale software (2008) IEEE/ACM International Conference on Software Engineering Companion, pp. 921-922. , ACM; Wettel, R., Lanza, M., Visual exploration of large-scale system evolution (2008) 2008 15th Working Conference on Reverse Engineering, pp. 219-228; Bladh, T., Carr, D.A., Kljun, M., The effect of animated transitions on user navigation in 3D tree-maps (2005) Ieee Conference on Information Visualization, pp. 297-305; Steinbrückner, F., Lewerentz, C., Understanding software evolution with software cities (2013) Inf. Vis., 12, pp. 200-216; Steinbrückner, F., (2013) Consistent Software Cities: Supporting Comprehension of Evolving Software Systems, , (Ph.D. thesis) Brandenburgische Technische Universität Cottbus, Germany; Holten, D., Hierarchical edge bundles: Visualization of adjacency relations in hierarchical data (2006) Ieee Trans. Vis. Comput. Graphics, 12 (5), pp. 741-748; Knight, C., Munro, M., Virtual but visible software (2000) Ieee Conference on Information Visualization, pp. 198-205. , IEEE; Capece, N., Erra, U., Romano, S., Scanniello, G., Visualising a software system as a city through virtual reality (2017) Augmented Reality, Virtual Reality, and Computer Graphics, pp. 319-327. , De Paolis L.T. Bourdot P. Mongelli A. Springer International Publishing Cham; Maletic, J.I., Leigh, J., Marcus, A., Dunlap, G., Visualizing object-oriented software in virtual reality (2001) International Workshop on Program Comprehension, pp. 26-35; Panas, T., Berrigan, R., Grundy, J., A 3d metaphor for software production visualization (2003) Ieee Conference on Information Visualization, pp. 314-319. , IEEE; Panas, T., Epperly, T., Quinlan, D., Saebjornsen, A., Vuduc, R., Communicating software architecture using a unified single-view visualization (2007) Ieee International Conference on Engineering Complex Computer Systems, pp. 217-228. , IEEE; Fittkau, F., Krause, A., Hasselbring, W., Exploring software cities in virtual reality (2015) Ieee Working Conference on Software Visualization, pp. 130-134. , IEEE; Khaloo, P., Maghoumi, M., Taranta, E., Bettner, D., Laviola, J., Code park: A new 3D code visualization tool (2017) Ieee Working Conference on Software Visualization, pp. 43-53. , IEEE; Merino, L., Fuchs, J., Blumenschein, M., Anslow, C., Ghafari, M., Nierstrasz, O., Behrisch, M., Keim, D.A., On the impact of the medium in the effectiveness of 3D software visualizations (2017) Ieee Working Conference on Software Visualization, pp. 11-21. , IEEE; Schreiber, A., Brüggemann, M., Interactive visualization of software components with virtual reality headsets (2017) Ieee Working Conference on Software Visualization, pp. 119-123. , IEEE; Ogami, K., Kula, R.G., Hata, H., Ishio, T., Matsumoto, K., Using high-rising cities to visualize performance in real-time (2017) Ieee Working Conference on Software Visualization, pp. 33-42. , IEEE; Fernandes, F., Rodrigues, C.S., Werner, C., Dynamic analysis of software systems through virtual reality (2017) Symposium on Virtual and Augmented Reality (SVR), pp. 331-340. , in Spanish; Elliott, A., Peiris, B., Parnin, C., Virtual reality in software engineering: Affordances, applications, and challenges (2015) IEEE/ACM International Conference on Software Engineering, Vol. 2, pp. 547-550; Bowman, D.A., Davis, E.T., Hodges, L.F., Badre, A.N., Maintaining spatial orientation during travel in an immersive virtual environment (1999) Presence: Teleoper. Virtual Environ., 8 (6), pp. 618-631; Riecke, B.E., Cunningham, D.W., Bülthoff, H.H., Spatial updating in virtual reality: The sufficiency of visual information (2007) Psychol. Res., 71 (3), pp. 298-313; Regian, J.W., Shebilske, W.L., Monk, J.M., Virtual reality: An instructional medium for visual-spatial tasks (1992) J. Commun., 42 (4), pp. 136-149; Chance, S.S., Gaunet, F., Beall, A.C., Loomis, J.M., Locomotion mode affects the updating of objects encountered during travel: The contribution of vestibular and proprioceptive inputs to path integration (1998) Presence: Teleoper. Virtual Environ., 7 (2), pp. 168-178; Sousa Santos, B., Dias, P., Pimentel, A., Baggerman, J.-W., Ferreira, C., Silva, S., Madeira, J., Head-mounted display versus desktop for 3D navigation in virtual reality: A user study (2009) Multimedia Tools Appl., 41 (1), pp. 161-181; Vincur, J., Navrat, P., Polasek, I., VR City: Software analysis in virtual reality environment (2017) 2017 Ieee International Conference on Software Quality, Reliability and Security Companion (QRS-C), pp. 509-516; Rüdel, M., Ganser, J., Koschke, R., A controlled experiment on spatial orientation in VR-based software cities (2018) Ieee Working Conference on Software Visualization, pp. 21-31; Johnson, J.H., Substring matching for clone detection and change tracking (1994) Ieee International Conference on Software Maintenance, pp. 120-126; Freese, R., Automated lattice drawing (2004) Concept Lattices, pp. 112-127. , Springer Berlin Heidelberg; Crampes, M., Plantié, M., Visualizing and interacting with concept hierarchies (2014) Proceedings of the 4th International Conference on Web Intelligence, Mining and Semantics (WIMS14), p. 5. , ACM; Melo, C., Le-Grand, B., Aufaure, M., Bezerianos, A., Extracting and visualising tree-like structures from concept lattices (2011) Ieee Conference on Information Visualization, pp. 261-266; Behrisch, M., Bach, B., Riche, N.H., Schreck, T., Fekete, J., Matrix reordering methods for table and network visualization (2016) Comput. Graph. Forum, 35 (3), pp. 693-716; Holten, D.H.R., (2009) Visualization of Graphs and Trees for Software Analysis, , (Ph.D. thesis) Technical University of Delft; Wertheimer, M., Untersuchungen zur lehre von der gestalt (1923) Psychologische Forschung, Vol. 4, pp. 301-350; Alsallakh, B., Aigner, W., Miksch, S., Gröller, M.E., Reinventing the contingency wheel: Scalable visual analytics of large Categorical data (2012) Ieee Trans. Vis. Comput. Graphics, 18 (12), pp. 2849-2858; Pohl, M., Scholz, F., Kriglstein, S., Alsallakh, B., Miksch, S., Evaluating the dot-based contingency wheel: Results from a usability and utility study (2014) Human Interface and the Management of Information. Information and Knowledge Design and Evaluation, pp. 76-86. , Yamamoto S. Springer International Publishing Cham; Fruchterman, T.M.J., Reingold, E.M., Graph drawing by force-directed placement (1991) Softw. Pract. Exp., 21 (11), pp. 1129-1164; Storey, M.-A., Muller, H.A., Manipulating and documenting software structures using SHriMP views (1995) Ieee International Conference on Software Maintenance, pp. 275-284; Bartram, L., Ho, A., Dill, J., Henigman, F., The continuous zoom: A constrained fisheye technique for viewing and navigating large information spaces (1995) Acm Symposium on User Interface and Software Technology, pp. 207-215. , ACM; Herman, I., Melancon, G., Marshall, M.S., Graph visualization and navigation in information visualization: A survey (2000) Ieee Trans. Vis. Comput. Graphics, 6 (1), pp. 24-43; Juergens, E., Deissenboeck, F., How much is a clone (2010) International Workshop on Software Quality and Maintainability; Seeberger, M., Kuhn, A., Girba, T., Ducasse, S., Chronia: Visualizing how developers change software systems (2006) Conference on Software Maintenance and Reengineering, pp. 348-349; D'Ambros, M., Gall, H., Lanza, M., Pinzger, M., Analysing software repositories to understand software evolution (2008) Software Evolution, pp. 37-67. , Springer; German, D.M., Di Penta, M., Gueheneuc, Y.-G., Antoniol, G., Code siblings: Technical and legal implications of copying code between applications (2009) Ieee Working Conference on Mining Software Repositories, pp. 81-90. , IEEE Computer Society Press; Penta, M.D., German, D., Antoniol, G., Identifying licensing of jar archives using a code-search approach (2010) Ieee Working Conference on Mining Software Repositories, pp. 151-160. , IEEE Computer Society Press; Di Penta, M., German, D.M., Guéhéneuc, Y.-G., Antoniol, G., An exploratory study of the evolution of software licensing (2010) IEEE/ACM International Conference on Software Engineering, pp. 145-154. , ACM; German, D.M., Manabe, Y., Inoue, K., A sentence-matching method for automatic license identification of source code files (2010) IEEE/ACM International Conference on Automated Software Engineering, pp. 437-446. , ACM; Galvao, I., Goknil, A., Survey of traceability approaches in model-driven engineering (2007) Ieee International Enterprise Distributed Object Computing Conference, pp. 313-324; Winkler, S., Von Pilgrim, J., A survey of traceability in requirements engineering and model-driven development (2010) Softw. Syst. Model., 9 (4), pp. 529-565; Bouillon, E., Mäder, P., Philippow, I., A survey on usage scenarios for requirements traceability in practice (2013) Requirements Engineering: Foundation for Software Quality, pp. 158-173. , Doerr J. Opdahl A.L. Springer Berlin Heidelberg Berlin, Heidelberg; Antoniol, G., Caprile, B., Potrich, A., Tonella, P., Design-code traceability for object-oriented systems (2000) Ann. Softw. Eng., 9 (1), pp. 35-58; Marcus, A., Maletic, J.I., Recovering documentation-to-source-code traceability links using latent semantic indexing (2003) IEEE/ACM International Conference on Software Engineering, pp. 125-135. , IEEE Computer Society; Antoniol, G., Canfora, G., Casazza, G., De Lucia, A., Merlo, E., Recovering traceability links between code and documentation (2002) Ieee Trans. Softw. Eng., 28 (10), pp. 970-983; Lucia, A.D., Fasano, F., Oliveto, R., Tortora, G., Recovering traceability links in software artifact management systems using information retrieval methods (2007) Acm Trans. Softw. Eng. Methodol., 16 (4); Hayes Huffman, J., Dekhtyar, A., Sundaram, S.K., Holbrook, E.A., Vadlamudi, S., April, A., Requirements tracing on target (RETRO): Improving software maintenance through traceability recovery (2007) Innov. Syst. Softw. Eng., 3 (3), pp. 193-202; Chen, X., Hosking, J., Grundy, J., Visualizing traceability links between source code and documentation (2012) Ieee Symposium on Visual Languages and Human-Centric Computing (VL/HCC), pp. 119-126; Marcus, A., Xie, X., Poshyvanyk, D., When and how to visualize traceability links? (2005) International Workshop on Traceability in Emerging Forms of Software Engineering, pp. 56-61. , ACM; Merten, T., Jüppner, D., Delater, A., Improved representation of traceability links in requirements engineering knowledge using Sunburst and Netmap visualizations (2011) International Workshop on Managing Requirements Knowledge, pp. 17-21; Li, Y., Maalej, W., Which traceability visualization is suitable in this context? a comparative study (2012) Requirements Engineering: Foundation for Software Quality, pp. 194-210. , Regnell B. Damian D. Springer Berlin Heidelberg; Winkler, S., On usability in requirements trace visualizations (2008) Requirements Engineering Visualization, pp. 56-60; Merino, L., Ghafari, M., Anslow, C., Nierstrasz, O., A systematic literature review of software visualization evaluation (2018) J. Syst. Softw., 144, pp. 165-180; Ghoniem, M., Fekete, J.-D., Castagliola, P., On the readability of graphs using node-link and matrix-based representations: A controlled experiment and statistical analysis (2005) Inf. Vis., 4 (2), pp. 114-135; Ghoniem, M., Fekete, J.-D., Castagliola, P., A comparison of the readability of graphs using node-link and matrix-based representations (2004) Ieee Symposium on Information Visualization, pp. 17-24; Keller, R., Eckert, C.M., Clarkson, P.J., Matrices or node-link diagrams: Which visual representation is better for visualising connectivity models? (2006) Inf. Vis., 5 (1), pp. 62-76; Van Ham, F., Rogowitz, B., Perceptual organization in user-generated graph layouts (2008) Ieee Trans. Vis. Comput. Graphics, 14 (6), pp. 1333-1339; Cárdenas, G.O., Aponte, J., Evaluating the graph-based visualization technique: A controlled experiment (2017) Enfoqute, 8 (1), pp. 201-216; Cárdenas Caro, G.O., (2016) Empirical Evaluation of the Usefulness of Graph-based Visualization Techniques to Support Software Understanding, , Universidad Nacional de Colombia, Sede Bogotá; Azzam, T., Evergreen, S., Germuth, A.A., Kistler, S.J., Data visualization and evaluation (2013) Data Visualization, Part 1, 138, pp. 7-32. , New Directions for Evaluation Wiley; Carpendale, S., Evaluating information visualizations (2008) Information Visualization: Human-Centered Issues and Perspectives, 4950, pp. 19-45. , Kerren A. Stasko J.T. Fekete J.-D. North C. LNCS Springer Berlin Heidelberg; Crisan, A., Elliott, M., How to evaluate an evaluation study? Comparing and contrasting practices in vis with those of other disciplines (2008) Workshop on beyond Time and Errors: Novel EvaLUation Methods for Information Visualization, , ACM; Isenberg, P., Zuk, T., Collins, C., Carpendale, S., Grounded evaluation of information visualizations (2008) Workshop on beyond Time and Errors: Novel EvaLUation Methods for Information Visualization, pp. 61-68. , ACM; Kim, S.-H., Yi, J.S., Elmqvist, N., Oopsy-daisy: Failure stories in quantitative evaluation studies for visualizations (2014) Workshop on beyond Time and Errors: Novel EvaLUation Methods for Information Visualization, pp. 142-146. , ACM; Plaisant, C., The challenge of information visualization evaluation (2004) International Working Conference on Advanced Visual Interfaces, pp. 109-116. , ACM; Redpath, R., Srinivasan, B., Criteria for a comparative study of visualization techniques in data mining (2003) International Conference on Intelligent Systems Design and Application, , Springer-Verlag; Sousa Santos, B., Evaluating visualization techniques and tools: What are the main issues? (2008) Workshop on beyond Time and Errors: Novel EvaLUation Methods for Information Visualization, , ACM; Santos, B.S., Dias, P., Evaluation in visualization: Some issues and best practices IS&T/SPIE Electronic Imaging, Visualization and Data Analysis, 9017, pp. 1-8; Sensalire, M., (2009) A Framework to Evaluate the Effectiveness of Software Visualization Tools in Maintenance Activities, , (Ph.D. dissertation) Makerere University; Sensalire, M., Ogao, P., Telea, A., Evaluation of software visualization tools: Lessons learned (2009) International Workshop on Visualizing Software for Understanding and Analysis, pp. 19-26; Shneiderman, B., Plaisant, C., Strategies for evaluating information visualization tools: Multi-dimensional in-depth long-term Case studies (2006) Workshop on beyond Time and Errors: Novel EvaLUation Methods for Information Visualization, pp. 1-7. , ACM; Tory, M., Staub-French, S., Qualitative analysis of visualization: A building design field study (2008) Workshop on beyond Time and Errors: Novel EvaLUation Methods for Information Visualization, pp. 71-78. , ACM; Storey, M.D., Wong, K., Fong, P., Hooper, D., Hopkins, K., Muller, H.A., On designing an experiment to evaluate a reverse engineering tool (1996) Working Conference on Reverse Engineering, pp. 31-40; Kirk, D.S., Roper, M., Wood, M., (2001) Understanding Object-oriented Frameworks - An Exploratory Case Study: Technical Report EFoCS-42-2001, , Department of Computer and Information Sciences, University of Strathclyde, Glasgow; Sim, S.E., Storey, M.A.D., A structured demonstration of program comprehension tools (2000) Working Conference on Reverse Engineering, pp. 184-193; Storey, M.-A., Wong, K., Müller, H., How do program understanding tools affect how programmers understand programs? (2000) Sci. Comput. Program., 36 (2), pp. 183-207; Systä, T., Koskimies, K., Müller, H., Shimba - An environment for reverse engineering java software systems (2001) Softw. - Pract. Exp., 31 (4), pp. 371-394; Pacione, M.J., Roper, M., Wood, M., A novel software visualisation model to support software comprehension (2004) Working Conference on Reverse Engineering, pp. 70-79; Buckley, J., Requirements-based visualization tools for software maintenance and evolution (2009) Ieee Comput., 42 (4), pp. 106-108; Santos, P.S.M.D., Travassos, G.H., Action research use in software engineering: An initial survey (2009) International Symposium on Empirical Software Engineering and Measurement, pp. 414-417; Dos Santos, P.S.M., Travassos, G.H., Action research can swing the balance in experimental software engineering (2011) Advances in Computers, 83, pp. 205-276. , Zelkowitz M.V. Elsevier (Chapter 5); Staron, M., Action research in software engineering: Metrics' research perspective (invited talk) (2019) SOFSEM: Theory and Practice of Computer Science, pp. 39-49. , Catania B. Královič R. Nawrocki J. Pighizzini G. Springer International Publishing; Dang, Y., Ge, S., Huang, R., Zhang, D., Code clone detection experience at Microsoft (2011) International Workshop on Software Clones, pp. 63-64. , ACM; Wang, X., Dang, Y., Zhang, L., Zhang, D., Lan, E., Mei, H., CAn I clone this piece of code here? (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 170-179. , ACM; Yamanaka, Y., Choi, E., Yoshida, N., Inoue, K., Sano, T., Applying clone change notification system into an industrial development process (2013) Program Comprehension (ICPC), 2013 Ieee 21st International Conference on, pp. 199-206. , IEEE; Venkatasubramanyam, R.D., Gupta, S., Singh, H.K., Prioritizing code clone detection results for clone management (2013) Software Clones (IWSC), 2013 7th International Workshop on, pp. 30-36. , IEEE; Adar, E., Kim, M., SoftGUESS: Visualization and exploration of code clones in context International Conference on Software Engineering, 7, pp. 762-766. , focus: only, research method: constructive, participants: personal, viualiza- tions: cev, db, htv; Alalfi, M.H., Cordy, J.R., Dean, T.R., Analysis and clustering of model clones: An automotive industrial experience (2014) Ieee International Conference on Software Analysis, Evolution and Reengineering, pp. 375-378. , IEEE focus: primary, research method: constructive, participants: professionals, viualizations: sg; Asaduzzaman, M., Roy, C., Schneider, K., VisCad: Flexible code clone analysis support for NiCad (2011) International Workshop on Software Clones, pp. 77-78. , ACM focus: only, research method: constructive, participants: personal, viualizations: dp, hm, htv, ntv, tm; Baker, B.S., A program for identifying duplicated code (1992) Computing Science and Statistics: Proceedings of the Symposium on the Interface, pp. 49-57. , Similar to [0], focus: secondary, research method: constructive, participants: personal, viualizations: dp; Baker, B.S., On finding duplication and near-duplication in large software systems (1995) Ieee Working Conference on Reverse Engineering, pp. 86-95. , Similar to [0], focus: secondary, research method: constructive, participants: personal, viualizations: dp; Burch, M., Strotzer, J., Weiskopf, D., Visual analysis of source code similarities (2015) International Conference on Information Visualisation, pp. 21-27. , IEEE focus: only, research method: constructive, participants: personal, viualizations: tmv; Chen, Z., Kwon, Y.-W., Song, M., Clone refactoring inspection by summarizing clone refactorings and detecting inconsistent changes during software evolution (2018) J. Softw.: Evol. Process, 30 (10). , focus: secondary, research method: constructive, participants: students, viualizations: crvw; Church, K.W., Helfman, J.I., Dotplot: A program for exploring self-similarity in millions of lines of text and code (1993) J. Comput. Graph. Statist., 2 (2), pp. 153-174. , focus: only, research method: constructive, participants: personal, viualizations: dp; Cordy, J.R., Exploring large-scale system similarity using incremental clone detection and live scatterplots (2011) Ieee International Conference on Program Comprehension, pp. 151-160; Cottrell, R., Walker, R.J., Denzinger, J., Jigsaw: A tool for the small-scale reuse of source code (2008) Companion Proceedings of International Conference on Software Engineering, pp. 933-934. , focus: secondary, research method: constructive, participants: none, viualizations: civ; Dang, Y., Zhang, D., Ge, S., Chu, C., Qiu, Y., Xie, T., XIAO: Tuning code clones at hands of engineers in practice (2012) Annual Computer Security Applications Conference, pp. 369-378. , ACM Similar to [0], focus: secondary, research method: constructive, participants: professionals, viualizations: civ; Dang, Y., Zhang, D., Ge, S., Huang, R., Chu, C., Xie, T., Transferring code-clone detection and analysis to practice (2017) International Conference on Software Engineering Practice Track (ICSE-SEIP), pp. 53-62. , IEEE Similar to [0], focus: secondary, research method: constructive, participants: professionals, viualizations: civ; De Wit, M., (2009) Managing Clones Using Dynamic Change Tracking and Resolution: Helping Developers to Cope with Changing Clone Fragments, , (Master's thesis) TU Delft, Delft University of Technology Similar to [0], focus: secondary, research method: qualitative empirical, participants: students, professionals, viualizations: bm, civ, ntv, ss; De Wit, M., Zaidman, A., Van Deursen, A., Managing code clones using dynamic change tracking and resolution (2009) Ieee International Conference on Software Maintenance, pp. 169-178. , IEEE Similar to [0], focus: secondary, research method: qualitative empirical, participants: students, professionals, viualizations: civ; Ducasse, S., Rieger, M., Demeyer, S., A language independent approach for detecting duplicated code (1999) Ieee International Conference on Software Maintenance, pp. 109-118. , IEEE focus: secondary, research method: constructive, participants: personal, viualizations: dp; Fish, A., Nguyen, T.L., Song, M., CloneMap: A clone-aware code inspection tool in evolving software (2018) Ieee International Conference on Electro/Information Technology, pp. 0368-0372. , IEEE focus: secondary, research method: constructive, participants: personal, viualizations: civ; Forbes, C., Keivanloo, I., Rilling, J., Doppel-Code: A clone visualization tool for prioritizing global and local clone impacts (2012) Annual Computer Software and Applications Conference, pp. 366-367. , focus: only, research method: constructive, participants: none, viualizations: bm, civ; Göde, N., (2011) Clone Evolution, , (Doctoral Dissertation) University of Bremen similar to [0], focus: secondary, research method: constructive, participants: personal, viualizations: bc, cev, civ, lc, tm, ts; Hanjalić, A., ClonEvol: Visualizing software evolution with code clones (2013) Working Conference on Software Visualization, pp. 1-4. , IEEE focus: only, research method: constructive, participants: personal, viualizations: wv; Harder, J., Göde, N., Efficiently handling clone data: RCF and cyclone (2011) International Workshop on Software Clones, pp. 81-82. , similar to [0], focus: secondary, research method: constructive, participants: none, viualizations: bc, cev, civ, lc, tm, ts; Hauptmann, B., Bauer, V., Junker, M., Using edge bundle views for clone visualization (2012) International Workshop on Software Clones, pp. 86-87. , focus: only, research method: constructive, participants: none, viualizations: wv; Helfman, J., Dotplot patterns: A literal look at pattern languages (1996) Theory Pract. Object Syst., 2 (1), pp. 31-41. , focus: only, research method: constructive, participants: per- sonal, viualizations: dp; Higo, Y., (2006) Code Clone Analysis Methods for Efficient Software Maintenance, , (Ph dissertation) Osaka University, Japan Similar to [0], focus: secondary, research method: construc- tive, participants: personal, viualizations: civ, dp, ntv, pcv; Higo, Y., Kamiya, T., Kusumoto, S., Inoue, K., Aries: Refactoring support environment based on code clone analysis (2004) Iasted International Conference on Software Engineering and Applications, pp. 222-229. , ACTA Press Similar to [0], focus: secondary, research method: constructive, participants: personal, viualizations: pcv; Jablonski, P., Hou, D., CReN: A tool for tracking copy-and-paste code clones and renaming identifiers consistently in the IDE (2007) Acm Sigplan Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA) Workshop on Eclipse Technology EXchange, pp. 16-20. , ACM focus: secondary, research method: constructive, participants: none, viualizations: bm, civ; Jacob, F., Hou, D., Jablonski, P., Actively comparing clones inside the code editor (2010) International Workshop on Software Clones, pp. 9-16. , ACM focus: secondary, research method: constructive, participants: personal, viualizations: civ; Jiang, Z.M., (2006) Visualizing and Understanding Code Duplication in Large Software Systems, , (Master's thesis) University of Waterloo Similar to [0,0], focus: secondary, research method: constructive, participants: personal, viualizations: cccg, htv; Jiang, Z.M., Hassan, A.E., A framework for studying clones in large software systems (2007) International Working Conference on Source Code Analysis and Manipulation, pp. 203-212. , IEEE Similar to [0], focus: secondary, research method: constructive, participants: personal, viualizations: htv; Jiang, Z.M., Hassan, A.E., Holt, R.C., Visualizing clone cohesion and coupling Asia-Pacific Software Engineering Conference, pp. 467-476. , Similar to [0], focus: only, research method: constructive, participants: personal, viualizations: cccg; Johnson, J., Visualizing textual redundancy in legacy source (1994) Conference of the Centre for Advanced Studies on Collaborative Research, p. 32. , IBM Press focus: only, research method: constructive, participants: personal, viualizations: hd; Kamiya, T., An execution-semantic and content-and-context-based code-clone detection and analysis (2015) International Workshop on Software Clones, pp. 1-7. , focus: secondary, research method: constructive, participants: none, viualizations: ccd; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multilinguistic token-based code clone detection system for large scale source code (2002) Ieee Trans. Softw. Eng., 28 (7), pp. 654-670. , focus: secondary, research method: constructive, participants: personal, viualizations: civ, dp; Kapser, C., Godfrey, M.W., Improved tool support for the investigation of duplication in software (2005) Ieee International Conference on Software Maintenance, pp. 305-314. , IEEE focus: secondary, research method: constructive, participants: none, viualizations: ng; Liu, W., Peng, X., Xing, Z., Li, J., Xie, B., Zhao, W., Supporting exploratory code search with differencing and visualization (2018) Ieee International Conference on Software Analysis, Evolution and Reengineering, pp. 300-310. , focus: primary, research method: constructive, participants: students, viualizations: eg; Livieri, S., Higo, Y., Matushita, M., Inoue, K., Very-large scale code clone analysis and visualization of open source programs using distributed CCFinder: D-CCFinder (2007) International Conference on Software Engineering, pp. 106-115. , focus: primary, research method: constructive, participants: personal, viualizations: dp; Luciv, D., Detecting and tracking near duplicates in software documentation (2017) Proceedings of the Spring/Summer Young Researchers' Colloquium on Software Engineering, Innopolis, Republic of Tatarstan, Russian Federation, pp. 125-129. , Similar to [0], focus: secondary, research method: constructive, participants: none, viualizations: civ, hm; Luciv, D., Koznov, D., Chernishev, G., Basit, H.A., Romanovsky, K., Terekhov, A., Duplicate finder toolkit (2018) Companion Proceedings of International Conference on Software Engineering, pp. 171-172. , ACM Similar to [0], focus: secondary, research method: constructive, participants: none, viualizations: civ, hm; Martinez, J., Ziadi, T., Klein, J., Le Traon, Y., Identifying and visualising commonality and variability in model variants (2014) Modelling Foundations and Applications, 8569, pp. 117-131. , Cabot J. Rubin J. Lecture Notes in Computer Science Springer focus: primary, research method: constructive, participants: none, viualizations: ntv, ss; Mazinanian, D., Tsantalis, N., Stein, R., Valenta, Z., JDeodorant: Clone refactoring (2016) Companion Proceedings of International Conference on Software Engineering, pp. 613-616. , IEEE Similar to [0], focus: secondary, research method: constructive, participants: none, viualizations: civ, ntv; Mondal, D., Mondal, M., Roy, C., Schneider, K., Li, Y., Wang, S., Clone-world: A visual analytic system for large scale software clones (2019) Vis. Inf., 3 (1), pp. 18-26. , Proceedings of PacificVAST 2019, focus: only, research method: quantitative empirical, participants: students, professionals, viualizations: clv, dp, hm, pcv, sg; Mondal, D., Mondal, M., Roy, C., Schneider, K., Wang, S., Li, Y., Towards visualizing large scale evolving clones (2019) International Conference on Software Engineering, pp. 302-303. , IEEE Press Similar to [0], focus: only, research method: quantitative empirical, participants: students, professionals, viualizations: clv, dp, hm, pcv, sg; Murakami, H., Higo, Y., Kusumoto, S., Clonepacker: A tool for clone set visualization (2015) Ieee International Conference on Software Analysis, Evolution and Reengineering, pp. 474-478. , IEEE focus: only, research method: quantitative em- pirical, participants: students, viualizations: civ, ntv, tm; Reniers, D., Voinea, L., Ersoy, O., Telea, A., The solid∗toolset for software visual analytics of program structure and metrics comprehension: From research prototype to product (2014) J. Sci. Comput. Program., 79, pp. 224-240. , focus: only, research method: constructive, participants: students, viualiza- tions: bm, civ, ntv, tm, wv; Rieger, M., (2005) Effective Clone Detection without Language Barriers, , (Ph dissertation) University of Bern Subsumes [0] and [0], focus: primary, research method: constructive, participants: none, viualizations: ccfe, cs, dp, dwv, htv, tm; Rieger, M., Ducasse, S., Visual detection of duplicated code (1998) European Conference on Object-Oriented Programming Workshops, pp. 75-76. , Similar to [0], similar to (P44), focus: only, research method: constructive, participants: none, viualizations: civ, dp; Rieger, M., Ducasse, S., Lanza, M., Insights into system-wide code duplication (2004) Ieee Working Conference on Reverse Engineering, pp. 100-109. , Similar to [0], focus: only, research method: constructive, participants: none, viualizations: ccfe, cs, dwv, htv, tm; Saha, R.K., Roy, C., Schneider, K., Visualizing the evolution of code clones (2011) International Workshop on Software Clones, pp. 71-72. , ACM focus: only, research method: constructive, participants: none, viualizations: cev, dp; Sano, M., Choi, E., Yoshida, N., Yamanaka, Y., Inoue, K., Supporting clone analysis with tag cloud visualization (2014) International Workshop on Innovative Software Development Methodologies and Practices, pp. 94-99. , ACM focus: only, research method: constructive, participants: none, viualizations: civ, tcv, dp; Steinbeck, M., An arc-based approach for visualization of code smells (2017) Ieee International Conference on Software Analysis, Evolution and Reengineering, pp. 397-401. , IEEE focus: only, research method: constructive, participants: none, viualizations: wv; Steinbeck, M., Koschke, R., Rüdel, M.-O., Comparing the evostreet visualization technique in two- And three-dimensional environments - A controlled experiment (2019) Ieee International Conference on Program Comprehension, pp. 231-242. , IEEE Computer Society Press focus: only, research method: quantitative empirical, participants: students, viualizations: es; Tairas, R., Gray, J., Baxter, I., Visualization of clone detection results (2006) Acm Sigplan Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA) Workshop on Eclipse Technology EXchange, pp. 50-54. , focus: only, research method: constructive, participants: none, viualizations: ntv, ss, dp; Tairas, R., Jacob, F., Gray, J., Representing clones in a localized manner (2011) International Workshop on Software Clones, pp. 54-60. , ACM focus: primary, research method: constructive, participants: none, viualizations: civ; Toomim, M., Begel, A., Graham, S.L., Managing duplicated code with linked editing (2004) Symposium on Visual Languages and Human Centric Computing, pp. 173-180. , focus: primary, research method: quantitative and quantitative empirical, participants: students, viualizations: civ; Tsantalis, N., Mazinanian, D., Krishnan, G.P., Assessing the refactorability of software clones (2015) Ieee Trans. Softw. Eng., 41 (11), pp. 1055-1090. , Similar to [0], focus: secondary, research method: constructive, participants: none, viualizations: civ; Uddin, M.S., Gaur, V., Gutwin, C., Roy, C., On the comprehension of code clone visualizations: A controlled study using eye tracking (2015) International Working Conference on Source Code Analysis and Manipulation, pp. 161-170. , IEEE focus: only, research method: quantitative empirical, participants: students, professionals, viualizations: dp, htv, pc, tm; Uddin, M.S., Roy, C., Schneider, K., Towards convenient management of software clone codes in practice: An integrated approach (2015) International Conference on Computer Science and Software Engineering, pp. 211-220. , IBM Corp. focus: primary, research method: quantitative and quantita tive empirical, participants: students, professionals, viualizations: civ, ntv; Ueda, Y., Higo, Y., Kamiya, T., Kusumoto, S., Inoue, K., Gemini: Code clone analysis tool (2002) International Symposium on Empirical Software Engineering, 2, pp. 31-32. , Similar to [0], focus: only, research method: constructive, participants: none, viualizations: civ, dp, ntv, pcv; Ueda, Y., Kamiya, T., Kusumoto, S., Inoue, K., Gemini: Maintenance support environment based on code clone analysis (2002) Ieee Symposium on Software Metrics, pp. 67-76. , Similar to [0], focus: only, research method: constructive, participants: personal, viualizations: civ, dp, ntv, pcv; Voinea, L., Telea, A., Visual clone analysis with SolidSDD (2014) Working Conference on Software Visualization, pp. 79-82. , focus: only, research method: constructive, participants: personal, viualizations: bm, civ, wv; Yoshimura, K., Mibe, R., Visualizing code clone outbreak: An industrial case study (2012) International Workshop on Software Clones, pp. 96-97. , IEEE focus: primary, research method: constructive, participants: personal, viualizations: sg; Yujiang, Y., Kazunori, S., Hironori, W., Yoshiaki, F., A tool for suggesting similar program element modifications (2014) Ipsj Sig Notes, 2014 (20), pp. 1-6. , focus: secondary, research method: constructive, participants: none, viualizations: bm, civ; Zhang, Y., Basit, H.A., Jarzabek, S., Anh, D., Low, M., Query-based filtering and graphical view generation for clone analysis (2008) Ieee International Conference on Software Maintenance, pp. 376-385. , focus: only, research method: constructive, participants: personal, viualizations: bc, bm, civ, ntv, pc, ss (our own tool); (2019) Atomiq, , http://www.getatomiq.com/, No longer commercial, URL. (Last accessed 25 September 2019); (2019) Axivion Suite, , http://www.axivion.com, URL (Last accessed 25 September 2019); (2019) Clics Help, , http://www.swag.uwaterloo.ca/clics/documentation/CLICS%5Fhelp2.pdf, URL. (Last accessed 25 September 2019); (2019) Clone Doctor, , http://www.semdesigns.com/products/clone/, URL. (Last accessed 25 September 2019); (2019) ConQAT, , https://www.cqse.eu/en/products/conqat/overview/, URL. (Last accessed 25 September 2019); (2019) ConQAT Help, , https://www.cqse.eu/download/conqat/conqat-book-2013.10.pdf, URL. (Last accessed 25 September 2019); (2019) Cyclone, , http://softwareclones.org/cyclone.php, URL. (Last accessed 25 September 2019); (2017) Gemini/CCFinder, , http://staff.unak.is/andy/MSc%20Software%20Maintenance2/Laboratories/usegeminiE.html, URL. (Last accessed 3 July 2018); (2019) JDeodorant: Clone Refactoring Support beyond IDEs, , http://blog.ieeesoftware.org/2016/10/jdeodorant-clone-refactoring-support.html, URL. (Last accessed 25 September 2019); (2019) JetBrain's DupFinder, , https://www.jetbrains.com/help/resharper/dupFinder.html, URL. (Last accessed 25 September 2019); (2019) Microsoft Visual Studio, , https://visualstudio.microsoft.com, URL. (Last accessed 25 September 2019); (2019) Patterninsight, , http://patterninsight.com/products/clone-detection/, URL. (Last accessed 25 September 2019); (2019) SolidSDD, , http://www.solidsourceit.com/products/SolidSDD-code-duplication-cloning-analysis.html, does no longer exist. URL. (Last accessed 25 September 2019); (2019) SonarQube, , https://docs.sonarqube.org/latest/user-guide/visualizations/, URL. (Last accessed 25 September 2019); (2019) Teamscale, , https://www.cqse.eu/en/products/teamscale/overview/, URL. (Last accessed 25 September 2019); (2019) Viscad, , http://homepage.usask.ca/%7Emua237/viscad/viscad.html, URL. (Last accessed 25 September 2019)},
correspondence_address1={Hammad, M.; Eindhoven University of TechnologyNetherlands; email: m.hammad@tue.nl},
publisher={Elsevier Ireland Ltd},
issn={15740137},
language={English},
abbrev_source_title={Comput. Sci. Rev.},
document_type={Review},
source={Scopus},
}

@CONFERENCE{Steinbeck2020332,
author={Steinbeck, M. and Koschke, R. and Rudel, M.O.},
title={How EvoStreets Are Observed in Three-Dimensional and Virtual Reality Environments},
journal={SANER 2020 - Proceedings of the 2020 IEEE 27th International Conference on Software Analysis, Evolution, and Reengineering},
year={2020},
pages={332-343},
doi={10.1109/SANER48275.2020.9054802},
art_number={9054802},
note={cited By 0; Conference of 27th IEEE International Conference on Software Analysis, Evolution, and Reengineering, SANER 2020 ; Conference Date: 18 February 2020 Through 21 February 2020;  Conference Code:158982},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85083582159&doi=10.1109%2fSANER48275.2020.9054802&partnerID=40&md5=ad3e3a1ccfcf6f3c4f7052936edc4346},
affiliation={University of Bremen, Germany},
abstract={When analyzing software systems, a large amount of data accumulates. In order to assist developers in the preparation, evaluation, and understanding of findings, different visualization techniques have been developed. Due to recent progress in immersive virtual reality, existing visualization tools were ported to this environment. However, three-dimensional and virtual reality environments have different advantages and disadvantages, and by transferring concepts, such as layout algorithms and user interaction mechanisms, more or less one-to-one, the characteristics of these environments are neglected. In order to develop techniques adapting to the circumstance of a particular environment, more research in this field is necessary. In previously conducted case studies, we compared EvoStreets deployed in three different environments: 2D, 2.5D, and virtual reality. We found evidence that movement patterns - path length, average speed, and occupied volume - differ significantly between the 2.5D and virtual reality environments for some of the tasks that had to be solved by 34 participants in a controlled experiment. In this paper, we analyze the results of this experiment in more details, to study if not only movement is affected by these environments, but also the way how EvoStreets are observed. Although we could not find enough evidence that the number of viewpoints and their duration differ significantly, we found indications that in virtual reality viewpoints are located closer to the EvoStreets and that the distance between viewpoints is shorter. Based on our previous results and the findings of this paper, we present visualization and user interaction concepts specific to the kind of environment. © 2020 IEEE.},
keywords={Reengineering;  Visualization, Controlled experiment;  Immersive virtual reality;  Layout algorithms;  Software systems;  User interaction;  Virtual-reality environment;  Visualization technique;  Visualization tools, Virtual reality},
references={Wettel, R., Lanza, M., Visualizing software systems as cities (2007) 2007 4th IEEE International Workshop on Visualizing Software for Understanding and Analysis, pp. 92-99. , June; Wettel, R., Lanza, M., Codecity: 3d visualization of large-scale software (2008) Companion of the 30th International Conference on Software Engineering, Ser. ICSE Companion '08, pp. 921-922. , http://doi.acm.org/10.1145/1370175.1370188, New York, NY, USA: ACM; Wettel, R., Lanza, M., Visual exploration of large-scale system evolution (2008) 2008 15th Working Conference on Reverse Engineering, pp. 219-228. , Oct; Steinbrückner, F., Lewerentz, C., Representing development history in software cities (2010) ACM International Symposium on Software Visualization. ACM, pp. 193-202; Steinbrückner, F., (2013) Consistent Software Cities: Supporting Comprehension of Evolving Software Systems, , https://opus4.kobv.de/opus4-btu/frontdoor/index/index/docId/1681, Ph. D. dissertation, Brandenburgische Technische Universität Cottbus, 06; Chance, S.S., Gaunet, F., Beall, A.C., Loomis, J.M., Locomotion mode affects the updating of objects encountered during travel: The contribution of vestibular and proprioceptive inputs to path integration (1998) Presence: Teleoper. Virtual Environ, 7 (2), pp. 168-178; Steinbeck, M., Koschke, R., Rüdel, M.-O., Comparing the evostreet visualization technique in two-and three-dimensional environments-a controlled experiment (2019) International Conference on Program Comprehension. IEEE Computer Society Press, pp. 231-242; Marcel, S., Rainer, K., Rudel, M., Movement patterns and trajectories in three-dimensional software visualization (2019) 2019 19th International Working Conference on Source Code Analysis and Manipulation (SCAM), pp. 163-174. , Sep; Rüdel, M., Ganser, J., Koschke, R., A controlled experiment on spatial orientation in vr-based software cities (2018) Working Conference on Software Visualization, pp. 21-31. , Sep; Koschke, R., Software visualization in software maintenance, reverse engineering, and re-engineering: A research survey (2003) Journal of Software Maintenance and Evolution: Research and Practice, 15 (2), pp. 87-109; Carpendale, S., Ghanam, Y., (2008) A Survey Paper on Software Architecture Visualization, , University of Calgary, Technical Report 2008-906-19; Teyseyre, A.R., Campo, M.R., An overview of 3d software visualization (2009) IEEE Transactions on Visualization and Computer Graphics, 15 (1), pp. 87-105; Bassil, S., Keller, R.K., A qualitative and quantitative evaluation of software visualization tools (2001) Proceedings of the Workshop on Software Visualization. IEEE, pp. 33-37; Bassi, S., Keller, R.K., Software visualization tools: Survey and analysis (2001) International Workshop on Program Comprehension. IEEE, pp. 7-17; Caserta, P., Zendra, O., Visualization of the static aspects of software: A survey (2011) IEEE Transactions on Visualization and Computer Graphics, 17 (7), pp. 913-933; Diehl, S., (2001) Software Visualization: International Seminar Dagstuhl Castle, , Germany, ser. Lecture Notes in Computer Science. Springer; Diehl, S., (2010) Software Visualization: Visualizing the Structure, Behaviour, and Evolution of Software, , Springer; Merino, L., Ghafari, M., Anslow, C., Nierstrasz, O., A systematic literature review of software visualization evaluation (2018) Journal of Systems and Software, 144, pp. 165-180. , https://doi.org/10.1016/j.jss.2018.06.027; Johnson, B., Shneiderman, B., Tree-maps: A space-filling approach to the visualization of hierarchical information structures (1991) Proceedings of the Conference on Visualization, pp. 284-291. , http://dl.acm.org/citation.cfmid=949607.949654, IEEE Computer Society Press; Scheibel, W., Weyand, C., Döllner, J., Evocells-a treemap layout algorithm for evolving tree data (2018) International Joint Conference on Computer Vision, Imaging and Computer Graphics Theory and Applications, pp. 273-280; Holten, D.H.R., Hierarchical edge bundles: Visualization of adjacency relations in hierarchical data (2006) IEEE Transactions on Visualization and Computer Graphics, 12 (5), pp. 741-748. , Sep; Holten, D.H.R., (2009) Visualization of Graphs and Trees for Software Analysis, , Ph. D. dissertation, Technical University of Delft; Vincur, J., Navrat, P., Polasek, I., Vr city: Software analysis in virtual reality environment (2017) 2017 IEEE International Conference on Software Quality, Reliability and Security Companion (QRS-C), pp. 509-516. , July; Knight, C., Munro, M., Virtual but visible software (2000) Information Visualization, 2000. Proceedings. IEEE International Conference On. IEEE, pp. 198-205; Capece, N., Erra, U., Romano, S., Scanniello, G., Visualising a software system as a city through virtual reality (2017) Augmented Reality, Virtual Reality, and Computer Graphics, pp. 319-327. , L. T. De Paolis, P. Bourdot, and A. Mongelli, Eds. Cham: Springer International Publishing; Maletic, J.I., Leigh, J., Marcus, A., Dunlap, G., Visualizing objectoriented software in virtual reality (2001) International Workshop on Program Comprehension, pp. 26-35. , May; Panas, T., Berrigan, R., Grundy, J., A 3d metaphor for software production visualization (2003) International Conference Information Visualization. IEEE, pp. 314-319; Panas, T., Epperly, T., Quinlan, D., Saebjornsen, A., Vuduc, R., Communicating software architecture using a unified single-view visualization (2007) Engineering Complex Computer Systems, 2007. 12th IEEE International Conference On. IEEE, pp. 217-228; Fittkau, F., Krause, A., Hasselbring, W., Exploring software cities in virtual reality (2015) Working Conference on Software Visualization. IEEE, pp. 130-134; Khaloo, P., Maghoumi, M., Taranta, E., Bettner, D., Laviola, J., Code park: A new 3d code visualization tool (2017) Working Conference on Software Visualization. IEEE, pp. 43-53; Merino, L., Fuchs, J., Blumenschein, M., Anslow, C., Ghafari, M., Nierstrasz, O., Behrisch, M., Keim, D.A., On the impact of the medium in the effectiveness of 3d software visualizations (2017) Working Conference on Software Visualization. IEEE, pp. 11-21; Schreiber, A., Brüggemann, M., Interactive visualization of software components with virtual reality headsets (2017) Working Conference on Software Visualization. IEEE, pp. 119-123; Ogami, K., Kula, R.G., Hata, H., Ishio, T., Matsumoto, K., Using high-rising cities to visualize performance in real-time (2017) Working Conference on Software Visualization. IEEE, pp. 33-42; Fernandes, F., Rodrigues, C.S., Werner, C., Dynamic analysis of software systems through virtual reality (2017) Symposium on Virtual and Augmented Reality, pp. 331-340. , Nov. in Spanish; Merino, L., Hess, M., Bergel, A., Nierstrasz, O., Weiskopf, D., Perfvis: Pervasive visualization in immersive augmented reality for performance awareness (2019) ACM/SPEC International Conference on Performance Engineering., pp. 13-16. , ACM Press; Bowman, D.A., Davis, E.T., Hodges, L.F., Badre, A.N., Maintaining spatial orientation during travel in an immersive virtual environment (1999) Presence: Teleoper. Virtual Environ, 8 (6), pp. 618-631. , http://dx.doi.org/10.1162/105474699566521; Riecke, B.E., Cunningham, D.W., Bülthoff, H.H., Spatial updating in virtual reality: The sufficiency of visual information (2007) Psychological Research, 71 (3), pp. 298-313. , https://doi.org/10.1007/s00426-006-0085-z, May; Regian, J.W., Shebilske, W.L., Monk, J.M., Virtual reality: An instructional medium for visual-spatial tasks (1992) Journal of Communication, 42 (4), pp. 136-149. , http://dx.doi.org/10.1111/j.1460-2466.1992.tb00815.x; Ruddle, R.A., Payne, S.J., Jones, D.M., Navigating large-scale virtual environments: What differences occur between helmet-mounted and desktop displays (1999) Presence: Teleoperators & Virtual Environments, 8 (2), pp. 157-168; Ruddle, R.A., Péruch, P., Effects of proprioceptive feedback and environmental characteristics on spatial learning in virtual environments (2004) International Journal of Human-Computer Studies, 60 (3), pp. 299-326. , http://www.sciencedirect.com/science/article/pii/S1071581903001733; Merino, L., Bergel, A., Nierstrasz, O., Overcoming issues of 3d software visualization through immersive augmented reality (2018) Working Conference on Software Visualization, pp. 54-64. , IEEE Computer Society Press; Basit, H.A., Hammad, M., Jarzabek, S., Koschke, R., What do we need to know about clones. Deriving information needs from user goals (2015) International Workshop on Software Clones. IEEE Computer Society Press, pp. 51-57. , Mar; Sillito, J., Murphy, G.C., De Volder, K., Asking and answering questions during a programming change task (2008) IEEE Transactions on Software Engineering, 34 (4), pp. 434-451. , July},
editor={Kontogiannis K., Khomh F., Chatzigeorgiou A., Fokaefs M.-E., Zhou M.},
sponsors={IEEE Computer Society; Western University},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781728151434},
language={English},
abbrev_source_title={SANER - Proc. IEEE Int. Conf. Softw. Anal., Evol., Reengineering},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Said2020,
author={Said, W. and Quante, J. and Koschke, R.},
title={Mining understandable state machine models from embedded code},
journal={Empirical Software Engineering},
year={2020},
doi={10.1007/s10664-020-09865-0},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85090475995&doi=10.1007%2fs10664-020-09865-0&partnerID=40&md5=3a287e962bebfa9bed9dcd79535a77ea},
affiliation={Robert Bosch GmbH, Renningen, Germany; Universität Bremen, Bremen, Germany},
abstract={Program understanding is a time-consuming and tedious activity for software developers. Manually building abstractions from source code requires in-depth analysis of the code. Automatic extraction of such models is possible, but cannot derive meaningful abstractions that are not already contained in the code. The automated extraction even has problems to decide which aspects of the code are important and which are not. Therefore, interactive semi-automatic approaches are the compromise of choice. In this article, we describe how state machines that describe the behaviour of a function can be extracted from code. The approach includes interaction – the user decides which aspects of the identified potentially relevant information is really relevant and which is not. This helps to reduce the resulting state machines to an understandable degree. However, these state machines in their raw form have transition conditions that are very complex and thus not understandable for humans. Therefore, we also introduce a technique to reduce these guards to an understandable form. The technique is a combination of heuristic logic minimization, exploitation of infeasible paths, and using transition priorities. We evaluate the approach on industrial embedded C code, first in a case study with hundreds of extracted state machines, and then in two experiments with professional developers. The results show that the approach is highly effective in making the guards understandable, and that guards reduced by our approach and presented with priorities are easier to understand than guards without priorities. We also show that the overall approach is beneficial for program comprehension. The guard reduction approach itself is quite generic and can also be applied to other problems. We demonstrate that for the simplification of mode switch logic. © 2020, Springer Science+Business Media, LLC, part of Springer Nature.},
author_keywords={Boolean minimization;  Embedded software;  Legacy code;  Model mining;  Program understanding;  Software reengineering;  State machines;  Static analysis},
keywords={Computer circuits;  Extraction;  Logic Synthesis, Automated extraction;  Automatic extraction;  Logic minimization;  Program comprehension;  Program understanding;  Software developer;  State machine models;  Transition conditions, C (programming language)},
references={Inferring hierarchical motifs from execution traces. In: Proceedings of 40th International conference on software engineering (2018) Pp 776–787; Ammons, G., Bodík, R., Larus, J.R., Mining specifications (2002) Proceedings 29Th Symp. on Principles of Programming Languages, pp. 4-16; Bae, J.H., Chae, H.S., Systematic approach for constructing an understandable state machine from a contract-based specification: Controlled experiments (2016) Softw Syst Modell, 15 (3), pp. 847-879; Bailey, R.A., (2008) Design of Comparative Experiments. Cambridge Series in Statistical and Probabilistic Mathematics, , Cambridge University Press, Cambridge; Bryant, R.E., Graph-based algorithms for boolean function manipulation (1986) IEEE Trans Comput, 35 (8), pp. 677-691; Christensen, L.B., (2001) Experimental Methodology, , Bacon, Boston; Collins, R.W., Hevner, A.R., Walton, G.H., Linger, R.C., The impacts of function extraction technology on program comprehension: a controlled experiment (2008) Inf Softw Technol, 50 (11), pp. 1165-1179; Corbett, J.C., Dwyer, M.B., Hatcliff, J., Laubach, S., Pasareanu, C.S., Robby, Z.H., Bandera: Extracting finite-state models from Java source code (2000) Proceedings of 22Nd International Conference on Software Engineering, pp. 439-448. , In:, pp; Cornelissen, B., Zaidman, A., van Deursen, A., A controlled experiment for program comprehension through trace visualization (2011) IEEE Trans Softw Eng, 37 (3), pp. 341-355; Coudert, O., Sasao, T., Two-level Logic Minimization (2002) Chap, 2, pp. 1-27. , Springer, Boston; Cruz-Lemus, J.A., Maes, A., Genero, M., Poels, G., Piattini, M., The impact of structural complexity on the understandability of UML statechart diagrams (2010) Inf Sci, 180 (11), pp. 2209-2220; de Moura, L.M., Bjørner, N., Z3: An efficient SMT solver. In: Proceedings of 14th International conference on tools and algorithms for the construction and analysis of systems (TACAS) (2008) Pp 337–340; Eisenbarth, T., Koschke, R., Vogel, G., Static object trace extraction for programs with pointers (2005) J Syst Softw, 77 (3), pp. 263-284; Fjeldstad, R.K., Hamlen, W.T., (1984) Application Program Maintenance Study: Report to Our Respondents. In: Proceedings GUIDE, p. 48; Godefroid, P., Klarlund, N., Sen, K., DART: Directed automated random testing (2005) Proceedings of Conf. on Programming Language Design and Implementation, pp. 213-223; Gravino, C., Scanniello, G., Tortora, G., Source-code comprehension tasks supported by UML design models: Results from a controlled experiment and a differentiated replication (2015) J Vis Lang Comput, 28, pp. 23-38; Harel, D., Naamad, A., The STATEMATE semantics of statecharts (1996) ACM Trans Softw Eng Methodol (TOSEM), 5 (4), pp. 293-333; Knor, R., Trausmuth, G., Weidl, J., Reengineering C/C++ source code by transforming state machines (1998) Development and Evolution of Software Architectures for Product Families, pp. 97-105. , van der Linden F, Springer, Berlin; Kumar, A., SCHAEM: A method to extract statechart representation of FSMs (2009) Proceedings of int’l Advance Computing Conference, pp. 1556-1561; Kung, D.C., Suchak, N., Gao, J.Z., Hsia, P., Toyoshima, Y., Chen, C., On object state testing (1994) Proceedings of 18Th int’l Computer Software and Applications Conference (COMPSAC), pp. 222-227; Lind-Nielsen, J., (1999) Buddy: A Binary Decision Diagram Package, , https://sourceforge.net/projects/buddy/; Lo, D., Khoo, S.C., Liu, C., Efficient mining of iterative patterns for software specification discovery. In: Proceedings of 13th International conference on knowledge discovery and data mining (2007) Pp 460–469; Minelli, R., Mocci, A., Lanza, M., I know what you did last summer: An investigation of how developers spend their time (2015) Proceedings of 23Rd International Conference on Program Comprehension, ICPC ’1, pp. 25-35; Murphy, G.C., Notkin, D., Sullivan, K., Software reflexion models: Bridging the gap between source and high-level models (1995) SIGSOFT Softw Eng Notes, 20 (4), pp. 18-28; Parnas, D.L., Software aging (1994) Proceedings of 16Th International Conference on Software Engineering (ICSE), pp. 279-287. , In:, pp; Quante, J., Do dynamic object process graphs support program understanding? - a controlled experiment (2008) 2008 16Th IEEE International Conference on Program Comprehension, pp. 73-82. , In:, pp; Ricca, F., Torchiano, M., Leotta, M., Tiso, A., Guerrini, G., Reggio, G., On the impact of state-based model-driven development on maintainability: a family of experiments using unimod (2018) Empir Softw Eng, 23 (3), pp. 1743-1790; Roehm, T., Tiarks, R., Koschke, R., Maalej, W., How do professional developers comprehend software?. In: Proceedings of 34th International conference on software engineering (2012) Pp 255–265; Rudell, R.L., Multiple-valued logic minimization for PLA synthesis (1986) Technical Report, California Univ. Berkeley Electronics Research Lab; Said, W., Quante, J., Koschke, R., On state machine mining from embedded control software. In: Proceedings of 34th International conference on software maintenance and evolution (2018) Pp 163–172, , (a); Said, W., Quante, J., Koschke, R., Towards interactive mining of understandable state machine models from embedded software (2018) Proceedings of 6Th International Conference on Model-Driven Engineering and Software Development (MODELSWARD), pp. 117-128; Said, W., Quante, J., Koschke, R., Do extracted state machine models help to understand embedded software? (2019) Proceedings of 27Th International Conference on Program Comprehension (ICPC), pp. 191-196; Said, W., Quante, J., Koschke, R., Towards understandable guards of extracted state machines from embedded software. In: 26th International conference on software analysis, evolution and reengineering (SANER) (2019) Pp 264–274, , (b); Scanniello, G., Gravino, C., Genero, M., Cruz-Lemus, J.A., Tortora, G., Risi, M., Dodero, G., Do software models based on the UML aid in source-code comprehensibility? aggregating evidence from 12 controlled experiments (2018) Empir Softw Eng, 23 (5), pp. 2695-2733; Sen, K., Marinov, D., Agha, G., CUTE: A concolic unit testing engine for C. In: Proceedings of 10th european software engineering conf. / 13th int’l symp. on foundations of software engineering (2005) Pp 263–272; Sen, T., Mall, R., Extracting finite state representation of Java programs (2016) Softw Syst Model, 15 (2), pp. 497-511; Shoham, S., Yahav, E., Fink, S.J., Pistoia, M., Static specification mining using automata-based abstractions (2008) IEEE Trans Softw Eng, 34 (5), pp. 651-666; Snelting, G., Robschink, T., Krinke, J., Efficient path conditions in dependence graphs for software safety analysis (2006) ACM Trans Softw Eng Methodol, 15 (4), pp. 410-457; Somė, S.S., Lethbridge, T., Enhancing program comprehension with recovered state models (2002) 10Th int’l Workshop on Program Comprehension (IWPC), pp. 85-93; Tarjan, R.E., Testing flow graph reducibility (1974) J Comput Syst Sci, 9 (3), pp. 355-365; Tonella, P., Potrich, A., (2011) Reverse Engineering of Object Oriented Code, , Springer Publishing Company, Incorporated; van Den Brand, M., Serebrenik, A., van Zeeland, D., Extraction of state machines of legacy C code with cpp2XMI. In: Proceedings of 7th belgian-netherlands software evolution workshop (2008) Pp 28–30; Vasu, S., Kust, O., SCODE: Designing and verifying functionally safe systems in conformance to IEC61508 and ISO26262 (2018) Internationales Stuttgarter Symposium, 18, pp. 981-992. , Bargende M, Reuss HC, Wiedemann J, Springer Fachmedien, Wiesbaden; Walkinshaw, N., Bogdanov, K., Ali, S., Holcombe, M., Automated discovery of state transitions and their functions in source code (2008) Softw Test Verif Reliab, 18 (2), pp. 99-121; Whaley, J., Martin, M.C., Lam, M.S., Automatic extraction of object-oriented component interfaces (2002) SIGSOFT Softw Eng Notes, 27 (4), pp. 218-228; Xiao, H., Sun, J., Liu, Y., Lin, S., Sun, C., TzuYu: Learning stateful typestates. In: Proceedings of 28th International conference on automated software engineering (2013) Pp 432–442; Xie, T., Martin, E., Yuan, H., Automatic extraction of abstract-object-state machines from unit-test executions. In: Proceedings of 28th International conference on software engineering (2006) Pp 835–838; Zimmerman, M.K., Lundqvist, K., Leveson, N., Investigating the readability of state-based formal requirements specification languages. In: Proceedings of 24th International conference on software engineering (2002) Pp 33–43},
correspondence_address1={Said, W.; Robert Bosch GmbHGermany; email: wasim.said@de.bosch.com},
publisher={Springer},
issn={13823256},
coden={ESENF},
language={English},
abbrev_source_title={Empir Software Eng},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Arammongkolvichai201931,
author={Arammongkolvichai, V. and Koschke, R. and Ragkhitwetsagul, C. and Choetkiertikul, M. and Sunetnanta, T.},
title={Improving Clone Detection Precision Using Machine Learning Techniques},
journal={Proceedings - 2019 10th International Workshop on Empirical Software Engineering in Practice, IWESEP 2019},
year={2019},
pages={31-36},
doi={10.1109/IWESEP49350.2019.00014},
art_number={8945086},
note={cited By 0; Conference of 10th International Workshop on Empirical Software Engineering in Practice, IWESEP 2019 ; Conference Date: 13 December 2019 Through 14 December 2019;  Conference Code:156503},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85078097728&doi=10.1109%2fIWESEP49350.2019.00014&partnerID=40&md5=1fb39ae7f08030704d0089b24bee3d9b},
affiliation={Faculty of Information and Communication Technology (ICT), Mahidol University, Thailand; University of Bremen, Germany},
abstract={Code clones or similar segments of code in a software project can be detected by using a clone detection tool. Due to modifications applied after copying and pasting of the cloned code, the current code clone detection tools face challenges to accurately detect clones with heavy modifications (i.e., Type-3 clones or clones with added/deleted/modified statements). One challenge is because the clone results contain several false positives. In this paper, we propose an approach for increasing the precision of code clone detection using machine learning techniques. By training a decision tree on 19 clone class metrics, we use the trained decision tree as a clone filter by placing it in the last step in the clone detection pipeline. This aims to remove false positive clone classes reported by a clone detection tool. We found that the decision tree clone filter is helpful for decreasing the number of false positive clone classes in iClones, a well-known code clone detector. After training the decision tree on 537 clone classes in JFreeChart and evaluating it on the test data set, it could improve iClone's precision from 0.94 to 0.98. The findings show that decision tree can be used effectively for filtering false positive clones. Nonetheless, we found that the filter is only effective for Java and does not offer satisfying performance when running on a Django Python project. © 2019 IEEE.},
author_keywords={code clones;  decision tree;  machine learning},
keywords={Codes (symbols);  Decision trees;  Inspection equipment;  Learning algorithms;  Learning systems;  Machine learning;  Software engineering;  Statistical tests;  Trees (mathematics), Clone detection;  Code clone;  Code clone detection;  Current codes;  False positive;  Machine learning techniques;  Software project;  Test data, Cloning},
funding_text 1={VII. ACKNOWLEDGEMENT This research project was partially supported by Faculty of Information and Communication Technology, Mahidol University.},
references={Roy, C.K., Cordy, J.R., Koschke, R., Comparison and evaluation of code clone detection techniques and tools: A qualitative approach (2009) Science of Computer Programming, 74 (7), pp. 470-495; Ragkhitwetsagul, C., Krinke, J., Clark, D., Similarity of source code in the presence of pervasive modifications (2016) SCAM '16, pp. 117-126; Ragkhitwetsagul, C., Krinke, J., Clark, D., A comparison of code similarity analysers (2018) Empirical Software Engineering, 23 (4), pp. 2464-2519; Rattan, D., Bhatia, R., Singh, M., Software clone detection: A systematic review (2013) Information and Software Technology, 55 (7), pp. 1165-1199; Saini, V., Farmahinifarahani, F., Lu, Y., Baldi, P., Lopes, C.V., Oreo: Detection of clones in the twilight zone (2018) ESEC/FSE '18, pp. 354-365; Svajlenko, J., Islam, J.F., Keivanloo, I., Roy, C.K., Mia, M.M., Towards a big data curated benchmark of inter-project code clones (2014) ICSME '14, pp. 476-480; White, M., Tufano, M., Vendome, C., Poshyvanyk, D., Deep learning code fragments for code clone detection (2016) ASE '16, pp. 87-98; Li, L., Feng, H., Zhuang, W., Meng, N., Ryder, B., CCLearner: A deep learning-based clone detection approach (2017) ICSME '17, pp. 249-260; Yang, J., Hotta, K., Higo, Y., Igaki, H., Kusumoto, S., Classification model for code clones based on machine learning (2015) Empirical Software Engineering, 20 (4), pp. 1095-1125. , Aug; Gode, N., Koschke, R., Incremental clone detection (2009) CSMR '09, pp. 219-228; Roy, C.K., Cordy, J., NICAD: Accurate detection of near-miss intentional clones using flexible pretty-printing and code normalization (2008) ICPC '08, pp. 172-181; Cordy, J.R., Roy, C.K., The NiCad clone detector (2011) ICPC '11, pp. 219-220; Harris, S., (2015) Simian - Similarity Analyser, Version 2.4, , http://www.harukizaemon.com/simian/, accessed: 2016-02-14; Krinke, J., Is cloned code more stable than non-cloned code? (2008) SCAM '08, pp. 57-66; Mondal, M., Rahman, M.S., Roy, C.K., Schneider, K.A., Is cloned code really stable? (2018) Empirical Software Engineering, 23 (2), pp. 693-770; Kapser, C.J., Godfrey, M.W., Cloning considered harmful considered harmful: Patterns of cloning in software (2008) Empirical Software Engineering, 13 (6), pp. 645-692; Salzberg, S.L., C4.5: Programs for machine learning by J. Ross Quinlan. Morgan Kaufmann Publishers, Inc., 1993 (1994) Machine Learning, 16 (3), pp. 235-240. , Sep; Conforti, R., Leoni, M.D., Rosa, M.L., Aalst, W.M.P.V.D., De-Leoni, M., La-Rosa, M., Van-Der-Aalst, W.M., Supporting risk-informed decisions during business process execution (2013) Advanced Information Systems Engineering - Lecture Notes in Computer Science, , Jan; Higo, Y., Kamiya, T., Kusumoto, S., Inoue, K., Method and implementation for investigating code clones in a software system (2007) Information and Software Technology, 49 (9-10), pp. 985-998. , Sep; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multilinguistic token-based code clone detection system for large scale source code (2002) IEEE Transactions in Software Engineering, 28 (7), pp. 654-670. , Jul; Koschke, R., Bazrafshan, S., Software-clone rates in open-source programs written in C or C++ (2016) SANER '16, pp. 1-7; Sajnani, H., Saini, V., Svajlenko, J., Roy, C.K., Lopes, C.V., SourcererCC: Scaling code clone detection to big-code (2016) ICSE '16, pp. 1157-1168},
sponsors={Global Software Engineering Laboratory, Waseda University; Nara Institute of Science and Technology},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781728155906},
language={English},
abbrev_source_title={Proc. - Int. Workshop Empir. Softw. Eng. Pract., IWESEP},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Berger2019250,
author={Berger, B.J. and Sohr, K. and Koschke, R.},
title={The architectural security tool suite - ARCHSEC},
journal={Proceedings - 19th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2019},
year={2019},
pages={250-255},
doi={10.1109/SCAM.2019.00035},
art_number={8930872},
note={cited By 0; Conference of 19th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2019 ; Conference Date: 30 September 2019 Through 1 October 2019;  Conference Code:155994},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077811507&doi=10.1109%2fSCAM.2019.00035&partnerID=40&md5=12f5107b23d9b017ad962df693fd0413},
affiliation={Software Engineering Group, University of Bremen, Germany; Technologie-Zentrum Informatik und Informationstechnik, Germany},
abstract={Architectural risk analysis is a risk management process for identifying security flaws at the level of software architectures and is used by large software vendors, to secure their products. We present our architectural security environ- ment (ARCHSEC) that has been developed at our institute during the past eight years in several research projects. ARCHSEC aims to simplify architectural risk analysis, making it easier for small and mid-sized companies to get started. With ARCHSEC, it is possible to graphically model or to reverse engineer software security architectures. The regained software architectures can then be inspected manually or au- tomatically analyzed w.r.t. security flaws, resulting in a threat model, which serves as a base for discussion between software and security experts to improve the overall security of the software system in question, beyond the level of implementation bugs. In the evaluation part of this paper, we demonstrate how we use ARCHSEC in two of our current research projects to analyze business applications. In the first project we use ARCHSEC to identify security flaws in business process diagrams. In the second project, ARCHSEC is integrated into an audit environment for software security certification. ARCHSEC is used to identify security flaws and to visualize software systems to improve the effectiveness and efficiency of the certification process. © 2019 IEEE.},
author_keywords={Architectural-risk-analysis;  Reverse-engineering;  Security;  Software-architecture;  Threat-modeling},
keywords={Computer software;  Reverse engineering;  Risk analysis;  Risk assessment;  Risk management;  Software architecture, Architectural security;  Business applications;  Certification process;  Effectiveness and efficiencies;  Risk management process;  Security;  Software security;  Threat modeling, Program debugging},
funding_details={Bundesministerium für Wirtschaft und TechnologieBundesministerium für Wirtschaft und Technologie, BMWi, ZF4123903ED6},
funding_details={Bureau of Energy, Ministry of Economic Affairs, Republic of TaiwanBureau of Energy, Ministry of Economic Affairs, Republic of Taiwan, BOE},
funding_details={Bundesministerium für Bildung und ForschungBundesministerium für Bildung und Forschung, BMBF, 16KIS0069K, 16KIS0583, 01IS10015B},
funding_text 1={This work was supported by the German Federal Ministry of Education and Research (BMBF) under the grants 16KIS0583 (PortSec project), 16KIS0069K (ZertApps project) and 01IS10015B (ASKS project). Furthermore it was supported by the German Federal Ministry for Economic Affairs and Energy (BMWi) under the grant ZF4123903ED6 (CertifiedApplications).},
references={McGraw, G., (2006) Software Security: Building Security in, , Addison-Wesley Professional; Shostack, A., (2014) Threat Modeling: Designing for Security, 1st Ed, , Wiley Publishing; Howard, M., Lipner, S., (2006) The Security Development Lifecycle, , Redmond, WA, USA: Microsoft Press; Dhillon, D., Developer-driven threat modeling: Lessons learned in the trenches (2011) IEEE Security & Privacy, 9 (4), pp. 41-47; Berger, B.J., Sohr, K., Koschke, R., Extracting and analyzing the implemented security architecture of business applications (2013) 17th European Conference on Software Maintenance and Reengineering, CSMR 2013, pp. 285-294. , Genova, Italy, March 5-8, 2013, A. Cleve, F. Ricca, and M. Cerioli, Eds. IEEE Computer Society; Abi-Antoun, M., Barnes, J.M., Analyzing security architectures (2010) Proceedings of the IEEE/ACM Int. Conf. on Automated Software Engineering, Ser. ASE '10, , New York, NY, USA: ACM; Almorsy, M., Grundy, J., Ibrahim, A.S., Automated software architecture security risk analysis using formalized signatures (2013) 2013 35th International Conference on Software Engineering (ICSE), pp. 662-671. , May; Schaad, A., Borozdin, M., Tam2: Automated threat analysis (2012) Proc. of the 27th Annual ACM Symposium on Applied Computing, pp. 1103-1108; Jürjens, J., Shabalin, P., Automated verification of UMLsec models for security requirements (2004) Proc. of UML 2004-The Unified Modeling Language: Modeling Languages and Applications, Ser. LNCS, 3273, pp. 365-379. , Springer; Basin, D., Clavel, M., Doser, J., Egea, M., Automated analysis of security-design models (2009) Information and Software Technology, 51, pp. 815-831; Raza, A., Vogel, G., Plödereder, E., Bauhaus-A tool suite for program analysis and reverse engineering (2006) Reliable Software Technologies-Ada-Europe 2006, 11th Ada-Europe International Conference on Reliable Software Technologies, 4006, pp. 71-82. , Porto, Portugal, June 5-9, 2006, Proceedings, ser. Lecture Notes in Computer Science, L. M. Pinho and M. G. Harbour, Eds; Berger, B.J., Bunke, M., Sohr, K., An android security case study with bauhaus (2011) 18th Working Conference on Reverse Engineering, WCRE 2011, pp. 179-183. , Limerick, Ireland, October 17-20, 2011, M. Pinzger, D. Poshyvanyk, and J. Buckley, Eds. IEEE Computer Society; Sohr, K., Berger, B., Idea: Towards architecture-centric security analysis of software (2010) Proceedings of the Second International Symposium on Engineering Secure Software and Systems, Ser. Lecture Notes in Computer Science, 5965. , F. Massacci, D. S. Wallach, and N. Zannone, Eds. Springer; Berger, B.J., Sohr, K., Kalinna, U.H., Architekturelle sicherheitsanalyse für android (2014) DACH Security 2014: Bestandsaufnahme-Konzepte-Anwendungen-Perspektiven, pp. 287-298. , P. Horster, Ed. Peter Schartner and Peter Lipp; Berger, B.J., Sohr, K., Koschke, R., Automatically extracting threats from extended data flow diagrams (2016) Engineering Secure Software and Systems, pp. 56-71. , J. Caballero, E. Bodden, and E. Athanasopoulos, Eds. Cham: Springer International Publishing; (2019) ArchSec-The Architectural Security Tool Suite, , https://archsec.informatik.uni-bremen.de, U. of Bremen; Vallée-Rai, R., Co, P., Gagnon, E., Hendren, L.J., Lam, P., Sundaresan, V., Soot-A Java bytecode optimization framework (1999) Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, p. 13. , November 8-11, 1999, Mississauga, Ontario, Canada, S. A. MacKay and J. H. Johnson, Eds. IBM; Eysholdt, M., Behrens, H., Xtext: Implement your language faster than the quick and dirty way (2010) Companion to the 25th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, SPLASH/OOPSLA 2010, pp. 307-309. , October 17-21, 2010, Reno/Tahoe, Nevada, USA, W. R. Cook, S. Clarke, and M. C. Rinard, Eds. ACM; Francis, N., Green, A., Guagliardo, P., Libkin, L., Lindaaker, T., Marsault, V., Plantikow, S., Taylor, A., Cypher: An evolving query language for property graphs (2018) Proceedings of the 2018 International Conference on Management of Data, SIGMOD Conference 2018, pp. 1433-1445. , Houston, TX, USA, June 10-15, 2018, G. Das, C. M. Jermaine, and P. A. Bernstein, Eds. ACM; Schulze, C.D., Spönemann, M., Von Hanxleden, R., Drawing layered graphs with port constraints (2014) J. Vis. Lang. Comput., 25 (2), pp. 89-106; (2011) Systems and Software Engineering-Architecture Description, pp. 1-46. , ISO/IEC/IEEE ISO/IEC/IEEE 42010:2011(E) (Revision of ISO/IEC 42010:2007 and IEEE Std 1471-2000); Quante, J., Koschke, R., Dynamic object process graphs (2008) Journal of Systems and Software, 81 (4), pp. 481-501},
sponsors={IEEE Computer Society; IEEE Technical Council on Software Engineering (TCSE)},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781728149370},
language={English},
abbrev_source_title={Proc. - IEEE Int. Work. Conf. Source Code Anal. Manip., SCAM},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Said2019191,
author={Said, W. and Quante, J. and Koschke, R.},
title={Do extracted state machine models help to understand embedded software?},
journal={IEEE International Conference on Program Comprehension},
year={2019},
volume={2019-May},
pages={191-196},
doi={10.1109/ICPC.2019.00038},
art_number={8813256},
note={cited By 1; Conference of 27th IEEE/ACM International Conference on Program Comprehension, ICPC 2019 ; Conference Date: 25 May 2019;  Conference Code:151414},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072312653&doi=10.1109%2fICPC.2019.00038&partnerID=40&md5=85919a89f55ca4441cccda8973ac7b1f},
affiliation={Robert Bosch GmbH, Renningen, Germany; University of Bremen, Bremen, Germany},
abstract={Program understanding is a prerequisite for several software activities, such as maintenance, evolution, and reengineering. Code in itself is so detailed that it is often hard to understand. More abstract models describing its behaviour may ease program understanding. Manually building understandable abstractions from complex source code-as an explicit or just mental model-requires in-depth analysis of the code in the first place. Therefore, it is a time-consuming and tedious activity for developers. Model mining can support program comprehension by semi-automatically extracting high-level models from code. One helpful model is a state machine, which is an established formalism for specifying the behaviour of a software component. In this paper, we report on a controlled experiment that investigates the question: Do semi-automatically extracted state machines make understanding of complex embedded code more effective? The experiment was conducted with 30 participants on two industrial embedded C code functions. The results show that the share of correct answers increases and the required time to solve the tasks decreases significantly when extracted state machines are available. We conclude that mined state machines do in fact help in program understanding. © 2019 IEEE.},
author_keywords={Controlled experiment;  Embedded legacy software;  Program comprehension;  Reverse engineering;  State machines},
keywords={Codes (symbols);  Reverse engineering, Controlled experiment;  High-level models;  Legacy software;  Program comprehension;  Program understanding;  Software component;  State machine;  State machine models, C (programming language)},
references={Parnas, D.L., Software aging (1994) Proc. Of 16th Int'l Conf. Of Software Engineering (ICSE), pp. 279-287; Fjeldstad, R.K., Hamlen, W.T., Application program maintenance study: Report to our respondents (1984) Proc. GUIDE, 48. , Apr; Ko, A.J., Myers, B.A., Coblenz, M.J., Aung, H.H., An exploratory study of how developers seek, relate, and collect relevant information during software maintenance tasks (2006) IEEE Transactions on Software Engineering, 32 (12), pp. 971-987. , Dec; Minelli, R., Lanza, A.M.M., I know what you did last summer: An investigation of how developers spend their time (2015) Proc. Of 23rd Int'l Conf. Of Program Comprehension, pp. 25-35; Roehm, T., Tiarks, R., Koschke, R., Maalej, W., How do professional developers comprehend software? (2012) Proc. Of 34th Int'l Conf. Of Software Engineering, pp. 255-265. , June; Schulte-Coerne, V., Thums, A., Quante, J., Challenges in reengineer-ing automotive software (2009) Proc. Of 13th European Conf. Of Software Maintenance and Reengineering, pp. 315-316. , March; Said, W., Quante, J., Koschke, R., Towards interactive mining of understandable state machine models from embedded software (2018) Proc. Of 6th Int'l Conf. Of Model-Driven Engineering and Software Development (MODELSWARD), pp. 117-128; Said, W., Quante, J., Koschke, R., Reflexion models for state machine extraction and verification (2018) 2018 IEEE International Conference on Software Maintenance and Evolution (ICSME), pp. 149-159. , Sep; Said, W., Quante, J., Koschke, R., Towards understandable guards of extracted state machines from embedded software (2019) Proc. Of 26th Int'l Conf. Of Software Analysis, Evolution and Reengineering; On state machine mining from embedded control software (2018) Proc. Of 34th Int'l Conf. Of Software Maintenance and Evolution, pp. 163-172; Kung, D.C., Suchak, N., Gao, J.Z., Hsia, P., Toyoshima, Y., Chen, C., On object state testing (1994) Proc. Of 18th Int'l Computer Software and Applications Conference (COMPSAC), pp. 222-227; Sen, T., Mall, R., Extracting finite state representation of Java programs (2016) Software & Systems Modeling, 15 (2), pp. 497-511; King, J.C., Symbolic execution and program testing (1976) Journal of the ACM, 19 (7), pp. 385-394; Said, W., Quante, J., Koschke, R., Interactive measures for mining understandable state machines from embedded software: Experiments and case studies (2019) Model-Driven Engineering and Software Development, 991, pp. 211-235. , S. Hammoudi, L. F. Pires, and B. Selic, Eds. Springer International Publishing; Christensen, L.B., (2001) Experimental Methodology, , Allyn & Bacon Boston usa; Collins, R.W., Hevner, A.R., Walton, G.H., Linger, R.C., The impacts of function extraction technology on program comprehension: A controlled experiment (2008) Information and Software Technology, 50 (11), pp. 1165-1179; Quante, J., A program interpreter for arbitrary abstractions (2016) 16th Int'l Working Conference on Source Code Analysis and Manipulation, pp. 91-96; Cornelissen, B., Zaidman, A., Van Deursen, A., A controlled experiment for program comprehension through trace visualization (2011) IEEE Transactions on Software Engineering, 37 (3), pp. 341-355. , May; Alimadadi, S., Mesbah, A., Pattabiraman, K., Inferring hierarchical motifs from execution traces (2018) Proc. Of 40th Int'l Conf. Of Software Engineering, pp. 776-787; Gravino, C., Scanniello, G., Tortora, G., Source-code comprehension tasks supported by uml design models: Results from a controlled experiment and a differentiated replication (2015) Journal of Visual Languages & Computing, 28, pp. 23-38; Scanniello, G., Gravino, C., Genero, M., Cruz-Lemus, J.A., Tortora, G., Risi, M., Dodero, G., Do software models based on the uml aid in source-code comprehensibility? Aggregating evidence from 12 controlled experiments (2018) Empirical Software Engineering, 23 (5), pp. 2695-2733. , Oct; Ammons, G., Bodík, R., Larus, J.R., Mining specifications (2002) Proc. 29th Symp. On Principles of Programming Languages, pp. 4-16; Whaley, J., Martin, M.C., Lam, M.S., Automatic extraction of object-oriented component interfaces (2002) SIGSOFT Softw. Eng. Notes, 27 (4), pp. 218-228. , Jul; Lo, D., Khoo, S.-C., Liu, C., Efficient mining of iterative patterns for software specification discovery (2007) Proc. Of 13th Int'l Conf. Of Knowledge Discovery and Data Mining, pp. 460-469; Eisenbarth, T., Koschke, R., Vogel, G., Static object trace extraction for programs with pointers (2005) Journal of Systems and Software, 77 (3), pp. 263-284; Shoham, S., Yahav, E., Fink, S.J., Pistoia, M., Static specification mining using automata-based abstractions (2008) IEEE Transactions on Software Engineering, 34 (5), pp. 651-666. , Sept; Xiao, H., Sun, J., Liu, Y., Lin, S., Sun, C., Tzuyu: Learning stateful typestates (2013) Proc. Of 28th Int'l Conf. Of Automated Software Engineering, pp. 432-442; Xie, T., Martin, E., Yuan, H., Automatic extraction of abstract-object-state machines from unit-test executions (2006) Proc. Of 28th Int'l Conf. Of Software Engineering, pp. 835-838; Tonella, P., Potrich, A., (2011) Reverse Engineering of Object Oriented Code, , Springer Publishing Company Incorporated; Corbett, J.C., Dwyer, M.B., Hatcliff, J., Laubach, S., Pasareanu Robby, C.S., Zheng, H., Bandera: Extracting finite-state models from Java source code (2000) Proc. Of 22nd Int'l Conf. Of Software Engineering, pp. 439-448; Van Den Brand, M., Serebrenik, A., Van Zeeland, D., Extraction of state machines of legacy c code with cpp2xmi (2008) Proc. Of 7th Belgian-Netherlands Software Evolution Workshop, pp. 28-30; Knor, R., Trausmuth, G., Weidl, J., Reengineering c/c++ source code by transforming state machines (1998) Development and Evolution of Software Architectures for Product Families, pp. 97-105. , F. van der Linden, Ed. Berlin, Heidelberg: Springer; Somé, S.S., Lethbridge, T., Enhancing program comprehension with recovered state models (2002) 10th Int'l Workshop on Program Comprehension (IWPC), pp. 85-93; Bae, J.H., Chae, H.S., Systematic approach for constructing an understandable state machine from a contract-based specification: Controlled experiments (2016) Software and Systems Modelling, 15 (3), pp. 847-879. , Jul; Cruz-Lemus, J.A., Maes, A., Genero, M., Poels, G., Piattini, M., The impact of structural complexity on the understandability of uml statechart diagrams (2010) Information Sciences, 180 (11), pp. 2209-2220; Ricca, F., Torchiano, M., Leotta, M., Tiso, A., Guerrini, G., Reggio, G., On the impact of state-based model-driven development on maintainability: A family of experiments using unimod (2018) Empirical Software Engineering, 23 (3), pp. 1743-1790. , Jun},
publisher={IEEE Computer Society},
isbn={9781728115191},
language={English},
abbrev_source_title={IEEE Int. Conf. Program Comprehension},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Steinbeck2019231,
author={Steinbeck, M. and Koschke, R. and Rudel, M.O.},
title={Comparing the evostreets visualization technique in two-and three-dimensional environments a controlled experiment},
journal={IEEE International Conference on Program Comprehension},
year={2019},
volume={2019-May},
pages={231-242},
doi={10.1109/ICPC.2019.00042},
art_number={8813284},
note={cited By 4; Conference of 27th IEEE/ACM International Conference on Program Comprehension, ICPC 2019 ; Conference Date: 25 May 2019;  Conference Code:151414},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072307593&doi=10.1109%2fICPC.2019.00042&partnerID=40&md5=a8c5ac2a504f7721b4a07987dc08000a},
affiliation={University of Bremen, Germany},
abstract={Analyzing and maintaining large software systems is a challenging task due to the sheer amount of information contained therein. To overcome this problem, Steinbrückner developed a visualization technique named EvoStreets. Utilizing the city metaphor, EvoStreets are well suited to visualize the hierarchical structure of a software as well as hotspots regarding certain aspects. Early implementations of this approach use three-dimensional rendering on regular two-dimensional displays. Recently, though, researchers have begun to visualize EvoStreets in virtual reality using head-mounted displays, claiming that this environment enhances user experience. Yet, there is little research on comparing the differences of EvoStreets visualized in virtual reality with EvoStreets visualized in conventional environments. This paper presents a controlled experiment, involving 34 participants, in which we compared the EvoStreet visualization technique in different environments, namely, orthographic projection with keyboard and mouse, 2.5D projection with keyboard and mouse, and virtual reality with head-mounted displays and hand-held controllers. Using these environments, the participants had to analyze existing Java systems regarding software clones. According to our results, it cannot be assumed that: 1) the orthographic environment takes less time to find an answer, 2) the 2.5D and virtual reality environments provide better results regarding the correctness of edge-related tasks compared to the orthographic environment, and 3) the performance regarding time and correctness differs between the 2.5D and virtual reality environments. © 2019 IEEE.},
author_keywords={2.5D Projection;  EvoStreets;  Orthographic Projection;  Virtual Reality},
keywords={Computer programming;  Computer software;  Helmet mounted displays;  Mammals;  Virtual reality;  Visualization, 2.5D Projection;  EvoStreets;  Hierarchical structures;  Orthographic projections;  Three-dimensional environment;  Two-dimensional displays;  Virtual-reality environment;  Visualization technique, Three dimensional computer graphics},
references={Steinbrückner, F., (2013) Consistent Software Cities: Supporting Comprehension of Evolving Software Systems, 6. , https://opus4.kobv.de/opus4-btu/frontdoor/index/index/docId/1681, Ph.D. dissertation Brandenburgische Technische Universität Cottbus. [Online]; Wettel, R., Lanza, M., Visualizing software systems as cities (2007) 2007 4th IEEE International Workshop on Visualizing Software for Understanding and Analysis, pp. 92-99. , June; Codecity: 3d visualization of large-scale software (2008) Companion of the 30th International Conference on Software Engineering, Ser. ICSE Companion '08, pp. 921-922. , http://doi.acm.org/10.1145/1370175.1370188, New York, NY, USA: ACM. [Online]; Visual exploration of large-scale system evolution (2008) 2008 15th Working Conference on Reverse Engineering, pp. 219-228. , Oct; Holten, D., Hierarchical edge bundles: Visualization of adjacency relations in hierarchical data (2006) IEEE Transactions on Visualization and Computer Graphics, 12 (5), pp. 741-748. , Sep; Johnson, B., Shneiderman, B., Tree-maps: A space-filling approach to the visualization of hierarchical information structures (1991) Proceedings of the Conference on Visualization, pp. 284-291. , http://dl.acm.org/citation.cfm?id=949607.949654, IEEE Computer Society Press. [Online]; Chance, S.S., Gaunet, F., Beall, A.C., Loomis, J.M., Locomotion mode affects the updating of objects encountered during travel: The contribution of vestibular and proprioceptive inputs to path integration (1998) Presence: Teleoper. Virtual Environ., 7 (2), pp. 168-178; Vincur, J., Navrat, P., Polasek, I., Vr city: Software analysis in virtual reality environment (2017) 2017 IEEE International Conference on Software Quality, Reliability and Security Companion (QRS-C), pp. 509-516. , July; Rüdel, M., Ganser, J., Koschke, R., A controlled experiment on spatial orientation in vr-based software cities (2018) IEEE Working Conference on Software Visualization, pp. 21-31. , Sep; Balzer, M., Deussen, O., Lewerentz, C., Voronoi treemaps for the visualization of software metrics (2005) Proceedings of the 2005 ACM Symposium on Software Visualization, pp. 165-172; Parnin, C., Görg, C., Nnadi, O., A catalogue of lightweight visualizations to support code smell inspection (2008) ACM Symposium on Software Visualization, pp. 77-86. , http://doi.acm.org/10.1145/1409720.1409733, New York, NY, USA: ACM. [Online]; Bladh, T., Carr, D.A., Kljun, M., The effect of animated transitions on user navigation in 3d tree-maps (2005) Ninth International Conference on Information Visualisation (IV'05), pp. 297-305. , July; Wettel, R., Lanza, M., Visual exploration of large-scale system evolution (2008) Reverse Engineering 2008. WCRE'08. 15th Working Conference on, pp. 219-228; Knight, C., Munro, M., Virtual but visible software (2000) Information Visualization 2000. Proceedings. IEEE International Conference on, pp. 198-205; Capece, N., Erra, U., Romano, S., Scanniello, G., Visualising a software system as a city through virtual reality (2017) Augmented Reality, Virtual Reality, and Computer Graphics, pp. 319-327. , L. T. De Paolis, P. Bourdot, and A. Mongelli, Eds. Cham: Springer International Publishing; Maletic, J.I., Leigh, J., Marcus, A., Dunlap, G., Visualizing object-oriented software in virtual reality (2001) International Workshop on Program Comprehension, pp. 26-35. , May; Panas, T., Berrigan, R., Grundy, J., A 3d metaphor for software production visualization (2003) International Conference Information Visualization, pp. 314-319; Panas, T., Epperly, T., Quinlan, D., Saebjornsen, A., Vuduc, R., Communicating software architecture using a unified single-view visualization (2007) Engineering Complex Computer Systems 2007. 12th IEEE International Conference on, pp. 217-228; Fittkau, F., Krause, A., Hasselbring, W., Exploring software cities in virtual reality (2015) IEEE Working Conference on Software Visualization, pp. 130-134; Khaloo, P., Maghoumi, M., Taranta, E., Bettner, D., Laviola, J., Code park: A new 3d code visualization tool (2017) IEEE Working Conference on Software Visualization, pp. 43-53; Merino, L., Fuchs, J., Blumenschein, M., Anslow, C., Ghafari, M., Nier-Strasz, O., Behrisch, M., Keim, D.A., On the impact of the medium in the effectiveness of 3d software visualizations (2017) IEEE Working Conference on Software Visualization, pp. 11-21; Schreiber, A., Brüggemann, M., Interactive visualization of software components with virtual reality headsets (2017) IEEE Working Conference on Software Visualization, pp. 119-123; Ogami, K., Kula, R.G., Hata, H., Ishio, T., Matsumoto, K., Using high-rising cities to visualize performance in real-time (2017) IEEE Working Conference on Software Visualization, pp. 33-42; Fernandes, F., Rodrigues, C.S., Werner, C., Dynamic analysis of software systems through virtual reality (2017) Symposium on Virtual and Augmented Reality, pp. 331-340. , Nov., in Spanish; Elliott, A., Peiris, B., Parnin, C., Virtual reality in software engineering: Affordances, applications, and challenges (2015) IEEE/ACM International Conference on Software Engineering, 2, pp. 547-550. , May; Baum, D., Schilbach, J., Kovacs, P., Eisenecker, U., Müller, R., Getaviz: Generating structural, behavioral, and evolutionary views of software systems for empirical evaluation (2017) IEEE Working Conference on Software Visualization, pp. 114-118; Diehl, S., (2001) Software Visualization: International Seminar Dagstuhl Castle, , Germany, ser. Lecture Notes in Computer Science. Springer; Bassil, S., Keller, R.K., A qualitative and quantitative evaluation of software visualization tools (2001) Proceedings of the Workshop on Software Visualization, pp. 33-37; Koschke, R., Software visualization in software maintenance, reverse engineering, and re-engineering: A research survey (2003) Journal of Software Maintenance and Evolution: Research and Practice, 15 (2), pp. 87-109; Carpendale, S., Ghanam, Y., (2008) A Survey Paper on Software Architecture Visualization, , University of Calgary, Technical Report; Teyseyre, A.R., Campo, M.R., An overview of 3d software visualization (2009) IEEE Transactions on Visualization and Computer Graphics, 15 (1), pp. 87-105; Diehl, S., (2010) Software Visualization: Visualizing the Structure Behaviour, and Evolution of Software, , Springer; Caserta, P., Zendra, O., Visualization of the static aspects of software: A survey (2011) IEEE Transactions on Visualization and Computer Graphics, 17 (7), pp. 913-933; Novais, R.L., Torres, A., Mendes, T.S., Mendonça, M., Zazworka, N., Software evolution visualization: A systematic mapping study (2013) Information and Software Technology, 55 (11), pp. 1860-1883. , http://dx.doi.org/10.1016/j.infsof.2013.05.008, Nov. [Online]; Basit, H.A., Hammad, M., Koschke, R., A survey on goal-oriented visualization of clone data (2015) IEEE Working Conference on Software Visualization, pp. 46-55; Bowman, D.A., Davis, E.T., Hodges, L.F., Badre, A.N., Maintaining spatial orientation during travel in an immersive virtual environment (1999) Presence: Teleoper. Virtual Environ., 8 (6), pp. 618-631. , http://dx.doi.org/10.1162/105474699566521, [Online]; Riecke, B.E., Cunningham, D.W., Bülthoff, H.H., Spatial updating in virtual reality: The sufficiency of visual information (2007) Psychological Research, 71 (3), pp. 298-313. , https://doi.org/10.1007/s00426-006-0085-z, May. [Online]; Regian, J.W., Shebilske, W.L., Monk, J.M., Virtual reality: An instructional medium for visual-spatial tasks (1992) Journal of Communication, 42 (4), pp. 136-149. , http://dx.doi.org/10.1111/j.1460-2466.1992.tb00815.x, [Online]; Sousa Santos, B., Dias, P., Pimentel, A., Baggerman, J.-W., Ferreira, C., Silva, S., Madeira, J., Head-mounted display versus desktop for 3d navigation in virtual reality: A user study (2009) Multimedia Tools and Applications, 41 (1), pp. 161-181. , http://dx.doi.org/10.1007/s11042-008-0223-2, Jan. [Online]; Ruddle, R.A., Payne, S.J., Jones, D.M., Navigating large-scale virtual environments: What differences occur between helmet-mounted and desk-top displays? (1999) Presence: Teleoperators & Virtual Environments, 8 (2), pp. 157-168; Ruddle, R.A., Pruch, P., Effects of proprioceptive feedback and environmental characteristics on spatial learning in virtual environments (2004) International Journal of Human-Computer Studies, 60 (3), pp. 299-326. , http://www.sciencedirect.com/science/article/pii/S1071581903001733, [Online]; Péruch, P., May, M., Wartenberg, F., Homing in virtual environments: Effects of field of view and path layout (1997) Perception, 26 (3), pp. 301-311; Wartenberg, F., May, M., Péruch, P., Spatial orientation in virtual environments: Background considerations and experiments (1998) Spatial Cognition, pp. 469-489. , Springer; Wang, R.F., Between reality and imagination: When is spatial updating automatic? (2004) Perception & Psychophysics, 66 (1), pp. 68-76. , https://doi.org/10.3758/BF03194862, Jan. [Online]; Wettel, R., (2010) Software Systems As Cities, , Ph.D. Thesis, University of Lugano, Switzerland; Mine, M.R., (1995) Virtual Environment Interaction Techniques, , University of North Carolina at Chapel Hill, Chapel Hill, NC, USA, Tech. Rep; Guan, Y., Zheng, M., Real-time 3d pointing gesture recognition for natural hci (2008) 2008 7th World Congress on Intelligent Control and Automation, pp. 2433-2436. , June; Nielsen, M., Störring, M., Moeslund, T.B., Granum, E., A procedure for developing intuitive and ergonomic gesture interfaces for hci (2003) International Gesture Workshop, pp. 409-420. , Springer; McMahan, R.P., Bowman, D.A., Zielinski, D.J., Brady, R.B., Evaluating display fidelity and interaction fidelity in a virtual reality game (2012) IEEE Transactions on Visualization and Computer Graphics, 18 (4), pp. 626-633; Nacke, L.E., Stellmach, S., Sasse, D., Lindley, C.A., (2010) Gameplay Experience in a Gaze Interaction Game, , arXiv preprint; Roy, C.K., Zibran, M.F., Koschke, R., The vision of software clone management: Past, present, and future (keynote paper) (2014) Software Evolution Week-IEEE Conference on Software Maintenance, Reengi-neering, and Reverse Engineering (CSMR-WCRE), pp. 18-33. , Feb; Basit, H.A., Hammad, M., Jarzabek, S., Koschke, R., What do we need to know about clones? Deriving information needs from user goals (2015) International Workshop on Software Clones, pp. 51-57. , IEEE Computer Society Press, Mar; Cronbach, L.J., Meehl, P., Construct validity in psychological tests (1955) Psychological Bulletin, 52 (4), pp. 281-302},
publisher={IEEE Computer Society},
isbn={9781728115191},
language={English},
abbrev_source_title={IEEE Int. Conf. Program Comprehension},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Said2019264,
author={Said, W. and Quante, J. and Koschke, R.},
title={Towards Understandable Guards of Extracted State Machines from Embedded Software},
journal={SANER 2019 - Proceedings of the 2019 IEEE 26th International Conference on Software Analysis, Evolution, and Reengineering},
year={2019},
pages={264-274},
doi={10.1109/SANER.2019.8667983},
art_number={8667983},
note={cited By 2; Conference of 26th IEEE International Conference on Software Analysis, Evolution, and Reengineering, SANER 2019 ; Conference Date: 24 February 2019 Through 27 February 2019;  Conference Code:146154},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064161322&doi=10.1109%2fSANER.2019.8667983&partnerID=40&md5=17a7ebd2ed69a4c272ef2a896888c939},
affiliation={Robert Bosch GmbH, Renningen, Germany; University of Bremen, Bremen, Germany},
abstract={The extraction of state machines from complex software systems can be very useful to understand the behavior of a software, which is a prerequisite for other software activities, such as maintenance, evolution and reengineering. However, using static analysis to extract state machines from real-world embedded software often leads to models that cannot be understood by humans: The extracted models contain a high number of states and transitions and very complex guards (transition conditions). Integrating user interaction into the extraction process can reduce these state machines to an acceptable size. However, the problem of highly complex guards remains. In this paper, we present a novel approach to reduce the complexity of guards in such state machines to a degree that is understandable for humans. The conditions are reduced by a combination of heuristic logic minimization, masking of infeasible paths, and using transition priorities. The approach is evaluated with software developers on industrial embedded C code. The results show that the approach is highly effective in making the guards understandable. Our controlled experiment shows that guards reduced by our approach and presented with priorities are easier to understand than guards without priorities. © 2019 IEEE.},
author_keywords={boolean minimization;  embedded software;  legacy code;  model mining;  program understanding;  software reengineering;  state machines;  static analysis},
keywords={C (programming language);  Embedded software;  Extraction;  Logic Synthesis;  Reengineering, Boolean minimization;  Legacy code;  Program understanding;  Software reengineering;  State machine, Static analysis},
references={Parnas, D.L., Software aging (1994) Proc. of 16th Intl Conf. on Software Engineering (ICSE, pp. 279-287; Fjeldstad, R.K., Hamlen, W.T., Application program maintenance study: Report to our respondents (1984) Proc. GUIDE, 48. , Apr; Ko, A.J., Myers, B.A., Coblenz, M.J., Aung, H.H., An exploratory study of how developers seek, relate, and collect relevant information during software maintenance tasks (2006) IEEE Transactions on Software Engineering, 32 (12), pp. 971-987. , Dec; Minelli, R.M.A., Lanza, M., I know what you did last summer: An investigation of how developers spend their time (2015) Proc. of 23rd Intl Conf. on Program Comprehension, Ser. ICPC 15, pp. 25-35; Lo, D., Khoo, S.-C., Han, J., Liu, C., (2011) Mining Software Specifications Methodologies and Applications, , 1st ed. Boca Raton, FL, USA CRC Press Inc; Roehm, T., Tiarks, R., Koschke, R., Maalej, W., How do professional developers comprehend software? (2012) Proc. of 34th Intl Conf. on Software Engineering, pp. 255-265. , June; Said, W., Quante, J., Koschke, R., On state machine mining from embedded control software (2018) Proc. of 34th Intl Conf. on Software Maintenance and Evolution, pp. 163-172; Said, W., Quante, J., Koschke, R., Towards interactive mining of understandable state machine models from embedded software (2018) Proc. of 6th Intl Conf. on Model-Driven Engineering and Software Development (MODELSWARD), pp. 117-128; Cheng, K.-T., Krishnakumar, A.S., Automatic functional test generation using the extended finite state machine model (1993) Proc. of 30th ACM/IEEE Design Automation Conference, pp. 86-91; Kung, D.C., Suchak, N., Gao, J.Z., Hsia, P., Toyoshima, Y., Chen, C., On object state testing (1994) Proc. of 18th Intl Computer Software and Applications Conference (COMPSAC), pp. 222-227; Sen, T., Mall, R., Extracting finite state representation of Java programs (2016) Software & Systems Modeling, 15 (2), pp. 497-511; Harel, D., Naamad, A., The STATEMATE semantics of statecharts (1996) ACM Transactions on Software Engineering and Methodology (TOSEM), 5 (4), pp. 293-333. , Oct; Coudert, O., Sasao, T., (2002) Two-Level Logic Minimization, pp. 1-27. , Boston MA Springer ch. 2; Rudell, R.L., (1986) Multiple-valued Logic Minimization for PLA Synthesis, , California Univ. Berkeley Electronics Research Lab, Tech. Rep; Bryant, R.E., Graph-based algorithms for boolean function manipulation (1986) IEEE Trans. Comput, 35 (8), pp. 677-691. , Aug; Lind-Nielsen, J., (1999) BuDDy: A Binary Decision Diagram Package, , https://sourceforge.net/projects/buddy/; Walkinshaw, N., Bogdanov, K., Ali, S., Holcombe, M., Automated discovery of state transitions and their functions in source code (2008) Softw. Test. Verif. Reliab, 18 (2), pp. 99-121. , Jun; Corbett, J.C., Dwyer, M.B., Hatcliff, J., Laubach, S., Pasareanu Robby, C.S., Zheng, H., Bandera: Extracting finite-state models from Java source code (2000) Proc. of 22nd Intl Conf. on Software Engineering, pp. 439-448; Cruz-Lemus, J.A., Maes, A., Genero, M., Poels, G., Piattini, M., The impact of structural complexity on the understandability of UML statechart diagrams (2010) Information Sciences, 180 (11), pp. 2209-2220; Zimmerman, M.K., Lundqvist, K., Leveson, N., Investigating the readability of state-based formal requirements specification languages (2002) Proc. of 24th Intl Conf. on Software Engineering, pp. 33-43; Kumar, A., SCHAEM: A method to extract statechart representation of FSMs (2009) Proc. of Intl Advance Computing Conference, pp. 1556-1561; Xie, T., Martin, E., Yuan, H., Automatic extraction of abstract-objectstate machines from unit-Test executions (2006) Proc. of 28th Intl Conf. on Software Engineering, pp. 835-838; Tonella, P., Potrich, A., (2011) Reverse Engineering of Object Oriented Code, , Springer, Publishing Company, Incorporated; Van Den Brand, M., Serebrenik, A., Van Zeeland, D., Extraction of state machines of legacy C code with Cpp2XMI (2008) Proc. of 7th Belgian-Netherlands Software Evolution Workshop, pp. 28-30; Knor, R., Trausmuth, G., Weidl, J., Reengineering C/C++ source code by transforming state machines (1998) Development and Evolution of Software Architectures for Product Families, pp. 97-105. , F. van der Linden, Ed. Berlin, Heidelberg, Springer; Somé, S.S., Lethbridge, T., Enhancing program comprehension with recovered state models (2002) 10th Intl Workshop on Program Comprehension (IWPC), pp. 85-93; Bae, J.H., Chae, H.S., Systematic approach for constructing an understandable state machine from a contract-based specification: Controlled experiments (2016) Software and Systems Modelling, 15 (3), pp. 847-879. , Jul; Snelting, G., Robschink, T., Krinke, J., Efficient path conditions in dependence graphs for software safety analysis (2006) ACM Trans. Softw. Eng. Methodol, 15 (4), pp. 410-457. , Oct; Tarjan, R.E., Testing flow graph reducibility (1974) Journal of Computer and System Sciences, 9 (3), pp. 355-365},
editor={Shihab E., Lo D., Wang X.},
sponsors={IEEE Computer Society},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781728105918},
language={English},
abbrev_source_title={SANER - Proc. IEEE Int. Conf. Softw. Anal., Evol., Reengineering},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Said2019211,
author={Said, W. and Quante, J. and Koschke, R.},
title={Interactive measures for mining understandable state machines from embedded software: Experiments and case studies},
journal={Communications in Computer and Information Science},
year={2019},
volume={991},
pages={211-235},
doi={10.1007/978-3-030-11030-7_10},
note={cited By 1; Conference of 6th International Conference on Model-Driven Engineering and Software Development, MODELSWARD 2018 ; Conference Date: 22 January 2018 Through 24 January 2018;  Conference Code:223509},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061502200&doi=10.1007%2f978-3-030-11030-7_10&partnerID=40&md5=6c853855a8e66d1099de6e65f10c3d92},
affiliation={Robert Bosch GmbH, Corporate Research, Renningen, Germany; University of Bremen, Bremen, Germany},
abstract={State machines are a commonly used formalism for specifying the behavior of a software component, which could also be helpful for program comprehension. Therefore, it is desirable to extract state machine models from code and also from legacy models. The main drawback of fully-automatic state machine mining approaches is that the mined models are too detailed and not understandable. In our previous work [1], we presented different measures for the interaction with the state machine extraction process, such as selecting a subset of state variables, reducing the state variable range and providing additional user constraints. These measures aimed to reduce the complexity of the mined state machines to an understandable degree. In this article, which is an extended version of [1], we evaluate the approach through a case study with twelve professional developers from the automotive supplier company Bosch. The study shows that adding our interactive measures to the model mining process leads to understandable state machines, which can be very helpful in a rich set of use cases in addition to program comprehension, such as debugging, validation and verification. Furthermore, we conduct an experiment to evaluate the required computation time of the interactive measures against the fully-automatic mining. The experiment shows that the interactive approach can drastically reduce the computation time. © 2019, Springer Nature Switzerland AG.},
author_keywords={Model mining;  Program comprehension;  Reverse engineering;  Software analysis;  State machines;  Static analysis;  User interaction},
keywords={Program debugging;  Reverse engineering;  Static analysis, Automotive suppliers;  Experiments and case studies;  Interactive approach;  Program comprehension;  Software analysis;  State machine;  User interaction;  Validation and verification, Software design},
references={Said, W., Quante, J., Koschke, R., Towards interactive mining of understandable state machine models from embedded software (2018) Proceedings of the 6Th International Conference on Model-Driven Engineering and Software Development: MODELSWARD, 1, pp. 117-128; Fjeldstad, R.K., Hamlen, W.T., Application program maintenance study: Report to our respondents (1984) Proceedings of GUIDE, 48; Ko, A.J., Myers, B.A., Coblenz, M.J., Aung, H.H., An exploratory study of how developers seek, relate, and collect relevant information during software maintenance tasks (2006) IEEE Trans. Softw. Eng, 32, pp. 971-987; Minelli, R., Mocci, A., Lanza, M., I know what you did last summer: An investigation of how developers spend their time (2015) Proceedings of 23Rd International Conference on Program Comprehension, pp. 25-35; Roehm, T., Tiarks, R., Koschke, R., Maalej, W., How do professional developers comprehend software? (2012) Proceedings of 34Th ICSE, pp. 255-265; Broy, M., Kirstan, S., Krcmar, H., Schätz, B., Zimmermann, J., What is the benefit of a model-based design of embedded software systems in the car industry? (2013) Software Design and Development: Concepts, Methodologies, Tools, Applications, pp. 310-334; Kung, D.C., Suchak, N., Gao, J.Z., Hsia, P., Toyoshima, Y., Chen, C., On object state testing (1994) Proceedings of 18Th International Computer Software and Applications Conference (COMPSAC), pp. 222-227; Sen, T., Mall, R., Extracting finite state representation of Java programs (2016) Softw. Syst. Model, 15, pp. 497-511; Cheng, K.T., Krishnakumar, A.S., Automatic functional test generation using the extended finite state machine model (1993) Proceedings of 30Th ACM/IEEE Design Automation Conference, pp. 86-91; King, J.C., Symbolic execution and program testing (1976) J. ACM, 19, pp. 385-394; Mathscinetgodefroid, P., Klarlund, N., Sen, K., DART: Directed automated random testing (2005) Proceedings of PLDI, pp. 213-223; Hoffmann, A., Quante, J., Woehrle, M., Experience report: White box test case generation for automotive embedded software (2016) Proceedings of 9Th International Conference on Software Testing, Verification and Validation Workshops, TAIC-PART Workshop, pp. 269-274; Said, W., Quante, J., Koschke, R., On state machine mining from embedded control software (2018) Proceedings of the 34Th International Conference on Software Maintenance and Evolution (ICSME); Quante, J., A program interpreter for arbitrary abstractions (2016) 16Th International Working Conference on Source Code Analysis and Manipulation, pp. 91-96; Nejmeh, B.A., NPATH: A measure of execution path complexity and its applications (1988) Commun. ACM, 31, pp. 188-200; Miranda, D., Genero, M., Piattini, M., Empirical validation of metrics for UML statechart diagrams (2005) Enterprise Information Systems V, pp. 101-108. , https://doi.org/10.1007/1-4020-2673-0_12, Camp, O., Filipe, J.B.L., Hammoudi, S., Piattini, M. (eds.), Springer, Netherlands; Weiser, M., Program slicing (1981) Proceedings of 5Th International Conference on Software Engineering, pp. 439-449; Horwitz, S., Reps, T.W., Binkley, D., Interprocedural slicing using dependence graphs (1988) Proceedings of Conference on Programming Language Design and Implementation, pp. 35-46; Cadar, C., Dunbar, D., Engler, D.R., KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs (2008) 8Th USENIX Symposium on Operating Systems Design and Implementation, pp. 209-224; Ammons, G., Bodík, R., Larus, J.R., Mining specifications (2002) Proceedings of 29Th Symposium on Principles of Programming Languages, pp. 4-16; Whaley, J., Martin, M.C., Lam, M.S., Automatic extraction of object-oriented component interfaces (2002) SIGSOFT Softw. Eng. Notes, 27, pp. 218-228; Lo, D., Khoo, S.C., Liu, C., Efficient mining of iterative patterns for software specification discovery (2007) Proceedings of 13Th International Conference on Knowledge Discovery and Data Mining, pp. 460-469; Shoham, S., Yahav, E., Fink, S.J., Pistoia, M., Static specification mining using automata-based abstractions (2008) IEEE Trans. Softw. Eng, 34, pp. 651-666; Eisenbarth, T., Koschke, R., Vogel, G., Static object trace extraction for programs with pointers (2005) J. Syst. Softw, 77, pp. 263-284; Walkinshaw, N., Bogdanov, K., Ali, S., Holcombe, M., Automated discovery of state transitions and their functions in source code (2008) Softw. Test. Verif. Reliab, 18, pp. 99-121; Walkinshaw, N., Bogdanov, K., Holcombe, M., Salahuddin, S., Reverse engineering state machines by interactive grammar inference (2007) Proceedings of 14Th Working Conference on Reverse Engineering (WCRE), pp. 209-218; Corbett, J.C., Dwyer, M.B., Hatcliff, J., Laubach, S., Pasareanu, C.S., Robby, Zheng, H.: Bandera: Extracting finite-state models from Java source code (2000) Proceedings of 22Nd ICSE, pp. 439-448; Xie, T., Martin, E., Yuan, H., Automatic extraction of abstract-object-state machines from unit-test executions (2006) Proceedings of 28Th ICSE, pp. 835-838; Tonella, P., Potrich, A., (2011) Reverse Engineering of Object Oriented Code, , https://doi.org/10.1007/b102522, Springer, New York; Dallmeier, V., Lindig, C., Wasylkowski, A., Zeller, A., Mining object behavior with ADABU (2006) Proceedings of International Workshop on Dynamic Systems Analysis, pp. 17-24; Van Den Brand, M., Serebrenik, A., Van Zeeland, D., Extraction of state machines of legacy C code with Cpp2XMI (2008) Proceedings of 7Th Belgian-Netherlands Software Evolution Workshop, pp. 28-30; Knor, R., Trausmuth, G., Weidl, J., Reengineering C/C++ source code by transforming state machines (1998) ARES 1998. LNCS, 1429, pp. 97-105. , https://doi.org/10.1007/3-540-68383-6_15, van der Linden, F. (ed.), Springer, Heidelberg; Abadi, M., Feldman, Y.A., Automatic recovery of statecharts from procedural code (2012) International Conference on Automated Software Engineering, pp. 238-241; Somé, S.S., Lethbridge, T., Enhancing program comprehension with recovered state models (2002) 10Th International Workshop on Program Comprehension (IWPC), pp. 85-93; Jiresal, R., Makkapati, H., Naik, R., Statechart extraction from code - an approach using static program analysis and heuristics based abstractions (2011) Proceedings of 2Nd India Workshop on Reverse Engineering},
correspondence_address1={Said, W.; Robert Bosch GmbH, Corporate ResearchGermany; email: wasim.said@de.bosch.com},
editor={Pires L.F., Selic B., Hammoudi S.},
publisher={Springer Verlag},
issn={18650929},
isbn={9783030110291},
language={English},
abbrev_source_title={Commun. Comput. Info. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Rüdel201821,
author={Rüdel, M.-O. and Ganser, J. and Koschke, R.},
title={A Controlled Experiment on Spatial Orientation in VR-Based Software Cities},
journal={Proceedings - 6th IEEE Working Conference on Software Visualization, VISSOFT 2018},
year={2018},
pages={21-31},
doi={10.1109/VISSOFT.2018.00011},
art_number={8530128},
note={cited By 9; Conference of 6th IEEE Working Conference on Software Visualization, VISSOFT 2018 ; Conference Date: 24 September 2018 Through 25 September 2018;  Conference Code:142430},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85058446616&doi=10.1109%2fVISSOFT.2018.00011&partnerID=40&md5=1be734f0b65b57c7a9148925122911bb},
affiliation={University of Bremen, Germany},
abstract={Multiple authors have proposed a city metaphor for visualizing software. While early approaches have used threedimensional rendering on standard two-dimensional displays, recently researchers have started to use head-mounted displays to visualize software cities in immersive virtual reality systems (IVRS). For IVRS of a higher order it is claimed that they offer a higher degree of engagement and immersion as well as more intuitive interaction. On the other hand, spatial orientation may be a challenge in IVRS as already reported by studies on the use of IVRS in domains outside of software engineering such as gaming, education, training, and mechanical engineering or maintenance tasks. This might be even more true for the city metaphor for visualizing software. Software is immaterial and, hence, has no natural appearance. Only a limited number of abstract aspects of software are mapped onto visual representations so that software cities generally lack the details of the real world, such as the rich variety of objects or fine textures, which are often used as clues for orientation in the real world. In this paper, we report on an experiment in which we compare navigation in a particular kind of software city (EvoStreets) in two variants of IVRS. One with head-mounted display and hand controllers versus a 3D desktop visualization on a standard display with keyboard and mouse interaction involving 20 participants. © 2018 IEEE.},
author_keywords={Experiment;  Orientation;  Software City;  Software Engineering;  Virtual Reality;  Visualization},
keywords={Crystal orientation;  Engineering education;  Experiments;  Flow visualization;  Helmet mounted displays;  Mammals;  Software engineering;  Street traffic control;  Virtual reality;  Visualization, Controlled experiment;  Head mounted displays;  Immersive virtual reality;  Intuitive interaction;  Natural appearance;  Spatial orientations;  Two-dimensional displays;  Visual representations, Three dimensional computer graphics},
references={Johnson, B., Shneiderman, B., Tree-maps: A space-filling approach to the visualization of hierarchical information structures (1991) Proceedings of the Conference on Visualization, pp. 284-291. , http://dl.acm.org/citation.cfm?id=949607.949654, IEEE Computer Society Press; Wettel, R., Lanza, M., Visual exploration of large-scale system evolution (2008) Reverse Engineering, 2008. WCRE'08. 15th Working Conference On. IEEE, pp. 219-228; Bladh, T., Carr, D.A., Kljun, M., The effect of animated transitions on user navigation in 3d tree-maps (2005) Information Visualisation, 2005. Proceedings. Ninth International Conference On. IEEE, pp. 297-305; Steinbrückner, F., (2013) Consistent Software Cities: Supporting Comprehension of Evolving Software Systems, , https://opus4.kobv.de/opus4-btu/frontdoor/index/index/docId/1681, Ph. D. dissertation, Brandenburgischen Technischen Universität Cottbus, Cottbus, 06; Sanchez-Vives, M.V., Slater, M., From presence to consciousness through virtual reality (2005) Nature Reviews Neuroscience, 6 (4), pp. 332-339; Merino, L., Fuchs, J., Blumenschein, M., Anslow, C., Ghafari, M., Nierstrasz, O., Behrisch, M., Keim, D.A., On the impact of the medium in the effectiveness of 3d software visualizations (2017) Software Visualization (VISSOFT), 2017 IEEE Working Conference On. IEEE, pp. 11-21; Fittkau, F., Krause, A., Hasselbring, W., Exploring software cities in virtual reality (2015) Software Visualization (VISSOFT), 2015 IEEE 3rd Working Conference On. IEEE, pp. 130-134; Slater, M., Usoh, M., Steed, A., Depth of presence in virtual environments (1994) Presence: Teleoper. Virtual Environ., 3 (2), pp. 130-144. , http://dx.doi.org/10.1162/pres.1994.3.2.130, Jan; Slater, M., Place illusion and plausibility can lead to realistic behaviour in immersive virtual environments (2009) Philosophical Transactions of the Royal Society of London B: Biological Sciences, 364 (1535), pp. 3549-3557. , http://rstb.royalsocietypublishing.org/content/364/1535/3549; Chance, S.S., Gaunet, F., Beall, A.C., Loomis, J.M., Locomotion mode affects the updating of objects encountered during travel: The contribution of vestibular and proprioceptive inputs to path integration (1998) Presence, 7 (2), pp. 168-178; Teyseyre, A.R., Campo, M.R., An overview of 3d software visualization (2009) IEEE Transactions on Visualization and Computer Graphics, 15 (1), pp. 87-105; Holten, D., Hierarchical edge bundles: Visualization of adjacency relations in hierarchical data (2006) IEEE Transactions on Visualization and Computer Graphics, 12 (5), pp. 741-748; Ruddle, R.A., Payne, S.J., Jones, D.M., Navigating largescale virtual environments: What differences occur between helmetmounted and desk-top displays? (1999) Presence: Teleoperators & Virtual Environments, 8 (2), pp. 157-168; Welch, R.B., Blackmon, T., Liu, A., Mellers, B., Stark, L.W., The effects of pictorial realism, delay of visual feedback, and observer interactivity on the subjective sense of presence (1996) Presence: Teleoperators and Virtual Environments, 5, pp. 263-273. , 06; Green, C.S., Pouget, A., Bavelier, D., Improved probabilistic inference as a general learning mechanism with action video games (2010) Current Biology, 20 (17), pp. 1573-1579. , http://dx.doi.org/10.1016/j.cub.2010.07.040, Sep; Reaction Time Differences in Video Game and Non-video Game Players-viewcontent. Cgi, , https://digitalcommons.cwu.edu/cgi/viewcontent.cgi?article=1689&context=source; Kühn, S., Gleich, T., Lorenz, R.C., Lindenberger, U., Gallinat, J., Playing super mario induces structural brain plasticity: Gray matter changes resulting from training with a commercial video game (2013) Molecular Psychiatry, 19, p. 265. , http://dx.doi.org/10.1038/mp.2013.120, EP-, Oct original Article; Appelbaum, L.G., Cain, M.S., Darling, E.F., Mitroff, S.R., Action video game playing is associated with improved visual sensitivity, but not alterations in visual sensory memory (2013) Attention, Perception, & Psychophysics, 75 (6), pp. 1161-1167. , https://doi.org/10.3758/s13414-013-0472-7, Aug; Bejjanki, V.R., Zhang, R., Li, R., Pouget, A., Green, C.S., Lu, Z.-L., Bavelier, D., Action video game play facilitates the development of better perceptual templates (2014) Proceedings of the National Academy of Sciences, , http://www.pnas.org/content/early/2014/11/05/1417056111; Berard, A.V., Cain, M.S., Watanabe, T., Sasaki, Y., Frequent video game players resist perceptual interference (2015) PLOS ONE, 10 (3), pp. 1-10. , https://doi.org/10.1371/journal.pone.0120011, 03; Granic, I., Lobel, A., Engels, R.C., The benefits of playing video games (2014) American Psychologist, 69 (1), p. 66; Eichenbaum, A., Bavelier, D., Green, C.S., Video games: Play that can do serious good (2014) American Journal of Play, 7 (1), pp. 50-72. , https://archive-ouverte.unige.ch/unige:84313, iD: unige:84313; Bowman, D.A., Davis, E.T., Hodges, L.F., Badre, A.N., Maintaining spatial orientation during travel in an immersive virtual environment (1999) Presence: Teleoper. Virtual Environ., 8 (6), pp. 618-631. , http://dx.doi.org/10.1162/105474699566521; Riecke, B.E., Cunningham, D.W., Bülthoff, H.H., Spatial updating in virtual reality: The sufficiency of visual information (2007) Psychological Research, 71 (3), pp. 298-313. , https://doi.org/10.1007/s00426-006-0085-z, May; Regian, J.W., Shebilske, W.L., Monk, J.M., Virtual reality: An instructional medium for visual-spatial tasks (1992) Journal of Communication, 42 (4), pp. 136-149. , http://dx.doi.org/10.1111/j.1460-2466.1992.tb00815.x; Sousa Santos, B., Dias, P., Pimentel, A., Baggerman, J.-W., Ferreira, C., Silva, S., Madeira, J., Head-mounted display versus desktop for 3d navigation in virtual reality: A user study (2009) Multimedia Tools and Applications, 41 (1), pp. 161-181. , http://dx.doi.org/10.1007/s11042-008-0223-2, Jan; Ruddle, R.A., Péruch, P., Effects of proprioceptive feedback and environmental characteristics on spatial learning in virtual environments (2004) International Journal of Human-Computer Studies, 60 (3), pp. 299-326. , http://www.sciencedirect.com/science/article/pii/S1071581903001733; Péruch, P., May, M., Wartenberg, F., Homing in virtual environments: Effects of field of view and path layout (1997) Perception, 26 (3), pp. 301-311; Wartenberg, F., May, M., Péruch, P., Spatial orientation in virtual environments: Background considerations and experiments (1998) Spatial Cognition, pp. 469-489. , Springer; Wang, R.F., Between reality and imagination: When is spatial updating automatic? (2004) Perception & Psychophysics, 66 (1), pp. 68-76. , https://doi.org/10.3758/BF03194862, Jan; Wettel, R., (2010) Software Systems As Cities, , Ph. D. Thesis, University of Lugano, Switzerland; Mine, M.R., (1995) Virtual Environment Interaction Techniques, , University of North Carolina at Chapel Hill, Chapel Hill, NC, USA, Tech. Rep; Guan, Y., Zheng, M., Real-time 3d pointing gesture recognition for natural hci (2008) 2008 7th World Congress on Intelligent Control and Automation, pp. 2433-2436. , June; Nielsen, M., Störring, M., Moeslund, T.B., Granum, E., A procedure for developing intuitive and ergonomic gesture interfaces for hci (2003) International Gesture Workshop, pp. 409-420. , Springer; McMahan, R.P., Bowman, D.A., Zielinski, D.J., Brady, R.B., Evaluating display fidelity and interaction fidelity in a virtual reality game (2012) IEEE Transactions on Visualization and Computer Graphics, 18 (4), pp. 626-633; Nacke, L.E., Stellmach, S., Sasse, D., Lindley, C.A., (2010) Gameplay Experience in A Gaze Interaction Game, , arXiv preprint arXiv:1004. 0259; Knight, C., Munro, M., Virtual but visible software (2000) Information Visualization, 2000. Proceedings. IEEE International Conference On. IEEE, pp. 198-205; Panas, T., Berrigan, R., Grundy, J., A 3d metaphor for software production visualization (2003) Information Visualization, 2003. IV 2003. Proceedings. Seventh International Conference On. IEEE, pp. 314-319; Panas, T., Epperly, T., Quinlan, D., Saebjornsen, A., Vuduc, R., Communicating software architecture using a unified single-view visualization (2007) Engineering Complex Computer Systems, 2007. 12th IEEE International Conference On. IEEE, pp. 217-228; Khaloo, P., Maghoumi, M., Taranta, E., Bettner, D., Laviola, J., Code park: A new 3d code visualization tool (2017) Software Visualization (VISSOFT), 2017 IEEE Working Conference On. IEEE, pp. 43-53; Ogami, K., Kula, R.G., Hata, H., Ishio, T., Matsumoto, K., Using high-rising cities to visualize performance in real-time (2017) Software Visualization (VISSOFT), 2017 IEEE Working Conference On. IEEE, pp. 33-42; Schreiber, A., Brüggemann, M., Interactive visualization of software components with virtual reality headsets (2017) Software Visualization (VISSOFT), 2017 IEEE Working Conference On. IEEE, pp. 119-123; Baum, D., Schilbach, J., Kovacs, P., Eisenecker, U., Müller, R., Getaviz: Generating structural, behavioral, and evolutionary views of software systems for empirical evaluation (2017) Software Visualization (VISSOFT), 2017 IEEE Working Conference On. IEEE, pp. 114-118; (2018) Axivion Bauhaus Suite 08. 05, , http://www.axivion.com/, Axivion GmbH; (2018) Apache Commons 08. 05, , https://commons.apache.org/, Apache Commons Project},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781538682920},
language={English},
abbrev_source_title={Proc. - IEEE Working Conf. Softw. Vis., VISSOFT},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Said2018138,
author={Said, W. and Quante, J. and Koschke, R.},
title={On state machine mining from embedded control software},
journal={Proceedings - 2018 IEEE International Conference on Software Maintenance and Evolution, ICSME 2018},
year={2018},
pages={138-148},
doi={10.1109/ICSME.2018.00024},
art_number={8530024},
note={cited By 4; Conference of 34th IEEE International Conference on Software Maintenance and Evolution, ICSME 2018 ; Conference Date: 23 September 2018 Through 29 September 2018;  Conference Code:142437},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85058343497&doi=10.1109%2fICSME.2018.00024&partnerID=40&md5=de66f330757d287ab4f589bc622d5571},
affiliation={Robert Bosch GmbH, Renningen, Germany; University of Bremen, Bremen, Germany},
abstract={Program understanding is a time-consuming and tedious activity for software developers. Manually building abstractions from source code requires in-depth analysis of the code in the first place. Model mining can support program comprehension by semi-Automatically extracting high-level models from code. One potentially helpful model is a state machine, which is an established formalism for specifying the behavior of a software component. There exist only few approaches for state machine mining, and they either deal with object-oriented systems or expect specific state implementation patterns. Both preconditions are usually not met by real-world embedded control software written in procedural languages. Other approaches extract only API protocols instead of the component's behavior. In this paper, we propose and evaluate several techniques that enable state machine mining from embedded control code: 1) We define criteria for state variables in procedural code based on an empirical study. This enables adaptation of an existing approach for extracting state machines from object-oriented software to embedded control code. 2) We present a refinement of the transition extraction process of that approach by removing infeasible transitions, which on average leads to more than 50% reduction of the number of transitions. 3) We evaluate two approaches to reduce the complexity of transition conditions. 4) An empirical study examines the limits of transition conditions' complexity that can still be understood by humans. These techniques and studies constitute major building blocks towards mining understandable state machines from embedded control software. © 2018 IEEE.},
author_keywords={Boolean minimization;  Embedded software;  legacy code;  Model mining;  Program understanding;  software maintenance;  State machines;  Static analysis},
keywords={Codes (symbols);  Computer software maintenance;  Embedded software;  Static analysis, Boolean minimization;  Embedded control software;  Legacy code;  Object oriented software;  Object-oriented system;  Program understanding;  State machine;  Transition conditions, Object oriented programming},
references={Fjeldstad, R.K., Hamlen, W.T., Application program maintenance study: Report to our respondents (1984) Proc. GUIDE, 48. , Apr; Ko, A.J., Myers, B.A., Coblenz, M.J., Aung, H.H., An exploratory study of how developers seek, relate, and collect relevant information during software maintenance tasks (2006) IEEE Transactions on Software Engineering, 32 (12), pp. 971-987. , Dec; Minelli, R., Lanza, M., I know what you did last summer: An investigation of how developers spend their time (2015) Proc. of 23rd Intl Conf. on Program Comprehension, Ser. ICPC 15, pp. 25-35; Lo, D., Khoo, S.-C., Han, J., Liu, C., (2011) Mining Software Specifications: Methodologies and Applications, , 1st ed. Boca Raton, FL, USA CRC Press, Inc; Roehm, T., Tiarks, R., Koschke, R., Maalej, W., How do professional developers comprehend software (2012) Proc. of 34th Intl Conf. on Software Engineering, pp. 255-265. , June; Schulte-Coerne, V., Thums, A., Quante, J., Challenges in reengineering automotive software (2009) Proc. of 13th European Conf. on Software Maintenance and Reengineering, pp. 315-316. , March; Kung, D.C., Suchak, N., Gao, J.Z., Hsia, P., Toyoshima, Y., Chen, C., On object state testing (1994) Proc. of 18th Intl Computer Software and Applications Conference (COMPSAC), pp. 222-227; Sen, T., Mall, R., Extracting finite state representation of Java programs (2016) Software & Systems Modeling, 15 (2), pp. 497-511; Xie, T., Martin, E., Yuan, H., Automatic extraction of abstract-objectstate machines from unit-Test executions (2006) Proc. of 28th Intl Conf. on Software Engineering, pp. 835-838; Tonella, P., Potrich, A., (2011) Reverse Engineering of Object Oriented Code, , Springer Publishing Company, Incorporated; Somé, S.S., Lethbridge, T., Enhancing program comprehension with recovered state models (2002) 10th Intl Workshop on Program Comprehension (IWPC), pp. 85-93; Van den Brand, M., Serebrenik, A., Van Zeeland, D., Extraction of state machines of legacy C code with Cpp2XMI (2008) Proc. of 7th Belgian-Netherlands Software Evolution Workshop, pp. 28-30; Said, W., Quante, J., Koschke, R., Towards interactive mining of understandable state machine models from embedded software (2018) Proc. of 6th Intl Conf. on Model-Driven Engineering and Software Development (MODELSWARD), pp. 117-128; Cheng, K.-T., Krishnakumar, A.S., Automatic functional test generation using the extended finite state machine model (1993) Proc. of 30th ACM IEEE Design Automation Conference, pp. 86-91; De Moura, L., Bjørner, N., Z3: An efficient SMT solver (2008) Proc. of 14th Intl Conf. on Tools and Algorithms for the Construction and Analysis of Systems (TACAS), pp. 337-340; Nejmeh, B.A., NPATH: A measure of execution path complexity and its applications (1988) Comm. of the ACM, 31 (2), pp. 188-200; Bryant, R.E., Graph-based algorithms for boolean function manipulation (1986) IEEE Trans. Comput, 35 (8), pp. 677-691. , Aug; Coudert, O., Sasao, T., (2002) Two-Level Logic Minimization, pp. 1-27. , Boston, MA Springer ch. 2; Rudell, R.L., Multiple-valued logic minimization for PLA syn thesis (1986) California Univ. Berkeley Electronics Research Lab Tech. Rep; Lind-Nielsen, J., (1999) BuDDy: A Binary Decision Diagram Package, , https://sourceforge.net/projects/buddy/; Ishiura, N., Sawada, H., Yajima, S., Minimization of binary decision diagrams based on exchanges of variables (1991) Intl Conf. on Computer-Aided Design, Digest of Technical Papers, pp. 472-475. , Nov; Rudell, R., Dynamic variable ordering for ordered binary decision diagrams Proceedings of 1993 International Conference on Computer Aided Design (ICCAD), Nov 1993, pp. 42-47; Miller, G.A., The magical number seven, plus or minus two: Some limits on our capacity for processing information (1956) Psychological Review, 63 (2), pp. 81-97; Ammons, G., Bodík, R., Larus, J.R., Mining specifications (2002) Proc. 29th Symp. on Principles of Programming Languages, pp. 4-16; Whaley, J., Martin, M.C., Lam, M.S., Automatic extraction of object-oriented component interfaces (2002) SIGSOFT Softw. Eng. Notes, 27 (4), pp. 218-228. , Jul; Lo, D., Khoo, S.-C., Liu, C., Efficient mining of iterative patterns for software specification discovery (2007) Proc. of 13th Intl Conf. on Knowledge Discovery and Data Mining, pp. 460-469; Eisenbarth, T., Koschke, R., Vogel, G., Static object trace extraction for programs with pointers (2005) Journal of Systems and Software, 77 (3), pp. 263-284; Shoham, S., Yahav, E., Fink, S.J., Pistoia, M., Static specification mining using automata-based abstractions (2008) IEEE Transactions on Software Engineering, 34 (5), pp. 651-666. , Sept; Xiao, H., Sun, J., Liu, Y., Lin, S., Sun, C., Tzuyu: Learning stateful typestates (2013) Proc. of 28th Intl Conf. on Automated Software Engineering, pp. 432-442; Corbett, J.C., Dwyer, M.B., Hatcliff, J., Laubach, S., Pasareanu Robby, C.S., Zheng, H., Bandera: Extracting finite-state models from Java source code (2000) Proc. of 22nd Intl Conf. on Software Engineering, pp. 439-448; Dallmeier, V., Lindig, C., Wasylkowski, A., Zeller, A., Mining object behavior with ADABU (2006) Proc. of Intl Workshop on Dynamic Systems Analysis, pp. 17-24; Knor, R., Trausmuth, G., Weidl, J., Reengineering C/C++ source code by transforming state machines (1998) Development and Evolution of Software Architectures for Product Families, pp. 97-105. , F. van der Linden, Ed. Berlin, Heidelberg Springer; Walkinshaw, N., Bogdanov, K., Ali, S., Holcombe, M., Automated discovery of state transitions and their functions in source code (2008) Softw. Test. Verif. Reliab, 18 (2), pp. 99-121. , Jun; Prywes, N., Rehmet, P., Recovery of software design, state-machines and specifications from source code (1996) Proc. of 2nd Intl Conf. on Engineering of Complex Computer Systems, pp. 279-288; Snelting, G., Robschink, T., Krinke, J., Efficient path conditions in dependence graphs for software safety analysis (2006) ACM Trans. Softw. Eng. Methodol, 15 (4), pp. 410-457. , Oct; Tarjan, R.E., Testing flow graph reducibility (1974) Journal of Computer and System Sciences, 9 (3), pp. 355-365},
sponsors={IEEE Computer Society},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781538678701},
language={English},
abbrev_source_title={Proc. - IEEE Int. Conf. Softw. Maint. Evol., ICSME},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Said2018149,
author={Said, W. and Quante, J. and Koschke, R.},
title={Reflexion models for state machine extraction and verification},
journal={Proceedings - 2018 IEEE International Conference on Software Maintenance and Evolution, ICSME 2018},
year={2018},
pages={149-159},
doi={10.1109/ICSME.2018.00025},
art_number={8530025},
note={cited By 2; Conference of 34th IEEE International Conference on Software Maintenance and Evolution, ICSME 2018 ; Conference Date: 23 September 2018 Through 29 September 2018;  Conference Code:142437},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85058302586&doi=10.1109%2fICSME.2018.00025&partnerID=40&md5=7395dff2d00135b846be371ae381051f},
affiliation={Robert Bosch GmbH, Renningen, Germany; University of Bremen, Bremen, Germany},
abstract={High-level design models are often used for describing the behavior or structure of a software system. It is generally much easier and more adequate to understand a software system on this level than on the level of individual code lines. Such models are also created by developers as they gain an understanding of the software. Unfortunately, these models often do not correspond to what is really in the code. Murphy et al. introduced the idea of reflexion models in 1995 to overcome this problem. Their approach is today widely used for architecture conformance checking and reconstruction. In this paper, we introduce reflexion models for state machines. Our approach allows to check the correspondence of a hypothetical state machine model with the code. It returns information about convergence, partial convergence, divergence, or absence of the specified states and transitions. Similar to the original reflexion model, the approach can be used for conformance checking as well as interactive reverse engineering of state machine models. We concentrate on the latter and show the potential of the approach in several case studies. © 2018 IEEE.},
author_keywords={Model checking;  Program comprehension;  Reflexion model;  Software maintenance;  State machines},
keywords={Codes (symbols);  Computer software;  Computer software maintenance;  Reverse engineering, Case-studies;  Conformance checking;  High-level design;  Program comprehension;  Software systems;  State machine;  State machine models;  States and transitions, Model checking},
references={Parnas, D.L., Software aging (1994) Proc. of 16th Intl Conf. on Software Engineering (ICSE), pp. 279-287; Fjeldstad, R.K., Hamlen, W.T., Application program maintenance study: Report to our respondents (1984) Proc. GUIDE, 48. , Apr; Ko, A.J., Myers, B.A., Coblenz, M.J., Aung, H.H., An exploratory study of how developers seek, relate, and collect relevant information during software maintenance tasks (2006) IEEE Transactions on Software Engineering, 32 (12), pp. 971-987. , Dec; Minelli, R., Mocci, A., Lanza, M., I know what you did last summer: An investigation of how developers spend their time (2015) Proc. of 23rd Intl Conf. on Program Comprehension (ICPC), pp. 25-35; Exton, C., Constructivism and program comprehension strategies (2002) Proc. of 10th Intl Workshop on Program Comprehension (IWPC), pp. 281-284; Harth, E., Dugerdil, P., Program understanding models: An historical overview and a classification (2017) Proc. of 12th Intl Conf. on Software Technologies (ICSOFT), pp. 402-413; Roehm, T., Tiarks, R., Koschke, R., Maalej, W., How do professional developers comprehend software? (2012) Proc. of 34th Intl Conf. on Software Engineering (ICSE), pp. 255-265. , June; Murphy, G.C., Notkin, D., Sullivan, K., Software reflexion models: Bridging the gap between source and high-level models (1995) SIGSOFT Software Engineering Notes, 20 (4), pp. 18-28. , Oct; Koschke, R., Simon, D., Hierarchical reflexion models (2003) Proc. of 10th Working Conf. on Reverse Engineering (WCRE), pp. 36-45; Kroening, D., Tautschnig, M., CBMC-C bounded model checker (2014) Tools and Algorithms for the Construction and Analysis of Systems, pp. 389-391. , E. A brahám and K. Havelund, Eds Springer Berlin Heidelberg; Cheng, K.-T., Krishnakumar, A.S., Automatic functional test generation using the extended finite state machine model (1993) Proc. of 30th ACM IEEE Design Automation Conference, pp. 86-91; Said, W., Quante, J., Koschke, R., On state machine mining from embedded control software (2018) Proc. of the 34th International Conference on Software Maintenance and Evolution (ICSME); Biere, A., Cimatti, A., Clarke, E.M., Zhu, Y., Symbolic model checking without BDDs (1999) Proc. of 5th Intl Conf. on Tools and Algorithms for Construction and Analysis of Systems (TACAS), pp. 193-207; Clarke, E.M., Kroening, D., Yorav, K., Behavioral consistency of C and verilog programs using bounded model checking (2003) Proc. of 40th Design Automation Conference, pp. 368-371; Kung, D.C., Suchak, N., Gao, J.Z., Hsia, P., Toyoshima, Y., Chen, C., On object state testing (1994) Proc. of 18th Intl Computer Software and Applications Conference (COMPSAC), pp. 222-227; Sen, T., Mall, R., Extracting finite state representation of Java programs (2016) Software & Systems Modeling, 15 (2), pp. 497-511; Weiser, M., Program slicing (1981) Proc. of 5th Intl Conf. on Software Engineering (ICSE), pp. 439-449; Said, W., Quante, J., Koschke, R., Towards interactive mining of understandable state machine models from embedded software (2018) Proc. of 6th Intl Conf. on Model-Driven Engineering and Software Development (MODELSWARD), pp. 117-128; Sampath, P., Rajeev, A.C., Ramesh, S., Translation validation for Stateflow to C (2014) Proc. of 51st Annual Design Automation Conference, 1 (6), p. 23; Nejmeh, B.A., NPATH: A measure of execution path complexity and its applications (1988) Communications of the ACM, 31 (2), pp. 188-200; Ammons, G., Bodýk, R., Larus, J.R., Mining specifications (2002) Proc. 29th Symp. on Principles of Programming Languages (PoPL), pp. 4-16; Whaley, J., Martin, M.C., Lam, M.S., Automatic extraction of object-oriented component interfaces (2002) SIGSOFT Software Engineering Notes, 27 (4), pp. 218-228. , Jul; Eisenbarth, T., Koschke, R., Vogel, G., Static object trace extraction for programs with pointers (2005) Journal of Systems and Software, 77 (3), pp. 263-284; Walkinshaw, N., Bogdanov, K., Ali, S., Holcombe, M., Automated discovery of state transitions and their functions in source code (2008) Software Testing, Verifation & Reliability, 18 (2), pp. 99-121. , Jun; Walkinshaw, N., Bogdanov, K., Holcombe, M., Salahuddin, S., Reverse engineering state machines by interactive grammar inference (2007) Proc. of 14th Working Conf. on Reverse Engineering (WCRE), pp. 209-218; Corbett, J.C., Dwyer, M.B., Hatcliff, J., Laubach, S., Pasareanu Robby, C.S., Zheng, H., Bandera: Extracting finite-state models from Java source code (2000) Proc. of 22nd Intl Conf. on Software Engineering (ICSE), pp. 439-448; Xie, T., Martin, E., Yuan, H., Automatic extraction of abstract-objectstate machines from unit-Test executions (2006) Proc. 28th Intl Conf. on Software Engineering (ICSE), pp. 835-838; Tonella, P., Potrich, A., (2011) Reverse Engineering of Object Oriented Code Springer Publishing Company Inc; Ali, N., Baker, S., O'Crowley, R., Herold, S., Buckley, J., Architecture consistency: State of the practice, challenges and requirements (2018) Empirical Software Engineering, 23 (1), pp. 224-258. , Feb; Christl, A., Koschke, R., Storey, M.-A.D., Equipping the reflexion method with automated clustering (2005) 12th Working Conf. on Reverse Engineering (WCRE), pp. 10-98; Clarke, E.M., Kroening, D., Lerda, F., A tool for checking ANSI-C programs (2004) Proc. of 10th Intl Conf. on Tools and Algorithms for the Construction and Analysis of Systems (TACAS), pp. 168-176},
sponsors={IEEE Computer Society},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781538678701},
language={English},
abbrev_source_title={Proc. - IEEE Int. Conf. Softw. Maint. Evol., ICSME},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koschke2018165,
author={Koschke, R. and Schmidt, U.-B. and Berger, B.},
title={Built-in clone detection in meta languages},
journal={Proceedings - 18th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2018},
year={2018},
pages={165-170},
doi={10.1109/SCAM.2018.00026},
art_number={8530730},
note={cited By 1; Conference of 18th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2018 ; Conference Date: 23 September 2018 Through 24 September 2018;  Conference Code:142454},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85058271149&doi=10.1109%2fSCAM.2018.00026&partnerID=40&md5=870f0d6b1def8f6a18db116f27e8a32c},
affiliation={University of Bremen, Germany},
abstract={Developers often practice re-use by copying and pasting code. Copied and pasted code is also known as clones. Clones may be found in all programming languages. Automated clone detection may help to detect clones in order to support software maintenance and language design. Syntax-based clone detectors find similar syntax subtrees and, hence, are guaranteed to yield only syntactic clones. They are also known to have high precision and good recall. Developing a syntax-based clone detector for each language from scratch may be an expensive task. In this paper, we explore the idea to integrate syntax-based clone detection into workbenches for language engineering. Such workbenches allow developers to create their own domain-specific language or to create parsers for existing languages. With the integration of clone detection into these workbenches, a clone detector comes as a free byproduct of the grammar specification. The effort is spent only once for the workbench and not multiple times for every language built with the workbench. We report our lessons learned in applying this idea for three language workbenches: The popular parser generator ANTLR and two language workbenches for domain-specific languages, namely, MPS, developed by JetBrains, and Xtext, which is based on the Eclipse Modeling Framework. © 2018 IEEE.},
author_keywords={Antlr;  Duplicated code;  Language workbenchs;  Meta languages;  Mps;  Software clones;  Xtext},
keywords={Cloning;  Codes (symbols);  Modeling languages;  Problem oriented languages;  Syntactics, Antlr;  Duplicated code;  Language workbenchs;  Meta language;  Software clones;  Xtext, Computational linguistics},
references={Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) IEEE Computer Society Transactions on Software Engineering, 33 (9), pp. 577-591. , Sep; Falke, R., Koschke, R., Frenzel, P., Empirical evaluation of clone detection using syntax suffix trees (2008) Empirical Software Engineering, 13 (6), pp. 601-643; Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., Clone detection using abstract syntax trees (1998) International Conference on Software Maintenance, pp. 368-378; Jiang, L., Misherghi, G., Su, Z., Glondu, S., DECKARD: Scalable and accurate tree-based detection of code clones (2007) International Conference on Software Engineering, pp. 96-105; Schmidt, U.-B., (2017) Integration of Generic Clone Detection in Meta Languages, , Master Thesis, Department for Mathematics and Computer Science, University of Bremen, Germany},
sponsors={IEEE Computer Society; IEEE Technical Council on Software Engineering (TCSE)},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781538682906},
language={English},
abbrev_source_title={Proc. - IEEE Int. Working Conf. Source Code Anal. Manip., SCAM},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koschke2018,
author={Koschke, R.},
title={Industrial experience on code clean-up using architectural conformance checking},
journal={ACM International Conference Proceeding Series},
year={2018},
doi={10.1145/3241403.3241453},
art_number={a48},
note={cited By 0; Conference of 12th European Conference on Software Architecture, ECSA 2018 ; Conference Date: 24 September 2018 Through 28 September 2018;  Conference Code:140216},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055676148&doi=10.1145%2f3241403.3241453&partnerID=40&md5=3a5ed2751f60658b06e0caa0afba8b1d},
affiliation={University of Bremen, Germany},
abstract={This paper reports experiences in using the reflexion method to reverse engineer the architecture of an industrial Java application and to specify the target architecture for an architectural refactoring in order to steer the refactoring of the code and to measure progress. The goal in this industrial case study was to clean up obsolete code after a larger migration and to provide an architectural documentation for new developers. The distinctiveness of this study is that it was conducted by the author who is both an academic researcher on architecture erosion and conformance as well as a professional developer who is also among the two original developers of the Java program that was refactored. We will report the amount of time required and the effects of the migration in terms of various quality metrics. We will also discuss the level of support the method offered for this refactoring. © 2018 Copyright held by the owner/author(s).},
author_keywords={Industrial Experience Report;  Software Architecture Conformance Checking;  Software Erosion},
keywords={Codes (symbols);  Computer software;  Erosion;  Software architecture, Architecture erosion;  Conformance checking;  Industrial case study;  Industrial experience;  Java applications;  Java program;  Quality metrics;  Target architectures, Java programming language},
references={Buckley, J., LeGear, A., Exton, C., Cadogan, R., Johnston, T., Looby, B., Koschke, R., Encapsulating targeted component abstractions using software reflexion modelling (2008) Journal on Software Maintenance and Evolution, 20 (2), pp. 107-134. , March-April 2008; Caracciolo, A., Lungu, M., Truffer, O., Levitin, K., Nierstrasz, O., Evaluating an architecture conformance monitoring solution (2016) International Workshop on Empirical Software Engineering in Practice., pp. 41-44; Christl, A., Koschke, R., Storey, M., Equipping the reflexion method with automated clustering (2005) Working Conference on Reverse Engineering., pp. 89-98. , IEEE Computer Society Press; Christl, A., Koschke, R., Storey, M., Automated clustering to support the reflexion method (2007) Journal of Systems and Software, 49 (3), pp. 255-274. , 2007; Ebert, J., Kullbach, B., Riediger, V., Winter, A., Gupro - Generic understanding of programs: An overview (2002) Electronic Notes in Theoretical Computer Science, 72 (2), pp. 47-56. , 2002); Eichberg, M., Kloppenburg, S., Klose, K., Mezini, M., Defining and continuous checking of structural program dependencies (2008) International Conference on Software Engineering., pp. 391-400. , ACM; Feijs, L., Krikhaar, R., Van Ommering, R., A relational approach to support software architecture analysis (1998) Software - Practice and Experience, 28 (4), pp. 371-400. , Wiley 1998); Yanbing Guo, G., Atlee, J.M., Kazman, R., A software architecture reconstruction method (1999) WICSA1: Proceedings of the TC2 First Working IFIP Conference on Software Architecture (WICSA1), pp. 15-34. , Kluwer, B.V; Gurgel, A., MacIa, I., Garcia, A., Von Staa, A., Mezini, M., Eichberg, M., Mitschke, R., Blending and reusing rules for architectural degradation prevention (2014) Proceedings of the 13th International Conference on Modularity., pp. 61-72. , ACM; Hofmeister, C., Nord, R., Soni, D., (2000) Applied Software Architecture., , Addison Wesley; Mller, H.A., Kienle, H.M., Rigi - An environment for software reverse engineering, exploration, visualization, and redocumentation (2010) Journal of Science of Computer Programming, 75 (4), pp. 247-263. , 2010); Holt, R.C., Structural manipulation of software architecture using tarski relational algebra (1998) Working Conference on Reverse Engineering, pp. 210-219. , Michael Blaha and Chris Verhoef (Eds.); Hou, D., James Hoover, H., Using scl to specify and check design intent in source code (2006) IEEE Transactions on Software Engineering, 32 (6), pp. 404-423. , June 2006); Knodel, J., (2011) Sustainable Structures in Software Implementations by Live Compliance Checking, , http://d-nb.info/1011086662, Ph.D. Dissertation. University of Kaiserslautern; Knodel, J., Muthig, D., Naab, M., Lindvall, M., Static evaluation of software architectures (2006) Conference on Software Maintenance and Reengineering., pp. 279-294; Knodel, J., Muthig, D., Rost, D., Constructive architecture compliance checking - An experiment on support by live feedback (2008) International Conference on Software Maintenance., pp. 287-296; Knodel, J., Popescu, D., A comparison of static architecture compliance checking approaches (2007) Working Conference on Software Architecture., pp. 12-22; Koschke, R., (2009) International Summer Schools on Software Engineering, ISSSE 2006-2008, pp. 140-173. , Springer Verlag, Chapter Architecture Reconstruction; Koschke, R., Incremental reflexion analysis (2010) Conference on Software Maintenance and Reengineering., pp. 1-10; Koschke, R., Incremental reflexion analysis (2013) Journal of Software: Evolution and Process, 25 (6), pp. 601-638. , 2013); Koschke, R., Frenzel, P., Breu, A.P.J., Angstmann, K., Extending the reflexion method for consolidating software variants into product lines (2009) Software Quality Journal, 17 (4), pp. 331-366. , Dec. 2009); Koschke, R., Simon, D., Hierarchical reflexion models (2003) Working Conference on Reverse Engineering., pp. 36-45; Kruchten, P., The 4+1 view model of architecture (1995) IEEE Software, 12 (6), pp. 42-50. , Nov. 1995); Lozano, A., Mens, K., Kellens, A., Usage contracts: Offering immediate feedback on violations of structural source-code regularities (2015) Journal of Science of Computer Programming, 105, pp. 73-91. , 2015); Mens, K., (2000) Automating Architectural Conformance Checking by Means of Logic Meta Programming., , PhD thesis. Departement Informatica, Vrije Universiteit Brussel; Murphy, G.C., Notkin, D., Reengineering with reflexion models: A case study (1997) IEEE Computer, 30 (8), pp. 29-36. , Aug. 1997); Murphy, G.C., Notkin, D., Sullivan, K.J., Software reflexion models: Bridging the gap between design and implementation (2001) IEEE Transactions on Software Engineering, 27 (4), pp. 364-380. , April 2001); Pollet, D., Ducasse, S., Poyet, L., Alloui, I., Cîmpan, S., Verjus, H., Towards a process- oriented software architecture reconstruction taxonomy (2007) Conference on Software Maintenance and Reengineering., pp. 137-148; Postma, A., A method for module architecture verification and its application on a large component-based system (2003) Information and Software Technology, 45, pp. 171-194. , 2003); Riva, C., Architecture reconstruction in practice (2002) Working Conference on Software Architecture., pp. 159-173; Rosik, J., Le Gear, A., Buckley, J., Ali Babar, M., An industrial case study of architecture conformance (2008) International Symposium on Empirical Software Engineering and Measurement., pp. 80-89. , ACM; Terra, R., Tulio Valente, M., A dependency constraint language to manage object-oriented software architectures (2009) Software - Practice and Experience, 39 (12), pp. 1073-1094. , Wiley Aug. 2009); Yin, R.K., (2018) Case Study Research and Applications: Design and Methods, , (fifth edition ed.). Sage Publications Ltd},
correspondence_address1={Koschke, R.; University of BremenGermany; email: koschke@uni-bremen.de},
sponsors={IoTSec; SENDATE-PLANETS},
publisher={Association for Computing Machinery},
isbn={9781450364836},
language={English},
abbrev_source_title={ACM Int. Conf. Proc. Ser.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koschke201816,
author={Koschke, R. and Weinig, M.},
title={Generated code in studies on clone rates},
journal={2018 IEEE 12th International Workshop on Software Clones, IWSC 2018 - Proceedings},
year={2018},
volume={2018-January},
pages={16-22},
doi={10.1109/IWSC.2018.8327314},
note={cited By 0; Conference of 12th IEEE International Workshop on Software Clones, IWSC 2018 ; Conference Date: 20 March 2018;  Conference Code:135600},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049697660&doi=10.1109%2fIWSC.2018.8327314&partnerID=40&md5=a62363eebd4f3c0c281ae79b13487279},
affiliation={Software Engineering Group, Department of Mathematics and Computer Science, University of Bremen, Germany},
abstract={Various earlier studies have measured clone rates for diverse projects. One of the reasons for exceptionally high clone rates for individual source files was found to be auto-generated code. Automatically generated code is generally not maintained and, hence, should be excluded from clone-rate measurements. This kind of code might even introduce a bias to clone rates of projects when there is a large amount of generated code and clone rates for generated files generally deviate from the average clone rate for handwritten code. While some generated files stuck out with clone rates above the average in earlier studies, we do not know whether this is generally the case and how much code is actually generated automatically. This paper investigates the amount of generated files in projects, whether clone rates for generated files really differ from handwritten code, and - overall - whether generated code in fact introduces a bias to clone rates. We heuristically detect generated files in a very large open-source project corpus of programs written in C, C++, C#, or Java and report the number of projects with generated code. For these projects, we compare clone rates of generated and handwritten files. Our results show higher clone rates for generated files. Moreover, when we aggregate clone rates from files to projects, the clone rates of projects with at least one generated file are also slightly higher than in projects for which no generated files were detected. Our results suggest that researchers should indeed take special care to exclude generated code in studies on clone rates. © 2018 IEEE.},
keywords={C++ (programming language);  Codes (symbols);  Open source software;  Open systems, Automatically generated;  Large amounts;  Open source projects;  Rate measurements;  Source files, Cloning},
references={Baker, B.S., On finding duplication and near-duplication in large software systems (1995) Working Conference on Reverse Engineering, pp. 86-95. , IEEE Computer Society Press, Jul; Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., Clone detection using abstract syntax trees (1998) International Conference on Software Maintenance, pp. 368-378. , IEEE Computer Society Press; Ducasse, S., Rieger, M., Demeyer, S., A language independent approach for detecting duplicated code (1999) International Conference on Software Maintenance, pp. 109-118; Uchida, S., Monden, A., Ohsugi, N., Kamiya, T., Matsumoto, K.-I., Kudo, H., Software analysis by code clones in open source software (2005) Journal of Computer Information Systems, 45 (3), pp. 1-11. , http://www.tandfonline.com/doi/abs/10.1080/08874417.2005.11645838, [Online]; Roy, C.K., Cordy, J.R., Near-miss function clones in open source software: An empirical study (2010) Journal on Software Maintenance, 22 (3), pp. 165-189; Roy, C., Cordy, J., Are scripting languages really different? (2010) International Workshop on Software Clones, pp. 17-24. , May; Gabel, M., Su, Z., A study of the uniqueness of source code (2010) Proceedings of the 18th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 147-156. , ACM; Hindle, A., Barr, E.T., Su, Z., Gabel, M., Devanbu, P., On the naturalness of software (2012) Proceedings of the 34th International Conference on Software Engineering, pp. 837-847. , IEEE Press; Bazrafshan, S., Evolution of near-miss clones (2012) Conference on Source Code Analysis and Manipulation, pp. 74-83. , IEEE Computer Society Press; Chen, Y., Keivanloo, I., Roy, C.K., Near-miss software clones in open source games: An empirical study (2014) CCECE'14, pp. 1-7; Nguyen, A.T., Nguyen, H.A., Nguyen, T.N., A large-scale study on repetitiveness, containment, and composability of routines in opensource projects (2016) Proceedings of the 13th International Conference on Mining Software Repositories, pp. 362-373. , ACM; Koschke, R., Bazrafshan, S., Software-clone rates in open-source programs written in C or C++ (2016) International Workshop on Software Clones; Published in Proceedings of Software Analysis, Evolution, and Reengineering (SANER), 3, pp. 1-7. , IEEE Computer Society Press; Göde, N., Koschke, R., Frequency and risks of changes to clones (2011) International Conference on Software Engineering, pp. 311-320. , ACM Press; Shimonaka, K., Sumi, S., Higo, Y., Kusumoto, S., Identifying autogenerated code by using machine learning techniques (2016) International Workshop on Empirical Software Engineering in Practice, , IEEE Computer Society Press},
sponsors={},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781538664308},
language={English},
abbrev_source_title={IEEE Int. Workshop Softw. Clones, IWSC - Proc.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Käfer20182,
author={Käfer, V. and Wagner, S. and Koschke, R.},
title={Are there functionally similar code clones in practice?},
journal={2018 IEEE 12th International Workshop on Software Clones, IWSC 2018 - Proceedings},
year={2018},
volume={2018-January},
pages={2-8},
doi={10.1109/IWSC.2018.8327312},
note={cited By 5; Conference of 12th IEEE International Workshop on Software Clones, IWSC 2018 ; Conference Date: 20 March 2018;  Conference Code:135600},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049664194&doi=10.1109%2fIWSC.2018.8327312&partnerID=40&md5=0f581a6abf4c0812ee495abc331d1aad},
affiliation={University of Stuttgart, Germany; University of Bremen, Germany},
abstract={Having similar code fragments, also called clones, in software systems can lead to unnecessary comprehension, review and change efforts. Syntactically similar clones can often be encountered in practice. The same is not clear for only functionally similar clones (FSC). We conducted an exploratory survey among developers to investigate whether they encounter functionally similar clones in practice and whether there is a difference in their inclination to remove them to syntactically similar clones. Of the 34 developers answering the survey, 31 have experienced FSC in their professional work, and 24 have experienced problems caused by FSCs. We found no difference in the inclination and reasoning for removing FSCs and syntactically similar clones. FSCs exist in practice and should be investigated to bring clone detectors to the same quality as for syntactically similar clones, because being able to detect them allows developers to manage and potentially remove them. © 2018 IEEE.},
author_keywords={code clones;  survey},
keywords={Codes (symbols);  Solar concentrators;  Surveying;  Surveys, Change efforts;  Code clone;  Code fragments;  Exploratory surveys;  Software systems, Cloning},
references={Juergens, E., Deissenboeck, F., Hummel, B., Wagner, S., Do code clones matter? (2009) Proc. 31st International Conference on Software Engineering (ICSE'09), pp. 485-495. , IEEE Computer Society; Juergens, E., Deissenboeck, F., Hummel, B., Code similarities beyond copy & paste (2010) Proc. 14th European Conference on Software Maintenance and Reengineering (CSMR'10), pp. 78-87. , IEEE; Wagner, S., Abdulkhaleq, A., Bogicevic, I., Ostberg, J.-P., Ramadani, J., How are functionally similar code clones syntactically different? An empirical study and a benchmark (2016) Peer J Computer Science, 2 (E49); Krinke, J., Identifying similar code with program dependence graphs (2001) Proc. Eighth Working Conference on Reverse Engineering (WCRE'01), pp. 301-309. , IEEE; Komondoor, R., Horwitz, S., Using slicing to identify duplication in source code (2001) Proc. 8th International Symposium on Static Analysis (SAS'01), pp. 40-56. , Springer; Gabel, M., Jiang, L., Su, Z., Scalable detection of semantic clones (2008) Proc. 30th International Conference on Software Engineering (ICSE'08), pp. 321-330. , ACM; Krutz, D.E., Shihab, E., CCCD: Concolic code clone detection (2013) Proc. 20th Working Conference on Reverse Engineering (WCRE'13), pp. 489-490. , IEEE; Marcus, A., Maletic, J.I., Identification of high-level concept clones in source code (2001) Proc. 16th Annual International Conference on Automated Software Engineering (ASE 2001), pp. 107-114. , IEEE; Kim, H., Jung, Y., Kim, S., Yi, K., MeCC: Memory comparison-based clone detector (2011) Proc. 33rd International Conference on Software Engineering (ICSE'11), pp. 301-310. , ACM; Jiang, L., Su, Z., Automatic mining of functionally equivalent code fragments via random testing (2009) Proc. Eighteenth International Symposium on Software Testing and Analysis (ISSTA'09), pp. 81-92. , ACM; Deissenboeck, F., Heinemann, L., Hummel, B., Wagner, S., Challenges of the dynamic detection of functionally similar code fragments (2012) Proc. 16th European Conference on Software Maintenance and Reengineering (CSMR 2012), pp. 299-308. , IEEE; Su, F.-H., Bell, J., Kaiser, G., Sethumadhavan, S., Identifying functionally similar code in complex codebases (2016) Proc. 24th International Conference on Program Comprehension (ICPC), , IEEE; Suzuki, M., Paula A C, D., Guerra, E., Lopes, C.V., Lemos, O.A.L., An exploratory study of functional redundancy in code repositories (2017) 2017 IEEE 17th International Working Conference on Source Code Analysis and Manipulation (SCAM), pp. 31-40. , Sept; Käfer, V., Wagner, S., Koschke, R., (2018) Questionnaire, R Scripts and Response Data Set of the Survey on Functionally Similar Code Clones},
sponsors={},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781538664308},
language={English},
abbrev_source_title={IEEE Int. Workshop Softw. Clones, IWSC - Proc.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Said2018117,
author={Said, W. and Quante, J. and Koschke, R.},
title={Towards interactive mining of understandable state machine models from embedded software},
journal={MODELSWARD 2018 - Proceedings of the 6th International Conference on Model-Driven Engineering and Software Development},
year={2018},
volume={2018-January},
pages={117-128},
doi={10.5220/0006593501170128},
note={cited By 8; Conference of 6th International Conference on Model-Driven Engineering and Software Development, MODELSWARD 2018 ; Conference Date: 22 January 2018 Through 24 January 2018;  Conference Code:134803},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049694369&doi=10.5220%2f0006593501170128&partnerID=40&md5=4b3c4874aa7189041bd2c7df23edf14e},
affiliation={Robert Bosch GmbH, Corporate Research, Renningen, Germany; University of Bremen, Germany},
abstract={State machines are an established formalism for specifying the behavior of a software component. Unfortunately, such design models often do not exist at all, especially for legacy code, or they are lost or not kept up to date during software evolution – although they would be very helpful for program comprehension. Therefore, it is desirable to extract state machine models from code and also from legacy models. The few existing approaches for that – when applied to real-world systems written in C – deliver models that are too complex for being comprehensible to humans. This is mainly because C functions are typically much longer than object oriented methods, for which these approaches were originally intended. In this paper, we propose and investigate different measures to reduce the complexity of such mined models to an understandable degree. Since the code alone does not contain all required information for abstraction, user interaction is essential. Also, different users will be interested in different aspects of the code. Therefore, we introduce several possibilities for influencing the state machine extraction process, such as providing additional constraints for reducing the state space. We show the effectiveness of these interactions in several case studies. The combination of these interactions gives the user a rich set of possibilities for exploring the functionality of the software. Copyright © 2018 by SCITEPRESS – Science and Technology Publications, Lda. All rights reserved.},
author_keywords={Model Mining;  Model-driven Engineering;  Program Comprehension;  Reverse Engineering;  Software Analysis},
keywords={Codes (symbols);  Object oriented programming;  Software design, Extraction process;  Interactive mining;  Object oriented method;  Program comprehension;  Real-world system;  Software component;  Software Evolution;  State machine models, C (programming language)},
references={Abadi, M., Feldman, Y.A., Automatic recovery of statecharts from procedural code (2012) Int’L Conf. on Automated Software Engineering, pp. 238-241; Ammons, G., Bodík, R., Larus, J.R., Mining specifications (2002) Proc. 29th Symp. on Principles of Programming Languages, pp. 4-16; Broy, M., Kirstan, S., Krcmar, H., Schätz, B., Zimmer-Mann, J., What is the benefit of a model-based design of embedded software systems in the car industry? (2013) Software Design and Development: Concepts, Methodologies, Tools, Applications, pp. 310-334; Corbett, J.C., Dwyer, M.B., Hatcliff, J., Laubach, S., Pasareanu, C.S., Robby, Zheng, H., Bandera: Extracting finite-state models from Java source code (2000) Proc. of 22nd ICSE, pp. 439-448; Eisenbarth, T., Koschke, R., Vogel, G., Static object trace extraction for programs with pointers (2005) Journal of Systems and Software, 77 (3), pp. 263-284; Fjeldstad, R.K., Hamlen, W.T., Application program maintenance study: Report to our respondents (1984) Proc. GUIDE, 48; Godefroid, P., Klarlund, N., Sen, K., DART: Directed automated random testing (2005) Proc. of PLDI, pp. 213-223; Hoffmann, A., Quante, J., Woehrle, M., Experience report: White box test case generation for automotive embedded software (2016) Proc. of 9th Int’L Conf. on Software Testing, Verification and Validation Workshops, TAIC-PART Workshop, pp. 269-274; Jiresal, R., Makkapati, H., Naik, R., Statechart extraction from code – An approach using static program analysis and heuristics based abstractions (2011) Proc. of 2nd India Workshop on Reverse Engineering; King, J.C., Symbolic execution and program testing (1976) Journal of The ACM, 19 (7), pp. 385-394; Kung, D.C., Suchak, N., Gao, J.Z., Hsia, P., Toyoshima, Y., Chen, C., On object state testing (1994) Proc. of 18th Int’L Computer Software and Applications Conference (COMPSAC), pp. 222-227; Miranda, D., Genero, M., Piattini, M., Empirical validation of metrics for UML statechart diagrams (2005) Enterprise Information Systems V, pp. 101-108. , Camp, O., Filipe, J. B. L., Hammoudi, S., and Piattini, M., editors, Springer Netherlands; Nejmeh, B.A., NPATH: A measure of execution path complexity and its applications (1988) Communications of The ACM, 31 (2), pp. 188-200; Prywes, N., Rehmet, P., Recovery of software design, state-machines and specifications from source code (1996) Proc. of 2nd Int’L Conf. on Engineering of Complex Computer Systems, pp. 279-288; Quante, J., A program interpreter for arbitrary abstractions (2016) 16th Int’L Working Conference on Source Code Analysis and Manipulation, pp. 91-96; Roehm, T., Tiarks, R., Koschke, R., Maalej, W., How do professional developers comprehend software? (2012) Proc. of 34th ICSE, pp. 255-265; Sen, T., Mall, R., Extracting finite state representation of Java programs (2016) Software & Systems Modeling, 15 (2), pp. 497-511; Somé, S.S., Lethbridge, T., Enhancing program comprehension with recovered state models (2002) 10th Int’L Workshop on Program Comprehension (IWPC), pp. 85-93; Walkinshaw, N., Bogdanov, K., Ali, S., Holcombe, M., Automated discovery of state transitions and their functions in source code (2008) Softw. Test. Verif. Re-Liab., 18 (2), pp. 99-121; Walkinshaw, N., Hall, M., Inferring computational state machine models from program executions (2016) Proc. of Int’L Conf. on Software Maintenance and Evolution (ICSME), pp. 122-132; Wang, S., Dwarakanathan, S., Sokolsky, O., Lee, I., High-level model extraction via symbolic execution (2012) Technical Report, , Univ. Pennsylvania, Dept. of Computer and Information Science. MS-CIS-12-04; Weiser, M., Program slicing (1981) Proc. of 5th Int’L Conf. on Software Engineering, pp. 439-449; Xie, T., Martin, E., Yuan, H., Automatic extraction of abstract-object-state machines from unit-test executions (2006) Proc. 28th ICSE, pp. 835-838},
editor={Hammoudi S., Pires L.F., Selic B.},
sponsors={Institute for Systems and Technologies of Information, Control and Communication (INSTICC)},
publisher={SciTePress},
isbn={9789897582837},
language={English},
abbrev_source_title={MODELSWARD - Proc. Int. Conf. Model-Driven Eng. Softw. Dev.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Göde2016879,
author={Göde, N. and Higo, Y. and Koschke, R.},
title={Special section on software clones},
journal={Software Quality Journal},
year={2016},
volume={24},
number={4},
pages={879-881},
doi={10.1007/s11219-016-9349-z},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84995538946&doi=10.1007%2fs11219-016-9349-z&partnerID=40&md5=ee45923a1fdb6ae20f1263beff85abde},
affiliation={CQSE GmbH, Garching, Germany; Osaka University, Suita, Japan; University of Bremen, Bremen, Germany},
correspondence_address1={Göde, N.; CQSE GmbHGermany; email: goede@cqse.eu},
publisher={Springer New York LLC},
issn={09639314},
language={English},
abbrev_source_title={Softw. Qual. J.},
document_type={Editorial},
source={Scopus},
}

@CONFERENCE{Koschke20161,
author={Koschke, R. and Bazrafshan, S.},
title={Software-clone rates in open-source programs written in C or C++},
journal={2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering, SANER 2016},
year={2016},
pages={1-7},
doi={10.1109/SANER.2016.28},
art_number={7476786},
note={cited By 14; Conference of 10th International Workshop on Software Clones, IWSC 2016 ; Conference Date: 15 March 2016;  Conference Code:121780},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84978133119&doi=10.1109%2fSANER.2016.28&partnerID=40&md5=ad6ef16c470160ef10bcddd3b301f37a},
affiliation={University of Bremen, Germany},
abstract={It is often claimed that duplicated code, also known as softwareclones, occurs frequently. Different researchers have reported clonerates in the range of 19 and 28%, in extreme cases even 59% forparticular systems. It is not clear, however, whether those systemsare just outliers. In this paper, we analyze about 7,800 open-source projects written inC or C++, summing up to 240 MSLOC, and measure their clone rates. Weuse statistical analysis to estimate the means of clone rates in open-source projects. Based on our findings, we could not confirm the high clone ratesreported in previous studies as expected averages. Except for smallprojects including a few copied and modified files, we found ratherlow clone rates compared to previous studies. For instance, if aminimal clone length of 100 tokens (roughly 16 LOC) is requested, wefound an average rate of duplicated type-2 clones of about 12%. Fortype-1 clones of this length, we found an average clone rate of only1%.However, our results show also that cloning is common. We identifiedonly 20% of the projects to have no type-2 clone of at least 100tokens. And 44% of the projects have at least one type-1 clone of atleast 100 tokens. © 2016 IEEE.},
author_keywords={clone rate;  code duplication;  redundancy;  software clones;  statistics},
keywords={Cloning;  Computer software;  Open source software;  Open systems;  Redundancy;  Statistics, Average rate;  Code duplication;  Open source projects;  Software clones, C++ (programming language)},
references={Baker, B.S., On finding duplication and near-duplication in large software systems (1995) WCRE, pp. 86-95; http://www.softwareclones.org/research-data.php; Baxter, I.D., Yahin, A., Moura, L., Sant'anna, M., Bier, L., Clone detection using abstract syntax trees (1998) ICSM, pp. 368-378; Ducasse, S., Rieger, M., Demeyer, S., A language independent approach for detecting duplicated code (1999) ICSM, pp. 109-118; Roy, C., Cordy, J., Are scripting languages really different? (2010) IWSC, pp. 17-24. , May; Koschke, R., Survey of research on software clones (2006) Duplication, Redundancy, and Similarity in Software, , ser. Dagstuhl Seminar Proceedings 06301; Roy, C.K., Cordy, J.R., (2007) A Survey on Software Clone Detection Research, , Queens University at Kingston, Ontario, Canada, Technical Report; Roy, C.K., Cordy, J.R., Koschke, R., Comparison and evaluation of code clone detection techniques and tools: A qualitative approach (2009) Journal of Science of Computer Programming, 74 (7), pp. 470-495. , May; Roy, C.K., Zibran, M.F., Koschke, R., The vision of software clone management: Past, present and the future (2014) CSMR-WCRE, pp. 18-33. , invited Keynote Paper; Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) Trans. on Soft.Eng, 33 (9), pp. 577-591. , Sep; Lague, B., Proulx, D., Mayrand, J., Merlo, E.M., Hudepohl, J., Assessing the benefits of incorporating function clone detection in a development process (1997) ICSM, pp. 314-321; Göde, N., Evolution of type-1 clones (2009) SCAM, pp. 77-86; Bazrafshan, S., Evolution of near-miss clones (2012) SCAM, pp. 74-83; Roy, C.K., Cordy, J.R., Near-miss function clones in open source software: An empirical study (2010) Journal on Software Maintenance, 22 (3), pp. 165-189; Chen, Y., Keivanloo, I., Roy, C.K., Near-miss software clones in open source games: An empirical study (2014) CCECE'14, pp. 1-7; Zhang, F., Mockus, A., Keivanloo, I., Zou, Y., Towards building a universal defect prediction model (2014) MSR, pp. 182-191. , ACM; Koschke, R., Large-scale inter-system clone detection using suffix trees and hashing (2014) Journal of Software: Evolution and Process, 26 (8), pp. 747-769. , Aug; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multilinguistic token-based code clone detection system for large scale source code (2002) Trans. on Soft.Eng, 28 (7), pp. 654-670; Nong, G., Zhang, S., Chan, W.H., Two efficient algorithms for linear suffix array construction (2011) IEEE Trans. on Computers, 60 (10), pp. 1471-1484. , Oct; Puglisi, S.J., Smyth, W.F., Yusufu, M., Fast optimal algorithms for computing all the repeats in a string (2008) Prague Stringology Conference, pp. 161-169. , Sep; Shrout, P., Fleiss, J., Intraclass correlations: Uses in assessing rater reliability (1979) Psychological Bulletin, 86 (2), pp. 420-428; Wang, T., Harman, M., Jia, Y., Krinke, J., Searching for better configurations: A rigorous approach to clone evaluation (2013) Foundations on Software Engineering, pp. 455-465},
correspondence_address1={Koschke, R.; University of BremenGermany},
sponsors={},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781509018550},
language={English},
abbrev_source_title={IEEE Int. Conf. on Softw. Anal., Evol., Reengineering, SANER},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Berger201656,
author={Berger, B.J. and Sohr, K. and Koschke, R.},
title={Automatically extracting threats from extended data flow diagrams},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2016},
volume={9639},
pages={56-71},
doi={10.1007/978-3-319-30806-7_4},
note={cited By 20; Conference of 8th International Symposium on Engineering Secure Software and Systems, ESSoS 2016 ; Conference Date: 6 April 2016 Through 8 April 2016;  Conference Code:172669},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84962433189&doi=10.1007%2f978-3-319-30806-7_4&partnerID=40&md5=28565c1f23a9dbb14c08b660319660a9},
affiliation={Center for Computing Technologies (TZI), Universität Bremen, Bremen, Germany},
abstract={Architectural risk analysis is an important aspect of developing software that is free of security flaws. Knowledge on architectural flaws, however, is sparse, in particular in small or medium-sized enterprises. In this paper, we propose a practical approach to architectural risk analysis that leveragesMicrosoft’s threat modeling. Our technique decouples the creation of a system’s architecture from the process of detecting and collecting architectural flaws. This way, our approach allows an software architect to automatically detect vulnerabilities in software architectures by using a security knowledge base. We evaluated our approach with real-world case studies, focusing on logistics applications. The evaluation uncovered several flaws with a major impact on the security of the software. © Springer International Publishing Switzerland 2016.},
author_keywords={Architectural risk analysis;  Automatic flaw detection;  Threat modeling},
keywords={Data flow graphs;  Knowledge based systems;  Risk assessment;  Software architecture, Automatic flaw detection;  Case-studies;  Data flow diagrams;  Knowledge base;  Medium sized enterprise;  Security flaws;  Software architects;  Threat modeling, Risk analysis},
funding_details={Bundesministerium fÃ¼r Bildung und ForschungBundesministerium fÃ¼r Bildung und Forschung, BMBF, 16KIS0069K},
funding_text 1={This work was supported by the German Federal Ministry of Education and Research (BMBF) under the grant 16KIS0069K (ZertApps project)},
references={Almorsy, M., Grundy, J., Ibrahim, A.S., Automated software architecture security risk analysis using formalized signatures (2013) 35Th International Conference on Software Engineering (ICSE), pp. 100-109; Basin, D., Clavel, M., Doser, J., Egea, M., Automated analysis of security-design models. (2009) Inf. Softw. Technol, 51, pp. 815-831; Berger, B., Sohr, K., Koschke, R., Extracting and analyzing the implemented security architecture of business applications (2013) 2013 17Th European Conference on Software Maintenance and Reengineering (CSMR), pp. 285-294; Bunke, M., Sohr, K., An architecture-centric approach to detecting security patterns in software (2011) Essos 2011. LNCS, 6542, pp. 156-166. , In: Erlingsson, Ú., Wieringa, R., Zannone, N. (eds.), Springer, Heidelberg; Chess, B., West, J., (2007) Secure Programming with Static Analysis, , Addison-Wesley, Reading; Clavel, M., Da Silva, V., Braga, C., Egea, M., Model-driven security in practice: An industrial experience (2008) ECMDA-FA 2008. LNCS, 5095, pp. 326-337. , In: Schieferdecker, I., Hartman, A. (eds.), Springer, Heidelberg; Criteria, C., (2009) Common Criteria for Information Technology Security Evaluation- Part 1: Introduction and General Model, , http://www.commoncriteriaportal.org/files/ccfiles/CCPART1V3.1R3.pdf; Dhillon, D., Developer-driven threat modeling: Lessons learned in the trenches (2011) IEEE Secur. Priv, 9 (4), pp. 41-47; Hernan, S., Lambert, S., Ostwald, T., Shostack, A., Uncover Security Design Flaws Using the STRIDE Approach (2006) MSDN Magazine, , http://msdn.microsoft.com/en-us/magazine/cc163519.aspx, November; Holzschuher, F., Peinl, R., Performance of graph query languages: Comparison of cypher, gremlin and native access in neo4j (2013) Proceedings of the Joint EDBT/ICDT 2013 Workshops, EDBT 2013, pp. 195-204. , http://doi.acm.org/10.1145/2457317.2457351, NY, USA, ACM, New York; Jung, C., Rudolph, M., Schwarz, R., Security evaluation of service-oriented systems with an extensible knowledge base (2011) 2011 Sixth International Conference on Availability, Reliability and Security (ARES), pp. 698-703; Jürjens, J., Shabalin, P., Automated verification of UMLsec models forsecurity requirements (2004) UML 2004 - the Unified Modelinglanguage: Modeling Languages and Applications. LNCS, 3273. , In: Baar, T., Strohmeier, A., Moreira, A., Moreira, S.J. (eds.), Springer, Heidelberg; Kuhlmann, M., Sohr, K., Gogolla, M., Comprehensive two-level analysis of static and dynamic rbac constraints with uml and ocl (2011) Proceedings of the 2011 Fifth International Conference on Secure Software Integration and Reliability Improvement, pp. 108-117. , IEEE Computer Society, Washington, DC; Manadhata, P.K., Wing, J.M., An attack surface metric (2011) IEEE Trans. Softw. Eng, 37 (3), pp. 371-386; Mantel, H., Preserving information flow properties under refinement (2001) IEEE Symposium on Security and Privacy, 78p. , http://computer.org/proceedings/s%26p/1046/10460078abs.htm; McGraw, G., (2006) Software Security: Building Security, , In. Addison-Wesley, Reading; (2010), https://www.microsoft.com/en-s/download/details.aspx?displaylang=en&id=12285; (2015) CWE/SANS Top 25 Most Dangerous Software Errors (2015), , http://cwe.mitre.org/top25, Accessed: January 15; Peine, H., Jawurek, M., Mandel, S., Security goal indicator trees: A model of software features that supports efficient security inspection (2008) 11Th IEEE High Assurance Systems Engineering Symposium, HASE 2008, pp. 9-18; Sabelfeld, A., Myers, A.C., Language-based information-flow security (2003) IEEE J. Sel. Areas Commun, 21 (1), pp. 5-19; Schaad, A., Borozdin, M., Tam2: Automated threat analysis (2012) Proceedings of the 27Th Annual ACM Symposium on Applied Computing, pp. 1103-1108; Schrettner, L., Fülöp, L.J., Ferenc, R., Gyimóthy, T., Visualization of software architecture graphs of java systems: Managing propagated low level dependencies (2010) Proceedings of the 8Th International Conference on the Principles and Practice of Programming in Java, PPPJ 2010, pp. 148-157. , http://doi.acm.org/10.1145/1852761.1852783, ACM, New York; Schumacher, M., Security Engineering with Patterns - Origins, Theoretical Models, and New Applications (2003) LNCS, 2754. , Springer, Heidelberg; Swiderski, F., Snyder, W., (2004) Threat Modeling, , Microsoft Press, Redmond},
correspondence_address1={Berger, B.J.; Center for Computing Technologies (TZI), Universität BremenGermany; email: berber@tzi.de},
editor={Bodden E., Caballero J., Athanasopoulos E.},
sponsors={},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319308050},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Ludemann2015211,
author={Ludemann, D. and Koschke, R.},
title={From preprocessor-constrained parse graphs to preprocessor-constrained control flow},
journal={2015 IEEE 15th International Working Conference on Source Code Analysis and Manipulation, SCAM 2015 - Proceedings},
year={2015},
pages={211-220},
doi={10.1109/SCAM.2015.7335417},
art_number={7335417},
note={cited By 1; Conference of IEEE 15th International Working Conference on Source Code Analysis and Manipulation, SCAM 2015 ; Conference Date: 27 September 2015 Through 28 September 2015;  Conference Code:118260},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84963537923&doi=10.1109%2fSCAM.2015.7335417&partnerID=40&md5=8a5c227b6b17511a01066c89c884f7aa},
affiliation={Universität Bremen, Germany},
abstract={Preprocessor-aware static analysis tools are needed for C Code to gain sound knowledge about the interference among all conditionally compiled program parts. We provide formal descriptions and algorithms to construct a preprocessor-aware control flow graph from preprocessor-aware parse graphs of SuperC. Based on the structure of parse graphs capturing the syntax nodes constrained by preprocessor constraints, we show how to model, formalize, and compute preprocessor-aware intra-procedural control-flow graphs. Such preprocessor-aware control-flow graphs may serve as the basis for subsequent preprocessor-aware control and data flow analyses. © 2015 IEEE.},
keywords={C (programming language);  Codes (symbols);  Data flow analysis;  Embedded systems;  Graphic methods;  Program processors;  Static analysis, C codes;  Compiled programs;  Constrained controls;  Control flow graphs;  Formal Description, Flow graphs},
references={Ernst, M.D., Badros, G.J., Notkin, D., An empirical analysis of C preprocessor use (2002) IEEE Transactions on Software Engineering, 28 (12), p. 2002; Baxter, I.D., Mehlich, M., Preprocessor conditional removal by simple partial evaluation (2001) Reverse Engineering 2001. Proceedings. Eighth Working Conference on IEEE, pp. 281-290; Kästner, C., Giarrusso, P.G., Rendel, T., Erdweg, S., Ostermann, K., Berger, T., Variability-aware parsing in the presence of lexical macros and conditional compilation (2011) Proceedings of the 2011 ACM International Conference on Object Oriented Programming Systems Languages and Applications, Ser. OOPSLA '11, pp. 805-824. , New York, NY, USA: ACM; Kästner, C., Giarrusso, P.G., Ostermann, K., Partial preprocessing C code for variability analysis (2011) Proceedings of the 5th Workshop on Variability Modeling of Software-Intensive Systems, pp. 127-136. , ser. VaMoS '11. New York, NY, USA: ACM; Kästner, C., Apel, S., Thüm, T., Saake, G., Type checking annotationbased product lines (2012) ACM Trans. Softw. Eng. Methodol., 21 (3), pp. 141-1439. , Jul; Kastner, C., Apel, S., Type-checking software product lines-a formal approach (2008) Proceedings of the 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, pp. 258-267. , ser. ASE '08. Washington, DC, USA: IEEE Computer Society; Igarashi, A., Pierce, B.C., Wadler, P., Featherweight Java: A minimal core calculus for Java and GJ (2001) ACM Trans. Program. Lang. Syst., 23 (3), pp. 396-450. , May; Liebig, J., Von Rhein, A., Kästner, C., Apel, S., Dörre, J., Lengauer, C., Scalable analysis of variable software (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, pp. 81-91. , ser. ESEC/FSE 2013. New York, NY, USA: ACM; Bodden, E., Tolêdo, T., Ribeiro, M., Brabrand, C., Borba, P., Mezini, M., Spllift: Statically analyzing software product lines in minutes instead of years (2013) Proceedings of the 34th ACM SIGPLAN Conference on Programming Language Design and Implementation, pp. 355-364. , ser. PLDI '13. New York, NY, USA: ACM; Brabrand, C., Ribeiro, M., Tolêdo, T., Borba, P., Intraprocedural dataflow analysis for software product lines (2012) Proceedings of the 11th Annual International Conference on Aspect-oriented Software Development, pp. 13-24. , ser. AOSD '12. New York, NY, USA: ACM; Kästner, C., Apel, S., Kuhlemann, M., Granularity in software product lines (2008) Proceedings of the 30th International Conference on Software Engineering, pp. 311-320. , ser. ICSE '08. New York, NY, USA: ACM; Gazzillo, P., Grimm, R., Superc: Parsing all of C by taming the preprocessor (2012) Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation, pp. 323-334. , ser. PLDI '12. New York, NY, USA: ACM; Benavides, D., Segura, S., Ruiz-Cortés, A., Automated analysis of feature models 20 years later: A literature review (2010) Information Systems, 35 (6), pp. 615-636; She, S., Lotufo, R., Berger, T., Wasowski, A., Czarnecki, K., Variability model of the Linux kernel (2010) Fourth International Workshop on Variability Modeling of Software-intensive Systems, , (VaMoS 2010), Linz, Austria},
sponsors={Grammatech; IEEE Computer Society TCSE; Microsoft Research},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781467375290},
language={English},
abbrev_source_title={IEEE Int. Work. Conf. Source Code Anal. Manip., SCAM - Proc.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koschke2015iii,
author={Koschke, R.},
title={Message from the general chair},
journal={2015 IEEE 31st International Conference on Software Maintenance and Evolution, ICSME 2015 - Proceedings},
year={2015},
pages={iii-iv},
doi={10.1109/ICSM.2015.7332444},
art_number={7332444},
note={cited By 0; Conference of 31st IEEE International Conference on Software Maintenance and Evolution, ICSME 2015 ; Conference Date: 29 September 2015 Through 1 October 2015;  Conference Code:118301},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84961621635&doi=10.1109%2fICSM.2015.7332444&partnerID=40&md5=9e075a605ed392a48a2b986b19bf393d},
affiliation={University of Bremen, Germany},
correspondence_address1={Koschke, R.; University of BremenGermany},
sponsors={IEEE Computer Society TCSE},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781467375320},
language={English},
abbrev_source_title={IEEE Int. Conf. Softw. Maintenance Evol., ICSME - Proc.},
document_type={Editorial},
source={Scopus},
}

@CONFERENCE{Basit201546,
author={Basit, H.A. and Hammad, M. and Koschke, R.},
title={A survey on goal-oriented visualization of clone data},
journal={2015 IEEE 3rd Working Conference on Software Visualization, VISSOFT 2015 - Proceedings},
year={2015},
pages={46-55},
doi={10.1109/VISSOFT.2015.7332414},
art_number={7332414},
note={cited By 12; Conference of 3rd IEEE Working Conference on Software Visualization, VISSOFT 2015 ; Conference Date: 27 September 2015 Through 28 September 2015;  Conference Code:118296},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84960941314&doi=10.1109%2fVISSOFT.2015.7332414&partnerID=40&md5=5fd11730e0e31d153b09fc83a3307cd7},
affiliation={SBA School of Science and Engineering, Lahore University of Management Sciences, Pakistan; Punjab Information Technology Board (PITB), Pakistan; Dpt. of Mathematics and Informatics, University of Bremen, Germany},
abstract={Comprehending software clones is necessary for a number of activities in software development. The comprehension of software clones is challenged by the sheer volume of data and the complexity of the information content in that data. Visualization, or visual data analysis, takes advantage of human cognitive skills to discover unstructured insights from the visual presentations of complex and voluminous data. In this paper, we survey the existing literature on visualization of software clones. We gather the insights provided, and put that information in context of actual information needs systematically derived from the clone management goals. This framework allows us to better understand the role a visualization may play in achieving a specific user goal, identify potential gaps between existing types of visualization and information needs, and find complementary non-redundant subsets of visualizations for each user goal. © 2015 IEEE.},
author_keywords={Cloning;  Context;  Data visualization;  Measurement;  Quality assessment;  Software;  Visualization},
keywords={Cloning;  Computer software;  Flow visualization;  Information management;  Information science;  Measurements;  Software design;  Surveys;  Visualization, Clone management;  Context;  Information contents;  Quality assessment;  Software clones;  Visual data analysis;  Visual presentation;  Voluminous data, Data visualization},
references={Maletic, J.I., Marcus, A., Collard, M.L., A task oriented view of software visualization (2002) Working Conference on Software Visualization, pp. 32-40. , IEEE Computer Society Press; Basit, H.A., Hammad, M., Jarzabek, S., Koschke, R., What do we need to know about clones deriving information needs from user goals (2015) Proceedings of the International Workshop on Software Clones, pp. 51-57. , IEEE; Koschke, R., Survey of research on software clones (2006) Duplication, Redundancy, and Similarity in Software, Ser. Dagstuhl Seminar Proceedings, (6301); Roy, C.K., Zibran, M.F., Koschke, R., The vision of software clone management: Past, present and the future (2014) IEEE Conference on Software Maintenance, Reengineering and Reverse Engineering (CSMRWCRE) 2014 Software Evolution Week, pp. 18-33; Roy, C.K., Cordy, J.R., Koschke, R., Comparison and evaluation of code clone detection techniques and tools: A qualitative approach (2009) Journal of Science of Computer Programming, 74 (7), pp. 470-495. , May; Rattana, D., Bhatiab, R., Singh, M., Software clone detection: A systematic review (2013) Information and Software Technology, 55 (7), pp. 1165-1199. , Jul; Koschke, R., Baxter, I., Conradt, M., Cordy, J.R., Software clone management towards industrial application (2012) Dagstuhl Seminar: Software Clone Management Towards Industrial Application; Geesaman, P., Cordy, J., Zouaq, A., Ontology alignment using bestmatch clone detection (2013) Proceedings of the International Workshop on Software Clones; Martin, D., Cordy, J.R., Analyzing web service similarity using contextual clones (2011) Proceedings of the International Workshop on Software Clones, pp. 41-46. , ACM; Ma, Y.S., Woo, D.K., Applying a code clone detection method to domain analysis of device drivers (2007) Asia-Pacific Software Engineering Conference, pp. 254-261; Godfrey, M., Tu, Q., Tracking structural evolution using origin analysis (2002) International Workshop on Principles of Software Evolution, pp. 117-119; Pate, J.R., Tairas, R., Kraft, N.A., Clone evolution: A systematic review (2013) Journal of Software: Evolution and Process, 25 (3), pp. 261-283; Lavoie, T., Khomh, F., Merlo, E., Zou, Y., Inferring repository file structure modifications using nearest-neighbor clone detection (2012) Working Conference on Reverse Engineering, pp. 325-334; Walenstein, A., Lakhotia, A., The software similarity problem in malware analysis (2006) Duplication, Redundancy, and Similarity in Software, Ser. Dagstuhl Seminar Proceedings, (6301); Bruschi, D., Martignoni, L., Monga, M., Using code normalization for fighting self-mutating malware (2006) Proceedings of the International Symposium on Secure Software Engineering, pp. 37-44; Zhang, Y., Basit, H.A., Jarzabek, S., Anh, D., Low, M., Querybased filtering and graphical view generation for clone analysis (2008) Proceedings of the International Conference on Software Maintenance, pp. 376-385; Asaduzzaman, M., Roy, C.K., Schneider, K., VisCad: Flexible code clone analysis support for NiCad (2011) Proceedings of the International Workshop on Software Clones; Harder, J., Göde, N., Efficiently handling clone data: RCF and Cyclone (2011) Proceedings of the International Workshop on Software Clones, pp. 81-82; Ueda, Y., Higo, Y., Kamiya, T., Kusumoto, S., Inoue, K., Gemini: Code clone analysis tool (2002) Proceedings of the International Symposium on Empirical Software Engineering, 2, pp. 31-32; Voinea, S.-L., (2007) Software Evolution Visualization, , Ph.D. dissertation, Technical University of Eindhoven; Eick, S.G., Steffen, J.L., Sumner, E.E., Jr., Seesoft-A tool for visualizing line oriented software statistics (1992) IEEE Trans. Softw. Eng., 18 (11), pp. 957-968; Tairas, R., Gray, J., Baxter, I., Visualization of clone detection results (2006) Proceedings of the 2006 OOPSLA Workshop on Eclipse Technology EXchange, pp. 50-54; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multilinguistic token-based code clone detection system for large scale source code (2002) IEEE Trans. Softw. Eng., 28 (7), pp. 654-670; Livieri, S., Higo, Y., Matushita, M., Inoue, K., Very-large scale code clone analysis and visualization of open source programs using distributed CCFinder: D-CCFinder (2007) International Conference on Software Engineering, pp. 106-115; Helfman, J., Dotplot patterns: A literal look at pattern languages (1996) TAPOS, 2 (1), pp. 31-41; Rieger, M., (2005) Effective Clone Detection Without Language Barriers, , Ph.D. dissertation University of Bern; Cordy, J.R., Exploring large-scale system similarity using incremental clone detection and live scatterplots (2011) International Conference on Program Comprehension, pp. 151-160; Rieger, M., Ducasse, S., Lanza, M., Insights into system-wide code duplication (2004) Working Conference on Reverse Engineering, pp. 100-109; Johnson, B., Shneiderman, B., Tree-maps: A space-filling approach to the visualization of hierarchical information structures (1991) IEEE Conference on Visualization, pp. 284-291; Lü, H., Fogarty, J., Cascaded treemaps: Examining the visibility and stability of structure in treemaps (2008) Proceedings of Graphics Interface. Canadian Information Processing Society, pp. 259-266; Deißenböck, F., (2009) Continuous Quality Control of Long Lived Software Systems, , Ph.D. dissertation, Technical University Munich; Jiang, Z.M., Hassan, A.E., Holt, R.C., Visualizing clone cohesion and coupling (2006) Asia Pacific Software Engineering Conference, pp. 467-476; Jiang, Z.M., (2006) Visualizing and Understanding Code Duplication in Large Software Systems, , Master's Thesis, University of Waterloo; Adar, E., Kim, M., Softguess: Visualization and exploration of code clones in context (2007) International Conference on Software Engineering, 7, pp. 762-766; Johnson, J.H., Visualizing textual redundancy in legacy source (1994) Conference of the Centre for Advanced Studies on Collaborative Research, p. 32. , IBM Press; Holten, D., Hierarchical edge bundles: Visualization of adjacency relations in hierarchical data (2006) IEEE Transactions on Visualization and Computer Graphics, 12 (5), pp. 741-748; Holten, D.H.R., (2009) Visualization of Graphs and Trees for Software Analysis, , Ph.D. dissertation, Technical University of Delft; Hauptmann, B., Bauer, V., Junker, M., Using edge bundle views for clone visualization (2012) Proceedings of the International Workshop on Software Clones, pp. 86-87; Voinea, L., Telea, A.C., Visual clone analysis with SolidSDD (2014) Working Conference on Software Visualization, pp. 79-82; Saha, R.K., Roy, C.K., Schneider, K.A., Visualizing the evolution of code clones (2011) Proceedings of the International Workshop on Software Clones, pp. 71-72. , ACM; Lanza, M., Ducasse, S., Polymetric views - A lightweight visual approach to reverse engineering (2003) IEEE Trans. Softw. Eng., 29 (9), pp. 782-795. , Sep; Bille, P., A survey on tree edit distance and related problems (2005) Theoretical Computer Science, 337 (1-3), p. 217239; Rufiange, S., McGuffin, M., Diffani: Visualizing dynamic graphs with a hybrid of difference maps and animation (2013) IEEE Transactions on Visualization and Computer Graphics, 19 (12), pp. 2556-2565. , Dec; Zibran, M.F., Analysis and visualization for clone refactoring (2015) Proceedings of the International Workshop on Software Clones, pp. 47-48. , IEEE; Broeksema, B., Telea, A., Visual support for porting large code bases (2011) Working Conference on Software Visualization, pp. 1-8},
sponsors={IEEE Computer Society TCSE},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781467375269},
language={English},
abbrev_source_title={IEEE Work. Conf. Softw. Vis., VISSOFT - Proc.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Basit201551,
author={Basit, H.A. and Hammad, M. and Jarzabek, S. and Koschke, R.},
title={What do we need to know about clones? deriving information needs from user goals},
journal={2015 IEEE 9th International Workshop on Software Clones, IWSC 2015 - Proceedings},
year={2015},
pages={51-57},
doi={10.1109/IWSC.2015.7069891},
art_number={7069891},
note={cited By 7; Conference of 9th IEEE International Workshop on Software Clones, IWSC 2015 ; Conference Date: 6 March 2015;  Conference Code:111747},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84927914689&doi=10.1109%2fIWSC.2015.7069891&partnerID=40&md5=f02f443550d50eebc2d2fbcceddf7656},
affiliation={Computer Science Dpt. SBASSE, LUMS, Lahore, Pakistan; Punjab Information Technology Board (PITB), Pakistan, Lahore, Pakistan; Computer Science Dpt. SoC, NUS, Lahore, Pakistan; Dpt. of Mathematics and Informatics, University of Bremen, Lahore, Germany},
abstract={Clone detection can be used to achieve diverse objectives such as refactoring, program understanding, bug localization, and plagiarism detection, etc. Each goal takes a different perspective on clone information needs. Different clone detection tools report different information about clones. To gauge the suitability of a given clone detector for a particular user objective, we need to determine which information needs implied by the objective a clone detector addresses. In this paper, we make a first step toward gathering clone information needs from the description of user goals. The results of our analysis are useful for various stakeholders such as programmers, managers, tool developers, and researchers. © 2015 IEEE.},
keywords={Bug localizations;  Clone detection;  Plagiarism detection;  Program understanding;  Refactorings;  User goals, Cloning},
references={Koschke, R., Survey of research on software clones (2006) Duplication, Redundancy, and Similarity in Software, Ser. Dagstuhl Seminar Proceedings, p. 06301; Roy, C.K., Zibran, M.F., Koschke, R., The vision of software clone management: Past, present and the future (2014) IEEE Conference on Software Maintenance, Reengineering and Reverse Engineering (CSMR-WCRE), 2014 Software Evolution Week, pp. 18-33; Roy, C.K., Cordy, J.R., Koschke, R., Comparison and evaluation of code clone detection techniques and tools: A qualitative approach (2009) Journal of Science of Computer Programming, 74 (7), pp. 470-495. , May; Rattana, D., Bhatiab, R., Singh, M., Software clone detection: A systematic review (2013) Information and Software Technology, 55 (7), pp. 1165-1199. , Jul; Koschke, R., Baxter, I., Conradt, M., Cordy, J.R., Software clone management towards industrial application (2012) Dagstuhl Seminar: Software Clone Management Towards Industrial Application; Johnson, J.H., Identifying redundancy in source code using fingerprints (1993) Conference of the Centre for Advanced Studies on Collaborative Research, pp. 171-183; Basit, H.A., Jarzabek, S., Data mining approach for detecting higher-level clones in software (2009) IEEE Trans. Softw. Eng, 35 (4), pp. 497-514. , Apr; Ma, Y.S., Woo, D.K., Applying a code clone detection method to domain analysis of device drivers (2007) Asia-Pacific Software Engineering Conference, pp. 254-261; Chou, A., Yang, J., Chelf, B., Hallem, S., Engler, D.R., An empirical study of operating system errors (2001) Symposium on Operating Systems Principles, pp. 73-88; Li, Z., Lu, S., Myagmar, S., Zhou, Y., Copy-paste and related bugs in large-scale software code (2006) IEEE Trans. Softw. Eng, 32 (3), pp. 176-192. , Mar; Juergens, E., Deissenboeck, F., Hummel, B., Wagner, S., Do code clones matter? (2009) Int. Conference on Software Engineering; Juergens, E., Hummel, B., Deissenboeck, F., Feilkas, M., Static bug detection through analysis of inconsistent clones (2008) Testmethoden fur Software (TESO); Bazrafshan, S., Koschke, R., Göde, N., Approximate code search in program histories (2011) Working Conference on Reverse Engineering, pp. 109-118; Li, J., Ernst, M., CBCD: Cloned buggy code detector (2012) Int. Conference on Software Engineering; Jang, J., Agrawal, A., Brumley, D., ReDeBug: Finding unpatched code clones in entire OS distributions (2012) Symposium on Security and Privacy; Juergens, E., Deissenboeck, F., Domann, C., Feilkas, M., Hummel, B., Schaetz, B., Streit, J., Wagner, S., Can clone detection support quality assessments of requirements specifications? (2010) Int. Conference on Software Engineering; Fowler, M., (2000) Refactoring: Improving the Design of Existing Code, , Addison-Wesley; Chen, W.-K., Li, B., Gupta, R., Code compaction of matching singleentry multiple-exit regions (2003) Int. Conference on Static Analysis, pp. 401-417; Debray, S.K., Evans, W., Muth, R., De Sutter, B., Compiler techniques for code compaction (2000) ACM Transactions on Programming Languages and Systems, 22 (2), pp. 378-415; Godfrey, M., Lijie, Z., Using origin analysis to detect merging and splitting of source code entities (2005) IEEE Trans. Softw. Eng, 31 (2), pp. 166-181. , Feb; Hunt, J.J., Tichy, W.F., Extensible language-aware merging (2002) Int. Conference on Software Maintenance, pp. 511-520; Dubinsky, Y., Rubin, J., Berger, T., Duszynski, S., Becker, M., Czarnecki, K., An exploratory study of cloning in industrial software product lines (2013) Conference on Software Maintenance and Reengineering, pp. 25-34; Faust, D., Verhoef, C., Software product line migration and deployment (2003) Journal of Software: Practice and Experience, 33 (10), pp. 933-955; Mende, T., Beckwermert, F., Koschke, R., Meier, G., Supporting the grow-and-prune model in software product lines evolution using clone detection (2008) Conference on Software Maintenance and Reengineering, pp. 163-172; Mende, T., Beckwermert, R.K.F., An evaluation of code similarity identification for the grow-and-prune model (2009) Journal on Software Maintenance and Evolution, 21 (2), pp. 143-169; Koschke, R., Frenzel, P., Breu, A.P., Angstmann, K., Extending the reflexion method for consolidating software variants into product lines (2009) Software Quality Journal, 17 (4), pp. 331-366; Ishihara, T., Hotta, K., Higo, Y., Igaki, H., Kusumoto, S., Inter-project functional clone detection toward building libraries-an empirical study on 13, 000 projects (2012) Working Conference on Reverse Engineering, pp. 387-391; Bruntink, M., Deursen, A.V., Engelen, R.V., Tourwe, T., On the use of clone detection for identifying crosscutting concern code (2005) IEEE Trans. Softw. Eng, 31 (10), pp. 804-818. , Oct; Godfrey, M., Tu, Q., Tracking structural evolution using origin analysis (2002) Int. Workshop on Principles of Software Evolution, pp. 117-119; Godfrey, M.W., German, D.M., Davies, J., Hindle, A., Determining the provenance of software artifacts (2011) Int. Workshop on Software Clones, pp. 65-66; German, D.M., Di Penta, M., Antoniol, G., Gúehéneuc, Y.-G., Code siblings: Phenotype evolution (2009) Int. Workshop on Software Clones; Davies, J., German, D.M., Godfrey, M.W., Hindle, A., Software bertillonage: Finding the provenance of an entity (2011) Working Conference on Mining Software Repositories, pp. 183-192; Merlo, E., Detection of plagiarism in university projects using metricsbased spectral similarity (2006) Duplication, Redundancy, and Similarity in Software, Ser. Dagstuhl Seminar Proceedings, , 06301; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multilinguistic token-based code clone detection system for large scale source code (2002) IEEE Trans. Softw. Eng, 28 (7), pp. 654-670; Pate, J.R., Tairas, R., Kraft, N.A., Clone evolution: A systematic review (2013) Journal of Software: Evolution and Process, 25 (3), pp. 261-283; Lague, B., Proulx, D., Mayrand, J., Merlo, E.M., Hudepohl, J., Assessing the benefits of incorporating function clone detection in a development process (1997) Int. Conference on Software Maintenance, pp. 314-321; Antoniol, G., Casazza, G., Di Penta, M., Merlo, E., Modeling clones evolution through time series (2001) Int. Conference on Software Maintenance, pp. 273-280; Antoniol, G., Villano, U., Merlo, E., Di Penta, M., Analyzing cloning evolution in the Linux kernel (2002) Information and Software Technology, 44 (13), pp. 755-765; Kim, M., Sazawal, V., Notkin, D., Murphy, G., An empirical study of code clone genealogies (2005) ACM SIGSOFT Software Engineering Notes, 30 (5), pp. 187-196; Li, Z., Lu, S., Myagmar, S., Zhou, Y., CP-Miner: Finding copy-paste and related bugs in large-scale software code (2006) IEEE Trans. Softw. Eng, 32 (3), pp. 176-192; Lavoie, T., Khomh, F., Merlo, E., Zou, Y., Inferring repository file structure modifications using nearest-neighbor clone detection (2012) Working Conference on Reverse Engineering, pp. 325-334; Giesecke, S., Generic modelling of code clones (2006) Duplication, Redundancy, and Similarity in Software, Ser. Dagstuhl Seminar Proceedings, pp. 1-23. , 06301; Lague, B., Proulx, D., Mayrand, J., Merlo, E.M., Hudepohl, J., Assessing the benefits of incorporating function clone detection in a development process (1997) Int. Conference on Software Maintenance, pp. 314-321; Koschke, R., Frontiers of software clone management (2008) Frontiers of Software Maintenance, pp. 119-128; Krinke, J., A study of consistent and inconsistent changes to code clones (2007) Working Conference on Reverse Engineering, pp. 170-178; Toomim, M., Begel, A., Graham, S.L., Managing duplicated code with linked editing (2004) Symposium on Visual Languages and Human Centric Computing, pp. 173-180; Walenstein, A., Lakhotia, A., The software similarity problem in malware analysis (2006) Duplication, Redundancy, and Similarity in Software, Ser. Dagstuhl Seminar Proceedings, , 06301; Bruschi, D., Martignoni, L., Monga, M., Using code normalization for fighting self-mutating malware (2006) Int. Symposium on Secure Software Engineering, pp. 37-44; Martin, D., Cordy, J.R., Analyzing web service similarity using contextual clones (2011) Int. Workshop on Software Clones, pp. 41-46; Geesaman, P., Cordy, J., Zouaq, A., Ontology alignment using bestmatch clone detection (2013) Int. Workshop on Software Clones},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781467369145},
language={English},
abbrev_source_title={IEEE Int. Workshop Softw. Clones, IWSC - Proc.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Koschke2015401,
author={Koschke, R. and Rilling, J.},
title={Preface special section on software clones (IWSC'13)},
journal={Journal of Software: Evolution and Process},
year={2015},
volume={27},
number={6},
pages={401},
doi={10.1002/smr.1719},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84979073081&doi=10.1002%2fsmr.1719&partnerID=40&md5=ee401bb311d06ffd443c6ec1394f25af},
affiliation={University of Bremen, Germany; Concordia University, Canada},
correspondence_address1={Koschke, R.; University of BremenGermany; email: koschke@tzi.de},
publisher={John Wiley and Sons Ltd},
issn={20477481},
language={English},
abbrev_source_title={J. Softw. Evol. Process},
document_type={Note},
source={Scopus},
}

@ARTICLE{Maalej2014,
author={Maalej, W. and Tiarks, R. and Roehm, T. and Koschke, R.},
title={On the comprehension of program comprehension},
journal={ACM Transactions on Software Engineering and Methodology},
year={2014},
volume={23},
number={4},
doi={10.1145/2622669},
note={cited By 71},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84907033652&doi=10.1145%2f2622669&partnerID=40&md5=0405f62141022f546c194282bb18db5a},
affiliation={University of Hamburg, Department of Informatics, Germany; Faculty of Informatics, Technische Universität München, Germany; University of Bremen, Department for Mathematics and Computer Science, Germany},
abstract={Research in program comprehension has evolved considerably over the past decades. However, only little is known about how developers practice program comprehension in their daily work. This article reports on qualitative and quantitative research to comprehend the strategies, tools, and knowledge used for program comprehension.We observed 28 professional developers, focusing on their comprehension behavior, strategies followed, and tools used. In an online survey with 1,477 respondents, we analyzed the importance of certain types of knowledge for comprehension and where developers typically access and share this knowledge.
We found that developers follow pragmatic comprehension strategies depending on context. They try to avoid comprehension whenever possible and often put themselves in the role of users by inspecting graphical interfaces. Participants confirmed that standards, experience, and personal communication facilitate comprehension. The team size, its distribution, and open-source experience influence their knowledge sharing and access behavior. While face-to-face communication is preferred for accessing knowledge, knowledge is frequently shared in informal comments.
Our results reveal a gap between research and practice, as we did not observe any use of comprehension tools and developers seem to be unaware of them. Overall, our findings call for reconsidering the research agendas towards context-aware tool support. © 2014 ACM.},
author_keywords={Context-aware software engineering;  Empirical software engineering;  Information needs;  Knowledge sharing;  Program comprehension},
keywords={Computer programming;  Information management;  Knowledge management;  Open source software;  Surveys, Context-Aware;  Empirical Software Engineering;  Information needs;  Knowledge-sharing;  Program comprehension, Software engineering},
references={Ackerman, M., Pipek, V., Wulf, V., (2003) Sharing Expertise beyond Knowledge Management, , The MIT Press; Adelson, B., Soloway, E., The role of domain expenence in software design (1985) IEEE Trans. Softw. Eng, 11 (11), pp. 1351-1360. , http://dx.doi.org/10.1109/TSE.1985.231883, 1985; Anderson, T., Kanuka, H., (2003) E-RESEARCH Methods, Strategies, and Issues, , Pearson Education; Bjørnson, F.O., Dingsøyr, T., Knowledge management in software engineering: A systematic review of studied concepts, findings and research methods used (2008) Inf. Softw. Technol., 50 (11), pp. 1055-1068. , http://dx.doi.org/10.1016/j.infsof.2008.03.006, 2008; Boehm, B.W., Software engineering (1976) IEEE Trans. Comput, 12 C-25, pp. 1226-1241. , 1976; Brandt, J., Dontcheva, M., Weskamp, M., Klemmer, S.R., Example-centric programming: Integrating Web search into the development environment (2010) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (CHI'10), pp. 513-522. , http://dx.doi.org/10.1145/1753326.1753402, ACM, New York, NY; Brandt, J., Guo, P.J., Lewenstein, J., Dontcheva, M., Klemmer, S.R., Two studies of opportunistic programming: InterleavingWeb foraging, learning, and writing code (2009) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (CHI'09), pp. 1589-1598. , http://dx.doi.org/10.1145/1518701.1518944, ACM, New York, NY; Breu, S., Premraj, R., Sillito, J., Zimmermann Th., Information needs in bug reports: Improving cooperation between developers and users (2010) Proceedings of TheACM Conference on Computer Supported Cooperative Work (CSCW'10), pp. 301-310. , http://dx.doi.org/10.1145/1718918.1718973, ACM, New York, NY; Brooks, R.E., Towards a theory of the comprehension of computer programs (1983) Int. J. Man-Machine Stud, 18 (6), pp. 543-554. , 1983; Cabrera, A., Cabrera, E.F., Knowledge-sharing dilemmas (2002) Org. Stud., 23, pp. 687-710. , 2002; Carroll, J., (1998) Minimalism beyond the Nurnberg Funnel, , MIT Press; Cataldo, M., Herbsleb, J.D., Communication networks in geographically distributed software development (2008) Proceedings of the ACM Conference on Computer Supported Cooperative Work (CSCW'08), pp. 579-588. , http://dx.doi.org/10.1145/1460563.1460654, ACM, New York, NY; Creswell, J.W., (2009) Research Design: Qualitative, Quantitative, and Mixed Methods Approaches, , Sage Publications, Inc; Dagenais, B., Robillard, M.P., Creating and evolving developer documentation: Understanding the decisions of open source contributors (2010) Proceedings of the 18th ACM SIGSOFT International Symposium on the Foundations of Software Engineering, pp. 127-136; Deline, R., Khella, A., Czerwinski, M., Robertson, G., Towards understanding programs through wear-based filtering (2005) Proceedings of the ACM Symposium on Software Visualization (SoftVis'05), pp. 183-192. , ACM; Desouza, K.C., Barriers to effective use of knowledgemanagement systems in software engineering (2003) Commun. ACM, 46 (1), pp. 99-101. , http://dx.doi.org/10.1145/602421.602458, 2003; Detienne, F., (2002) Software Design - Cognitive Aspect, , Springer; Ericsson, K.A., Simon, H.A., (1993) Protocol Analysis: Verbal Reports As Data, , Massachusetts Institute of Technology; Fjeldstad, R.K., Hamlen, W.T., Application program maintenance study: Report to our respondents (1979) Proceedings of GUIDE, 48. , PA; Forward, A., Lethbridge, T.C., The relevance of software documentation, tools and technologies: A survey (2002) Proceedings of the ACM Symposium on Document Engineering, pp. 26-33. , ACM; Fritz Th., Murphy, G.C., Using information fragments to answer the questions developers ask (2010) Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering (ICSE'10), pp. 175-184. , http://dx.doi.org/10.1145/1806799.1806828, ACM, New York, NY; Gilder, G., (2013) Knowledge and Power: The Information Theory of Capitalism and How It is Revolutionizing Our World, , Regnery Publishing; Grubb, A.M., Begel, A., On the perceived interdependence and information sharing inhibitions of enterprise software engineers (2012) Proceedings of the ACMConference on Computer Supported Cooperative Work (CSCW'12), pp. 1337-1346. , http://dx.doi.org/10.1145/2145204.2145403, ACM, New York, NY; Herbsleb, J.D., Mockus, A., An empirical study of speed and communication in globally-distributed software development (2003) IEEE Trans. Softw. Eng., 29 (6), pp. 481-494. , 2003; Hoffmann, R., Fogarty, J., Weld, D.S., Assieme: Finding and leveraging implicit references in a Web search interface for programmers (2007) Proceedings of the 20th Annual ACM Symposium on User Interface Software and Technology (UIST'07), pp. 13-22. , http://dx.doi.org/10.1145/1294211.1294216, ACM, New York, NY; Holmes, R., Walker, R.J., Systematizing pragmatic software reuse (2013) ACM Trans. Softw. Eng. Methodol., 21, p. 4. , http://dx.doi.org/10.1145/2377656.2377657, 2013; Kim, M., Bergman, L., Lau, T., Notkin, D., An ethnographic study of copy and paste programming practices in OOPL (2004) Proceedings of the International Symposium on Empirical Software Engineering (ISESE'04), pp. 83-92. , http://dx.doi.org/10.1109/ISESE.2004.1334896; Ko, A.J., Deline, R., Venolia, G., IEEE Computer Society, Information needs in collocated software development teams (2007) Proceedings of the 29th International Conference on Software Engineering (ICSE'07), pp. 344-353. , http://dx.doi.org/10.1109/ICSE.2007.45; Ko, A.J., Myers, B.A., ACM, Designing the whyline: A debugging interface for asking questions about program behavior (2004) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (CHI'04), pp. 151-158; Ko, A.J., Myers, B.A., Debugging reinvented: Asking and answering why and why not questions about program behavior (2008) Proceedings of the 30th International Conference on Software Engineering (ICSE'08), pp. 301-310. , http://dx.doi.org/10.1145/1368088.1368130, ACM, New York, NY; Ko, A.J., Myers, B.A., Coblenz, M.J., Aung, H.H., An exploratory study of how developers seek, relate, and collect relevant information during software maintenance tasks (2006) IEEE Trans. Softw. Eng, 32 (12), pp. 971-987. , http://dx.doi.org/10.1109/TSE.2006.116, 2006; Latoza Th., D., Garlan, D., Herbsleb, J.D., Myers, B.A., Program comprehension as fact finding (2007) Proceedings of the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC-FSE'07), pp. 361-370. , http://dx.doi.org/10.1145/1287624.1287675, ACM, New York, NY; Latoza Th., D., Venolia, G., Deline, R., Maintaining mental models: A study of developer work habits (2006) Proceeding of the 28th International Conference on Software Engineering (ICSE'06)., pp. 492-501. , http://dx.doi.org/10.1145/1134285.1134355, ACM, New York, NY; Lethbridge, T.C., Singer, J., Forward, A., How software engineers use documentation: The state of the practice (2003) IEEE Softw., 20 (6), pp. 35-39. , 2003; Letovsky, S., Soloway, E., Delocalized plans and program comprehension (1986) IEEE Softw., 3 (3), pp. 41-49. , 1986; Littman, D.C., Pinto, J., Letovsky, S., Soloway, E., Mental models and software maintenance (1987) J. Syst. Softw., 7 (4), pp. 341-355. , 1987; Maalej, W., Task-first or context-first? Tool integration revisited (2009) Proceedings of the IEEE/ACM International Conference on Automated Software Engineering (ASE'09), pp. 344-355. , http://dx.doi.org/10.1109/ASE.2009.36, IEEE Computer Society; Maalej, W., Fritz, T., Robbes, R., Collecting and processing interaction data for recommendation systems (2014) Recommendation Systems in Software Engineering, pp. 173-197. , http://dx.doi.org/10.1007/978-3-642-45135-5_7, Martin P. Robillard, Walid Maalej, Robert J.Walker, and Thomas Zimmermann (Eds.), Springer, Berlin; Maalej, W., Happel, H.-J., Can development work describe itself? (2010) Proceedings of the 7th IEEE International Working Conference on Mining Software Repositories (MSR'10), pp. 191-200. , IEEE Computer Society; Maalej, W., Robillard, M.P., Patterns of knowledge in API reference documentation (2013) IEEE Trans. Softw. Eng., 39 (9), pp. 1264-1282. , http://dx.doi.org/10.1109/TSE.2013.12, 2013; Milewski, A.E., Tremaine, M., Egan, R., Zhang, S., Kobler, F., O'sullivan, P., Guidelines for effective bridging in global software engineering (2008) Proceedings of the IEEE International Conference on Global Software Engineering, pp. 23-32. , http://dx.doi.org/10.1109/ICGSE.2008.16, IEEE Computer Society; Mockus, A., Herbsleb, J.D., Expertise browser: A quantitative approach to identifying expertise (2002) Proceedings of the 24th International Conference on Software Engineering (ICSE'02), pp. 503-512. , http://dx.doi.org/10.1145/581339.581401, ACM, New York, NY; Murphy, G.C., Kersten, M., Findlater, L., How are Java software developers using the Eclipse IDE? (2006) IEEE Softw., 23 (4), pp. 76-83. , http://dx.doi.org/10.1109/MS.2006.105, 2006; Murphy-Hill, E., The future of social learning in software engineering (2014) Computer, 47 (1), pp. 48-54. , http://dx.doi.org/10.1109/MC.2013.406, 2014; Murphy-Hill, E., Jiresal, R., Murphy, G.C., Improving software developers' fluency by recommending development environment commands (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering (FSE'12), 11p. , http://dx.doi.org/10.1145/2393596.2393645, ACM, New York, NY; Murphy-Hill, E., Murphy, G.C., Peer Interaction effectively yet infrequently, enables programmers to discover new tools (2011) Proceedings of the ACM Conference on Computer Supported Cooperative Work (CSCW'11), pp. 405-414. , http://dx.doi.org/10.1145/1958824.1958888, ACM, New York, NY; Murphy-Hill, E., Parnin, C., Black, A.P., How we refactor, and how we know it (2012) IEEE Trans. Softw. Eng., 38 (1), pp. 5-18. , http://dx.doi.org/10.1109/TSE.2011.41, 2012; Parnin Ch., Rugaber, S., Resumption strategies for interrupted programming tasks (2009) Proceedings of the IEEE 17th International Conference on Program Comprehension (ICPC), , IEEE; Rahman, F., Bird Ch., Devanbu, P., Clones: What is that smell? (2012) Empirical Softw. Eng., 17 (4-5), pp. 503-530. , http://dx.doi.org/10.1007/s10664-011-9195-3, 2012; Rajlich, V., Wilde, N., The role of concepts in program comprehension (2002) Proceedings of the 10th International Workshop on Program Comprehension, pp. 271-278; Reichling, T., Veith, M., Wulf, V., Expert recommender: Designing for a Network Organization (2007) Comput. Supported Coop. Work, 16 (4-5), pp. 431-465. , http://dx.doi.org/10.1007/s10606-007-9055-2, 2007; Robillard, M., Coelho, W., Murphy, G., How effective developers investigate source code: An exploratory Study (2004) IEEE Trans. Softw. Eng., 30 (12), pp. 889-903. , 2004; Robillard, M., Deline, R., A field study of API learning obstacles (2010) Empirical Softw. Eng., pp. 1-30. , http://dx.doi.org/10.1007/s10664-010-9150-8, 2010; Robillard, M.P., What makes APIs hard to learn? Answers from developers (2009) IEEE Softw., 26 (6), pp. 27-34. , http://dx.doi.org/10.1109/MS.2009.193, 2009; Roehm, T., Maalej, W., Automatically detecting developer activities and problems in software development work: NIER track (2012) Proceedings of the 34th International Conference on Software Engineering, (ICSE'12); Roehm, T., Tiarks, R., Koschke, R., Maalej, W., How do professional developers comprehend software? (2012) Proceedings of the International Conference on Software Engineering (ICSE'12), pp. 255-265. , http://dl.acm.org/citation.cfm?id=2337223.2337254, IEEE Press; Rosnow, R.L., Rosenthal, R., (2007) Beginning Behavioral Research: A Conceptual Primer, , (6th. Ed.) Pearson; Sillito, J., De Voider, K., Fisher, B., Murphy, G., Managing software change tasks: An exploratory study (2005) Proceedings of the International Symposium on Empirical Software Engineering (ISESE'05), , http://dx.doi.org/10.1109/ISESE.2005.1541811; Sillito, J., Murphy, G.C., De Volder, K., Asking and answering questions during a programming change task (2008) Trans. Softw. Eng., 34 (4), pp. 434-451. , http://dx.doi.org/10.1109/TSE.2008.26, 2008; Singer, J., Lethbridge, T., Vinson, N., Anquetil, N., An examination of software engineering work practices (1997) Proceedings of the Conference of the Centre for Advanced Studies on Collaborative Research (CASCO), p. 21. , IBM Press; Singer, L.-G., (2013) Improving the Adoption of Software Engineering Practices Through Persuasive Interventions, , lulu.com; Sjøberg, D.K., Anda, B., Arisholm, E., Dybå, T., Jørgensen, M., Karahasanović, A., Vokáč, M., Challenges and recommendations when increasing the realism of controlled software engineering experiments (2003) Empirical Methods and Studies in Software Engineering, 2765, pp. 24-38. , http://dx.doi.org/10.1007/978-3-540-45143-33, Reidar Conradi and AlfInge Wang (Eds.), Lecture Notes in Computer Science, Springer, Berlin; Soloway, E., Ehrlich, K., Empirical studies of programming knowledge (1984) IEEE Trans. Softw. Eng., 10 (5), pp. 595-609. , http://dx.doi.org/10.1109/TSE.1984.5010283, 1984; Tuten, T.L., Urban, D.J., Bosnjak, M., (2002) Internet Surveys and Data Quality: A Review, , Hogrefe and Huber Publishers; Vakilian, M., Chen, N., Negara, S., Rajkumar, B.A., Bailey, B.P., Johnson, R.E., Use, disuse, and misuse of automated refactorings (2012) Proceedings of the International Conference on Software Engineering (ICSE'12), pp. 233-243. , http://dl.acm.org/citation.cfm?id=2337223.2337251, IEEE Press; Von Mayrhauser, A., Vans, A.M., Identification of dynamic comprehension processes during large scale maintenance (1996) IEEE Trans. Softw. Eng., 22 (6), pp. 424-437. , 1996; Von Mayrhauser, A., Vans, A.M., Lang, S., Program comprehension and enhancement of software (1998) Proceedings of the IFIP World Computing Congress - Information Technology and Knowledge Engineering; Winter, J.C.F.D., Dodou, D., Five-point Likert items: T test versus Mann-Whitney-Wilcoxon (2010) Practical Assess. Res. Eval., 15, p. 11. , 2010},
correspondence_address1={Maalej, W.; University of Hamburg, Department of InformaticsGermany},
publisher={Association for Computing Machinery},
issn={1049331X},
coden={ATSME},
language={English},
abbrev_source_title={ACM Trans. Software Eng. Methodol.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Koschke2014747,
author={Koschke, R.},
title={Large-scale inter-system clone detection using suffix trees and hashing},
journal={Journal of Software: Evolution and Process},
year={2014},
volume={26},
number={8},
pages={747-769},
doi={10.1002/smr.1592},
note={cited By 14},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84906317416&doi=10.1002%2fsmr.1592&partnerID=40&md5=e9d468a7fdb34bd05deaee7890831aa7},
affiliation={Mathematik und Informatik, University of Bremen, Postfach 33 04 40, 28334 Bremen, Germany},
abstract={Detecting a similar code between two systems has various applications such as comparing two software variants or versions or finding potential license violations. Techniques detecting suspiciously similar code must scale in terms of resources needed to very large code corpora and need to have high precision because a human needs to inspect the results. This paper demonstrates how suffix trees can be used to obtain a scalable comparison. The evaluation is carried out for very large code corpora. Our evaluation shows that our approach is faster than index-based techniques when the analysis is run only once. If the analysis is to be conducted multiple times, creating an index pays off. We report how much code can be filtered out from the analysis using an index-based filter. In addition to that, this paper proposes a method to improve precision through user feedback. A user validates a sample of the found clone candidates. An automated data mining technique learns a decision tree on the basis of the user decisions and different code metrics. We investigate the relevance of several metrics and whether criteria learned from one application domain can be generalized to other domains. Copyright © 2013 John Wiley & Sons, Ltd. Similar code between two systems can effectively and efficiently be found by a combination of hash-based filtering and sequence matching based on a suffix tree. Precision can effecetively be improved by filtering matches using a decission tree based on software metrics, in particular, parameter similarity. The decission tree can be automatically learned from a validated sample. Copyright © 2013 John Wiley & Sons, Ltd.},
author_keywords={clone detection;  code search;  license violation detection},
keywords={Application programs;  Cloning;  Data mining;  Decision trees, Automated data mining;  Clone detection;  Code metrics;  Code search;  License violation detections;  Software variants;  Suffix-trees;  User feedback, Codes (symbols)},
funding_details={Massachusetts Department of Fish and GameMassachusetts Department of Fish and Game, DFG, 2342/2-2},
references={Yamashina, T., Uwano, H., Fushida, K., Kamei, Y., Nagura, M., Kawaguchi, S., Iida, H., Shinobi: A real-time code clone detection tool for software maintenance (2009) Working Conference on Reverse Engineering, pp. 313-314. , IEEE Computer Society Press: Los Alamitos, Calif; Bazrafshan, S., Koschke, R., Göde, N., Approximate code search in program histories (2011) Working Conference on Reverse Engineering, pp. 109-118. , IEEE Computer Society Press: Los Alamitos, Calif; Keivanloo, I., Rilling, J., Charland, P., Seclone-a hybrid approach to internet-scale real-time code clone search (2011) International Conference on Program Comprehension, pp. 223-224. , IEEE Computer Society Press: Los Alamitos, Calif; Keivanloo, I., Rilling, J., Charland, P., Internet-scale real-time code clone search via multi-level indexing (2011) Working Conference on Reverse Engineering, pp. 23-27. , IEEE Computer Society Press: Los Alamitos, Calif; Barbour, L., Yuan, H., Zou, Y., A technique for just-in-time clone detection in large scale systems (2010) International Conference on Program Comprehension, pp. 76-79. , IEEE Computer Society Press: Los Alamitos, Calif; Ekwa Duala-Ekoko, M.R., Clonetracker: Tool support for code clone management (2008) International Conference on Software Engineering, pp. 843-846. , ACM Press: New York, NY, USA; De Wit, M., Zaidman, A., Van Deursen, A., Managing code clones using dynamic change tracking and resolution (2009) International Conference on Software Maintenance, pp. 169-178. , IEEE Computer Society Press: Los Alamitos, Calif; Johnson, J.H., Identifying redundancy in source code using fingerprints (1993) Conference of the Centre for Advanced Studies on Collaborative Research, pp. 171-183. , IBM Press: Upper Saddle River, NJ, USA; Baker, B.S., On finding duplication and near-duplication in large software systems (1995) Working Conference on Reverse Engineering, pp. 86-95. , IEEE Computer Society Press: Los Alamitos, Calif; Mayrand, J., Leblanc, C., Merlo, E.M., Experiment on the automatic detection of function clones in a software system using metrics (1996) Proceedings of the International Conference on Software Maintenance, pp. 244-254. , IEEE Computer Society Press: Washington; Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., Clone detection using abstract syntax trees (1998) International Conference on Software Maintenance, pp. 368-378. , Koshgoftaar T.M. Bennett K. (eds.). IEEE Computer Society Press: Los Alamitos, Calif; Roy, C., Cordy, J., Nicad: Accurate detection of near-miss intentional clones using flexible pretty-printing and code normalization (2008) International Conference on Program Comprehension, pp. 172-181. , IEEE Computer Society Press: Los Alamitos, Calif; Hummel, B., Juergens, E., Heinemann, L., Conradt, M., Index-based code clone detection: Incremental, distributed, scalable (2010) International Conference on Software Maintenance, pp. 1-9. , IEEE Computer Society Press: Los Alamitos, Calif; Mende, T., Koschke, R., Beckwermert, F., An evaluation of code similarity identification for the grow-and-prune model (2009) Journal on Software Maintenance and Evolution, 21 (2), pp. 143-169; Mende, T., Beckwermert, F., Koschke, R., Meier, G., Supporting the grow-and-prune model in software product lines evolution using clone detection (2008) European Conference on Software Maintenance and Reengineering, pp. 163-172. , IEEE Computer Society Press: Los Alamitos, Calif; Higo, Y., Tanaka, K., Kusumoto, S., Toward identifying inter-project clone sets for building useful libraries (2010) International Workshop on Software Clones, , ACM Press: New York, NY, USA; Livieri, S., German, D.M., Inoue, K., (2010) A Needle in the Stack: Efficient Clone Detection for Huge Collections of Source Code, , Technical report, University of Osaka Jan; Cordy, J.R., Exploring large-scale system similarity using incremental clone detection and live scatterplots (2011) International Conference on Program Comprehension, pp. 151-160. , IEEE Computer Society Press: Los Alamitos, Calif; Koschke, R., Large-scale inter-system clone detection using suffix trees (2012) European Conference on Software Maintenance and Reengineering, pp. 309-318. , IEEE Computer Society Press: Los Alamitos, Calif; Koschke, R., Survey of research on software clones (2007) Duplication, Redundancy, and Similarity in Software, , http://drops.dagstuhl.de/opus/volltexte/2007, Koschke R. Merlo E. Walenstein A. (eds.). no. 06301 in Dagstuhl Seminar Proceedings, Dagstuhl: Dagstuhl, Germany; Koschke, R., Frontiers in software clone management (2008) Frontiers in Software Maintenance, Proceedings of the International Conference on Software Maintenance, pp. 119-128. , IEEE Computer Society Press: Los Alamitos, Calif; Roy, C.K., Cordy, J.R., Koschke, R., Comparison and evaluation of code clone detection techniques and tools: A qualitative approach (2009) Journal of Science of Computer Programming, 74 (7), pp. 470-495. , doi: 10.1016/j.scico.2009.02.007. Special Issue on Program Comprehension (ICPC 2008); Baker, B.S., A program for identifying duplicated code (1992) Computer Science and Statistics 24: Proceedings of the 24th Symposium on the Interface, pp. 49-57; Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) IEEE Transactions on Software Engineering, 33 (9), pp. 577-591; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multi-linguistic token-based code clone detection system for large scale source code (2002) IEEE Transactions on Software Engineering, 28 (7), pp. 654-670; Koschke, R., Falke, R., Frenzel, P., Clone detection using abstract syntax suffix trees (2006) Working Conference on Reverse Engineering, pp. 253-262. , IEEE Computer Society Press: Los Alamitos, Calif; Falke, R., Koschke, R., Frenzel, P., Empirical evaluation of clone detection using syntax suffix trees (2008) Empirical Software Engineering, 13 (6), pp. 601-643. , doi: 10.1007/s10664-008-9073-9; Livieri, S., Higo, Y., Matushita, M., Inoue, K., Very-large scale code clone analysis and visualization of open source (2007) International Conference on Software Engineering, pp. 106-115. , ACM Press: New York, NY, USA; McCreight, E., A space-economical suffix tree construction algorithm (1976) Journal of the ACM, 32 (2), pp. 262-272; Ukkonen, E., On-line construction of suffix trees (1995) Algorithmica, 14, pp. 249-260; Chang, W.I., Lawler, E.L., Sublinear expected time approximate string matching and biological applications (1994) Algorithmica, 12, pp. 327-344; Gusfield, D., (2008) Algorithms on Strings, Trees and Sequences: Computer Science and Computational Biology, , Cambridge University Press; Juergens, E., Deissenboeck, F., Hummel, B., Clonedetective - A workbench for clone detection research (2009) International Conference on Software Engineering, , ACM Press: New York, NY, USA; Higo, Y., Kamiya, T., Kusumoto, S., Inoue, K., Method and implementation for investigating code clones in a software system (2007) Information and Software Technology, 49 (910), pp. 985-998; Tiarks, R., Koschke, R., Falke, R., An assessment of type-3 clones as detected by state-of-the-art tools (2009) International Workshop on Source Code Analysis and Manipulation, pp. 67-76. , IEEE Computer Society Press: Los Alamitos, Calif; Tiarks, R., Koschke, R., Falke, R., An extended assessment of type-3 clones as detected by state-of-the-art tools (2011) Software Quality Journal, 19 (2), pp. 295-331; Falke, R., (2011) Erkennung von Falsch-Positiven Softwareklonen Mittels Lernverfahren, , Phd dissertation, University of Bremen, Germany; Puglisi, S.J., Smyth, W.F., Yusufu, M., (2008) Fast Optimal Algorithms for Computing All the Repeats in A String, pp. 161-169. , PSC; Mertzel, N.J., Copying 0.03 percent of software code base not "de minimis" (2008) Journal of Intellectual Property Law & Practice, 9 (3), pp. 547-548; Ueda, Y., Kamiya, T., Kusumoto, S., Inouie, K., On detection of gapped code clones using gap locations (2002) Proc. of Asia-Pacific Software Engineering Conference, pp. 327-336. , IEEE Computer Society Press: Los Alamitos, Calif; Jia, Y., Binkley, D., Harman, M., Krinke, J., Matsushita, M., Kclone: A proposed approach to fast precise code clone detection (2009) International Workshop on Software Clones; Göde, N., (2011) Clone Evolution, , PhD dissertation, University of Bremen, Bremen, Germany; Krinke, J., Gold, N., Jia, Y., Binkley, D., Cloning and copying between gnome projects (2010) Working Conference on Mining Software Repositories (MSR), pp. 98-101. , IEEE Computer Society Press: Los Alamitos, Calif; Mende, T., (2011) On the Evaluation of Defect Prediction Models, , Phd dissertation, University of Bremen, Germany},
correspondence_address1={Koschke, R.; Mathematik und Informatik, University of Bremen, Postfach 33 04 40, 28334 Bremen, Germany; email: koschke@tzi.de},
publisher={John Wiley and Sons Ltd},
issn={20477481},
language={English},
abbrev_source_title={J. Softw. Evol. Process},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Riemann2014,
author={Riemann, O.J.L. and Koschke, R.},
title={Robust parsing of cloned token sequences},
journal={Electronic Communications of the EASST},
year={2014},
volume={63},
page_count={20},
doi={10.14279/tuj.eceasst.63.910.894},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85042928370&doi=10.14279%2ftuj.eceasst.63.910.894&partnerID=40&md5=8523cdd5a73b376cd1ecd5488d76f4a3},
affiliation={Software Engineering Group, University of Bremen, Germany},
abstract={Token-based clone detection techniques are known for their scalability, high recall, and robustness against syntax errors and incomplete code. They, however, may yield clones that are syntactically incomplete and they know very little about the syntactic structure of their reported clones. Hence, their results cannot immediately be used for automated refactorings or syntactic filters for relevance. This paper explores techniques of robust parsing to parse code fragments reported by token-based clone detectors to determine whether the clones are syntactically complete and what kind of syntactic elements they contain. This knowledge can be used to improve the precision of token-based clone detection. © Software Clones 2014.},
author_keywords={Lexical analysis;  Software clones;  Syntactic analysis;  Syntax-based clone detection;  Token-based clone detection},
references={Aycock, J., Horspool, N.R., Practical Earley Parsing (2002) The Computer Journal, 45 (6), pp. 620-630. , Nov; Aho, A., Peterson, T., Minimum Distance Error-Correcting Parser for Context-Free Languages (1972) SIAM Journal on Computing, 1 (4), pp. 305-312; Aho, A.V., Ullman, J.D., (1977) Principles of Compiler Design, , Addison-Wesley Pub. Co., Reading, Massachusetts; Baker, B.S., A program for identifying duplicated code (1992) In Computer Science and Statistics 24: Proceedings of the 24th Symposium on the Interface, pp. 49-57. , Mar; Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and Evaluation of Clone Detection Tools (2007) IEEE Computer Society Transactions on Software Engineering, 33 (9), pp. 577-591. , Sept; Baxter, I.D., Mehlich, M., Preprocessor Conditional Removal by Simple Partial Evaluation (2001) In Reverse Engineering, 2001. Proceedings. Eighth Working Conference on, pp. 281-290; Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., Clone Detection Using Abstract Syntax Trees (1998) International Conference on Software Maintenance, pp. 368-378. , In Koshgoftaar and Bennett (eds.), IEEE Computer Society Press; Earley, J., An efficient context-free parsing algorithm (1970) Communications of the ACM, 13 (2), pp. 94-102. , Feb; Falke, R., Koschke, R., Frenzel, P., Empirical Evaluation of Clone Detection Using Syntax Suffix Trees (2008) Empirical Software Engineering, 13 (6), pp. 601-643; Gazzillo, P., Grimm, R., SuperC: Parsing All of C by Taming the Preprocessor (2012) SIGPLAN Not, 47 (6), pp. 323-334. , June; Grune, D., Jacobs, C.J.H., (2008) Parsing Techniques: A Practical Guide, , Springer, New York, second edition; Göde, N., Koschke, R., Incremental Clone Detection (2009) In European Conference on Software Maintenance and Reengineering, pp. 219-228. , IEEE Computer Society Press; Hummel, B., Juergens, E., Heinemann, L., Conradt, M., Index-Based Code Clone Detection: Incremental, Distributed, Scalable (2010) In International Conference on Software Maintenance, pp. 1-9. , IEEE Computer Society Press; Koschke, R., Falke, R., Frenzel, P., Clone Detection Using Abstract Syntax Suffix Trees (2006) In Working Conference on Reverse Engineering, pp. 253-262. , IEEE Computer Society Press; Kästner, C., Giarrusso, P.G., Ostermann, K., Partial preprocessing C code for variability analysis (2011) In Proceedings of the 5th Workshop on Variability Modeling of Software-Intensive Systems, pp. 127-136. , ACM Press; Kästner, C., Giarrusso, P.G., Rendel, T., Erdweg, S., Ostermann, K., Berger, T., Variability-Aware Parsing in the Presence of Lexical Macros and Conditional Compilation (2011) In Proceedings of the 2011 ACM International Conference on Object Oriented Programming Systems Languages and Applications, pp. 805-824. , ACM Press; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A Multi-Linguistic Token-based Code Clone Detection System for Large Scale Source Code (2002) IEEE Computer Society Transactions on Software Engineering, 28 (7), pp. 654-670; Koschke, R., Large-Scale Inter-System Clone Detection Using Suffix Trees (2012) In European Conference on Software Maintenance and Reengineering, pp. 309-318. , IEEE Computer Society Press; Keivanloo, I., Rilling, J., Charland, P., SeClone-A Hybrid Approach to Internet-Scale Real-Time Code Clone Search (2011) In International Conference on Program Comprehension, pp. 223-224. , IEEE Computer Society Press; Livieri, S., Higo, Y., Matushita, M., Inoue, K., Very-Large Scale Code Clone Analysis and Visualization of Open Source (2007) In International Conference on Software Engineering, pp. 106-115. , ACM Press; Merlo, E., Lavoie, T., Potvin, P., Busnel, P., Large scale multi-language clone analysis in a telecommunication industrial setting (2013) In International Workshop on Software Clones, pp. 69-75. , IEEE Computer Society Press; Moonen, L., Generating Robust Parsers using Island Grammars (2001) In Working Conference on Reverse Engineering, pp. 13-22; Nederhof, M.-J., Bertsch, E., Linear-time suffix parsing for deterministic languages (1996) Journal of the ACM, 43 (3), pp. 524-554. , May},
publisher={Universitatsbibliothek TU Berlin},
issn={18632122},
language={English},
abbrev_source_title={Electron. Commun. EASST},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Bazrafshan20141,
author={Bazrafshan, S. and Koschke, R.},
title={Effect of clone information on the performance of developers fixing cloned bugs},
journal={Proceedings - 2014 14th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2014},
year={2014},
pages={1-10},
doi={10.1109/SCAM.2014.10},
art_number={6975630},
note={cited By 1; Conference of 14th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2014 ; Conference Date: 28 September 2014 Through 29 September 2014;  Conference Code:109634},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84924907807&doi=10.1109%2fSCAM.2014.10&partnerID=40&md5=efc3c0bf6ad531d0c32ac35203efb824},
affiliation={University of Bremen, Germany},
abstract={Duplicated source code-clones-is known to occur frequently in software systems and bears the risk of inconsistent updates of the code. The impact of clones has been investigated mostly by retrospective analysis of software systems. Only little effort has been spent to investigate human interaction when dealing with clones. A previous study by Chatterji and colleagues found that cloned defects are removed significantly more accurately when clone information is provided to the programmers. We conducted a controlled experiment to extend the previous study on the use of clone information by investigating the effect of clone information on the performance of developers in common bug-fixing tasks. The experiment shows that developers are quite capable to compensate missing clone information through testing to provide correct solutions. Clone information does help to detect cloned defects faster, although developers may exploit semantic code relations such as inheritance to uncover cloned defects only slightly slower if they do not have clone information. If cloned defects lurk in semantically unrelated places however, clone information helps to find them faster at statistical significance. Developers without clone information needed 17 minutes longer on average or 140% more time in relative terms to complete the task successfully. © 2014 IEEE.},
author_keywords={clone experiment;  clone management;  software clones;  software maintenance},
keywords={Codes (symbols);  Computer programming;  Computer software;  Computer software maintenance;  Defects;  Semantics, Clone management;  Controlled experiment;  Correct solution;  Human interactions;  Retrospective analysis;  Software clones;  Software systems;  Statistical significance, Cloning},
references={Kapser, C., Godfrey, M.W., Loning considered harmful, considered harmful (2006) WCRE, pp. 19-28; Lozano, A., Wermelinger, M., Nuseibeh, B., Evaluating the harmfulness of cloning: A change based experiment (2007) MSR, pp. 18-21; Krinke, J., Is cloned code more stable than non-cloned code (2008) SCAM, pp. 57-66; Harder, J., Göde, N., Cloned code: Stable code (2013) Journal of Software: Evolution and Process, 25 (10), pp. 1063-1088; Carver, J., Chatterji, D., Kraft, N.A., On the need for human-based empirical validation of techniques and tools for code clone analysis (2011) International Workshop on Software Clones; Chatterji, D., Massengill, B., Oslin, J., Carver, J.C., Kraft, N.A., Measuring the efficacy of code clone information: An empirical study (2011) ESEM, pp. 20-29; Harder, J., Tiarks, R., A controlled experiment on software clones (2012) ICPC, pp. 219-228; Chatterji, D., Carver, J.C., Kraft, N.A., Harder, J., Effects of cloned code on software maintainability: A replicated developer study (2013) Working Conference on Reverse Engineering, pp. 112-121; Koschke, R., Survey of research on software clones (2007) Duplication, Redundancy, and Similarity in Software, Ser. Dagstuhl Seminar Proceedings, , Dagstuhl, Germany: IBFI, Schloss Dagstuhl; Roy, C.K., Cordy, J.R., (2007) A Survey on Software Clone Detection Research, , Queens University at Kingston, Ontario, Canada, TR; Balazinska, M., Merlo, E., Dagenais, M., Laguë, B., Kontogiannis, K., Advanced clone-analysis to support object-oriented system refactoring (2000) Working Conference on Reverse Engineering, pp. 98-107; Higo, Y., Kamiya, T., Kusumoto, S., Inoue, K., Refactoring support based on code clone analysis (2004) PROFES, pp. 220-233; De Wit, M., Zaidman, A., Van Deursen, A., Managing code clones using dynamic change tracking and resolution (2009) International Conference on Software Maintenance, pp. 169-178; Toomim, M., Begel, A., Graham, S.L., Managing duplicated code with linked editing (2004) Proc. of the 2004 VL/HCC, pp. 173-180; Nguyen, T.T., Nguyen, H.A., Pham, N.H., Al-Kofahi, J.M., Nguyen, T.N., Clone-aware configuration management (2009) Automated Software Engineering, pp. 123-134; Jedlitschka, A., Pfahl, D., Reporting guidelines for controlled experiments in software engineering (2005) ESEM; Roy, C.K., Cordy, J.R., Koschke, R., Comparison and evaluation of code clone detection techniques and tools: A qualitative approach (2009) Science of Computer Programming, 74 (7), pp. 470-495; Roy, C.K., Zibran, M.F., Koschke, R., The vision of software clone management: Past, present and the future (2014) CSMR-WCRE, 2014 Software Evolution Week, pp. 18-33; Kim, M., Bergman, L., Lau, T., Notkin, D., An ethnographic study of copy and paste programming practices in oopl (2004) International Symposium on Empirical Software Engineering, pp. 83-92; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multi-linguistic token-based code clone detection system for large scale source code (2002) TSE, 28 (7), pp. 654-670; Wohlin, C., Runeson, P., Host, M., Ohlsson, C., Regnell, B., Wesslén, A., (2000) Experimentation in Software Engineering: An Introduction, , Kluver Academic Publishers; Quante, J., Do dynamic object process graphs support program understanding-a controlled experiment (2008) ICPC; Bazrafshan, S., Evolution of near-miss clones (2012) Working Conference on Source Code Analysis and Manipulation, pp. 74-83; Bazrafshan, S., Koschke, R., An empirical study of clone removals (2013) International Conference on Software Maintenance, pp. 50-59; Göde, N., Evolution of type-1 clones (2009) Working Conference on Source Code Analysis and Manipulation, pp. 77-86; Göde, N., Clone removal: Fact or fiction (2010) International Workshop on Software Clones, pp. 33-40. , ACM; Göde, N., Koschke, R., Studying clone evolution using incremental clone detection (2013) Journal of Software: Evolution and Process, 25 (2), pp. 165-192; Tichy, W.F., Should computer scientists experiment more?-16 excuses to avoid experimentation (1997) IEEE Computer, 31, pp. 32-40},
sponsors={},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9780769553047},
language={English},
abbrev_source_title={Proc. - IEEE Int. Working Conf. Source Code Anal. Manip., SCAM},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Koschke2014,
author={Koschke, R. and Göde, N. and Higo, Y.},
title={Preface},
journal={Electronic Communications of the EASST},
year={2014},
volume={63},
page_count={3},
doi={10.14279/tuj.eceasst.63.911.893},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85042916795&doi=10.14279%2ftuj.eceasst.63.911.893&partnerID=40&md5=76496659117724ac54cebc0365022aee},
publisher={Universitatsbibliothek TU Berlin},
issn={18632122},
language={English},
abbrev_source_title={Electron. Commun. EASST},
document_type={Editorial},
source={Scopus},
}

@ARTICLE{Inoue2014389,
author={Inoue, K. and Koschke, R. and Krinke, J.},
title={Special issue on software clones (IWSC'12)},
journal={Science of Computer Programming},
year={2014},
volume={95},
pages={389},
doi={10.1016/j.scico.2014.08.004},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028199662&doi=10.1016%2fj.scico.2014.08.004&partnerID=40&md5=e0a4c3548078d1547effa9021f067a19},
affiliation={Osaka University, Japan; University of Bremen, Germany; University College London, United Kingdom},
author_keywords={Software clones},
publisher={Elsevier B.V.},
issn={01676423},
coden={SCPGD},
language={English},
abbrev_source_title={Sci Comput Program},
document_type={Editorial},
source={Scopus},
}

@CONFERENCE{Koschke2014477,
author={Koschke, R. and Göde, N. and Higo, Y.},
title={International workshop on software clones},
journal={2014 Software Evolution Week - IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering, CSMR-WCRE 2014 - Proceedings},
year={2014},
pages={477},
doi={10.1109/CSMR-WCRE.2014.6747222},
art_number={6747222},
note={cited By 0; Conference of 2014 1st Software Evolution Week - IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering, CSMR-WCRE 2014 ; Conference Date: 3 February 2014 Through 6 February 2014;  Conference Code:103278},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84898461406&doi=10.1109%2fCSMR-WCRE.2014.6747222&partnerID=40&md5=cb48aa388cd2d6f1ceb46899eca055d2},
affiliation={University of Bremen, Bremen, Germany; CQSE GmbH, Munich, Germany; Osaka University, Osaka, Japan},
abstract={Software Clones are identical or similar pieces of code, models or designs. In IWSC2014, we will discuss issues in software clone detection, analysis and management, as well as applications to software engineering contexts that can benefit from knowledge of clones. These are important emerging topics in software engineering research and practice. We will also discuss broader topics on software clones, such as clone detection methods, clone classification, management, and evolution, the role of clones in software system architecture, quality and evolution, clones in plagiarism, licensing, and copyright, and other topics related to similarity in software systems. The format of this workshop will give enough time for intense discussions. © 2014 IEEE.},
keywords={Application programs;  Computer software maintenance;  Reengineering;  Reverse engineering;  Software engineering, Clone classifications;  Clone detection;  Emerging topics;  International workshops;  Software clone detection;  Software clones;  Software systems, Cloning},
sponsors={IEEE Computer Society; Reengineering Forum (REF)},
publisher={IEEE Computer Society},
address={Antwerp},
language={English},
abbrev_source_title={Softw. Evol. Week - IEEE Conf. Softw. Maint., Reengineering, Reverse Eng., CSMR-WCRE - Proc.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Roy201418,
author={Roy, C.K. and Zibran, M.F. and Koschke, R.},
title={The vision of software clone management: Past, present, and future (Keynote paper)},
journal={2014 Software Evolution Week - IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering, CSMR-WCRE 2014 - Proceedings},
year={2014},
pages={18-33},
doi={10.1109/CSMR-WCRE.2014.6747168},
art_number={6747168},
note={cited By 77; Conference of 2014 1st Software Evolution Week - IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering, CSMR-WCRE 2014 ; Conference Date: 3 February 2014 Through 6 February 2014;  Conference Code:103278},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84898402943&doi=10.1109%2fCSMR-WCRE.2014.6747168&partnerID=40&md5=a00a1e54c8ab127aff5da9dbd73feeca},
affiliation={University of Saskatchewan, Canada; University of Bremen, Germany},
abstract={Duplicated code or code clones are a kind of code smell that have both positive and negative impacts on the development and maintenance of software systems. Software clone research in the past mostly focused on the detection and analysis of code clones, while research in recent years extends to the whole spectrum of clone management. In the last decade, three surveys appeared in the literature, which cover the detection, analysis, and evolutionary characteristics of code clones. This paper presents a comprehensive survey on the state of the art in clone management, with in-depth investigation of clone management activities (e.g., tracing, refactoring, cost-benefit analysis) beyond the detection and analysis. This is the first survey on clone management, where we point to the achievements so far, and reveal avenues for further research necessary towards an integrated clone management system. We believe that we have done a good job in surveying the area of clone management and that this work may serve as a roadmap for future research in the area © 2014 IEEE.},
author_keywords={Clone Analysis;  Clone Management;  Code Clones;  Future Research Directions},
keywords={Computer software maintenance;  Cost benefit analysis;  Reengineering;  Research;  Reverse engineering;  Surveys, Clone analysis;  Clone management;  Code clone;  Future research directions;  Refactorings;  Software clones;  Software systems;  State of the art, Cloning},
references={Adar, E., Kim, M., SoftGUESS visualization and exploration of code clones in context (2007) ICSE, pp. 762-766; Al-Omari, F., Keivanloo, I., Roy, C.K., Rilling, J., Detecting clones across microsoft net programming languages (2012) WCRE, pp. 405-414; Asaduzzaman, M., Roy, C.K., Schneider, K.A., VisCad flexible code clone analysis support for niCad (2011) IWSC, pp. 77-78; Bahtiyar, M., (2010) JClone: Syntax Tree Based Clone Detection for Java, , Master's thesis, Linnaeus University; Baker, B., On finding duplication and near-duplication in large software systems (1995) WCRE, pp. 86-95; Bakota, T., Ferenc, R., Gyimothy, T., Clone smells in software evolution (2007) ICSM, pp. 24-33; Balazinska, M., Merlo, E., Dagenais, M., Lague, B., Kontogiannis, K., Measuring clone based reengineering opportunities (1999) METRICS, pp. 292-303; Barbour, L., Khomh, F., Zou, Y., An empirical study of faults in late propagation clone genealogies (2013) Journal of Soft.: Evol. and Proc., Pages, , (in press). doi: 10.1002/smr.1597; Basit, H., Jarzabek, S., Detecting higher-level similarity patterns in programs (2005) SIGSOFT Softw. Eng. Notes, 30, pp. 156-165; Basit, H., Rajapakse, D., Jarzabek, S., An empirical study on limits of clone unification using generics (2005) SEKE, pp. 109-114; Basit, H.A., Rajapakse, D.C., Jarzabek, S., Beyond templates a study of clones in the sTL and some general implications (2005) ICSE, pp. 451-459; Baxter, I., Yahin, A., Moura, L., Sant'anna, M., Bier, L., Clone detection using abstract syntax trees (1998) ICSM, pp. 368-377; Baxter, I.D., Conradt, M., Cordy, J.R., Koschke, R., Software clone management towards industrial application (dagstuhl seminar 12071) (2012) Dagstuhl Reports, 2 (2), pp. 21-57; Bazrafshan, S., Koschke, R., An empirical study of clone removals (2013) ICSM, pp. 50-59; Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) IEEE Trans. on Softw. Engg., 33 (9), pp. 577-591; Bettenburg, N., Shang, W., Ibrahim, W., Adams, B., Zou, Y., Hassan, A., An empirical study on inconsistent changes to code clones at the release level (2012) Science of Comp. Prog., 77 (6), pp. 760-776; Bouktif, S., Antoniol, G., Neteler, M., Merlo, E., A novel approach to optimize clone refactoring activity (2006) GECCO, pp. 1885-1892; Chatterji, D., Carver, J.C., Kraft, N.A., Claims and beliefs about code clones do we agree as a community (2012) A Survey. in IWSC, pp. 15-21; Chatterji, D., Carver, J.C., Kraft, N.A., Cloning the need to understand developer intent (2013) IWSC, pp. 14-15; Chatterji, D., Carver, J.C., Kraft, N.A., Harder, J., Effects of cloned code on software maintainability a replicated developer study (2013) WCRE, pp. 112-121; Chiu, A., Hirtle, D., Beyond clone detection (2007) CS846 Course Project Report, , University of Waterloo; Cordy, J.R., Comprehending reality practical barriers to industrial adoption of software maintenance automation (2003) IWPC, pp. 196-206; Cordy, J.R., Exploring large-scale system similarity using incremental clone detection and live scatterplots (2011) ICPC, pp. 151-160; Cordy, J.R., Live scatterplots (2011) IWSC, pp. 79-80; Cordy, J.R., Dean, T.R., Synytskyy, N., Practical languageindependent detection of near-miss clones (2004) CASCON, pp. 1-12; Dang, Y., Zhang, D., Ge, S., Chu, C., Qiu, Y., Xie, T., XIAO tuning code clones at hands of engineers in practice (2012) ACSAC, pp. 369-378; Davis, I., Godfrey, M., Clone detection by exploiting assembler (2010) IWSC, pp. 77-78. , ACM; De Wit, M., Zaidman, A., Van Deursen, A., Managing code clones using dynamic change tracking and resolution (2009) ICSM, pp. 169-178; Deissenboeck, F., Hummel, B., Jürgens, E., Schätz, B., Wagner, S., Girard, J., Teuchert, S., Clone detection in automotive model-based development (2008) ICSE, pp. 603-612. , ACM; Duala-Ekoko, E., Robillard, M., Clone region descriptors repre-senting and tracking duplication in source code (2010) ACM Trans. Softw. Eng. Methodol, 20, pp. 31-331; Dubinsky, Y., Rubin, J., Berger, T., Duszynski, S., Becker, M., Czarnecki, K., An exploratory study of cloning in industrial software product lines (2013) CSMR, pp. 25-34; Ducasse, S., Rieger, M., Demeyer, S., A language independent approach for detecting duplicated code (1999) ICSM, pp. 109-118; Falke, R., Frenzel, P., Koschke, R., Empirical evaluation of clone detection using syntax suffix trees (2008) Empirical Software Engineering, 13, pp. 601-643; Forbes, C., Keivanloo, I., Rilling, J., Doppel-Code a clone visualization tool for prioritizing global and local clone impacts (2012) COMPSAC, pp. 366-367; Fowler, M., Beck, K., Brant, J., Opdyke, W., Roberts, D., (1999) Refactoring: Improving the Design of Existing Code, , Addison Wesley; Fukushima, Y., Kula, R., Kawaguchi, S., Fushida, K., Nagura, M., Iida, H., Code clone graph metrics for detecting diffused code clones (2009) APSEC, pp. 373-380; Giesecke, S., Generic modelling of code clones (2007) DRSS, pp. 1-23; Giesecke, S., (2011) Dupman-Eclipse Duplication Management Framework, , http://sourceforge.net/projects/dupman/, last access: Dec; Göde, N., Koschke, R., Frequency and risks of changes to clones (2011) ICSE, pp. 311-320; Göde, N., Koschke, R., Studying clone evolution using incremental clone detection (2013) J. of Soft.: Evol. and Proc., 25 (2), pp. 165-192; Graves, T.L., Karr, A.F., Marron, J.S., Siy, H., Predicting fault incidence using software change history (2000) IEEE Tran. on Soft. Engg., 26 (7), pp. 653-661; Harder, J., The limits of clone model standardization (2013) IWSC, pp. 10-11; Harder, J., Göde, N., Quo vadis, clone management (2010) IWSC, pp. 85-86; Harder, J., Göde, N., Efficiently handling clone data rCF and cyclone (2011) IWSC, pp. 81-82. , ACM; Harder, J., Göde, N., Cloned code stable code (2013) Journal of Soft.: Evol. and Proc., 25 (10), pp. 1063-1088; Hermans, F., Sedee, B., Pinzger, M., Van Deursen, A., Data clone detection and visualization in spreadsheets (2013) ICSE, pp. 292-301; Higo, Y., Kusumoto, S., Enhancing quality of code clone detection with program dependency graph (2009) WCRE, pp. 315-316; Higo, Y., Kamiya, T., Kusumoto, S., Inoue, K., Refactoring support based on code clone analysis (2004) PROFES, pp. 220-233; Higo, Y., Yasushi, U., Nishino, M., Kusumoto, S., Incremental code clone detection a pDG-based approach (2011) WCRE, pp. 3-12; Hotta, K., Sano, Y., Higo, Y., Kusumoto, S., Is duplicate code more frequently modified than non-duplicate code in software evolution? An empirical study on open source software (2010) IWPSE-EVOL, pp. 73-82; Hou, D., Jablonski, P., Jacob, F., CnP towards an environment for the proactive management of copy-and-paste programming (2009) ICPC, pp. 238-242; Hou, D., Jacob, F., Jablonski, P., Exploring the design space of proactive tool support for copy-and-paste programming (2009) CASCON, pp. 188-202; Hummel, B., Juergens, E., Heinemann, L., Conradt, M., Index-based code clone detection incremental, distributed, scalable (2010) ICSM, pp. 1-9; Jablonski, P., Hou, D., CReN a tool for tracking copy-and-paste code clones and renaming identifiers consistently in the iDE (2007) ETX, pp. 16-20; Jarzabek, S., Li, S., Unifying clones with a generative programming technique a case study (2006) Journal of Software: Evolution and Process, 18 (4), pp. 267-292; Jiang, L., Misherghi, G., Su, Z., Glondu, S., DECKARD scalable and accurate tree-based detection of code clones (2007) ICSE, pp. 96-105; Jiang, Z., Hassan, A., A framework for studying clones in large software systems (2007) SCAM, pp. 203-212; Jiang, Z., Hassan, A., Holt, R., Visualizing clone cohesion and coupling (2006) APSEC, pp. 467-476; Johnson, J., Substring matching for clone detection and change tracking (1994) ICSM, pp. 120-126; Johnson, J., Visualizing textual redundancy in legacy source (1994) CASCON, pp. 32-41. , IBM Press; Johnson, J., Navigating the textual redundancy web in legacy source (1996) CASCON, pp. 16-25. , IBM Press; Juergens, E., Research in cloning beyond code a first roadmap (2011) IWSC, pp. 67-68; Juergens, E., Deissenboeck, F., How much is a clone (2010) SQM; Juergens, E., Deissenboeck, F., Hummel, B., CloneDetective-A workbench for clone detection research (2009) ICSE, pp. 603-606; Juergens, E., Deissenboeck, F., Feilkas, M., Hummel, B., Schaetz, B., Wagner, S., Domann, C., Streit, J., Can clone detection support quality assessments of requirements specifications (2010) ICSE, pp. 79-88; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder a multilinguistic token-based code clone detection system for large scale source code (2002) IEEE Trans. Softw. Eng., 28 (7), pp. 654-670; Kapser, C., (2009) Toward An Understanding of Software Code Cloning As A Development Practice, , PhD thesis, University of Waterloo; Kapser, C., Godfrey, M., Cloning considered harmful" considered harmful patterns of cloning in software (2008) Empirical Software Engineering, 13, pp. 645-692; Kapser, C., Godfrey, M.W., Aiding comprehension of cloning through categorization (2004) IWPSE, pp. 85-94; Kapser, C., Godfrey, M.W., Improved tool support for the investigation of duplication in software (2005) ICSM, pp. 305-314; Kapser, C., Godfrey, M.W., Supporting the analysis of clones in software systems a case study (2006) J. Softw. Maint. Evol., 18, pp. 61-82; Kapser, C., Harder, J., Baxter, I., A common conceptual model for clone detection results (2012) IWSC, pp. 72-73; Kawaguchi, S., Yamashina, T., Uwano, H., Fushida, K., Kamei, Y., Nagura, M., Iida, H., SHINOBI a tool for automatic code clone detection in the iDE (2009) WCRE, pp. 313-314; Keivanloo, I., Roy, C.K., Rilling, J., SeByte scalable clone and similarity search for bytecode (2013) Science of Comp. Prog, , http://dx.doi.org/10.1016/j.scico.2013.10.006, (in press). Doi; Kerievsky, J., (2004) Refactoring to Patterns, , Addison Wesley; Kim, H., Jung, Y., Kim, S., Yi, K., MeCC memory comparison-based clone detector (2011) ICSE, pp. 301-310; Kim, M., Sazawal, V., Notkin, D., Murphy, G.C., An empirical study of code clone genealogies (2005) FSE, pp. 187-196; Komondoor, R., Horwitz, S., Using slicing to identify duplication in source code (2001) SAS, pp. 40-56; Kontogiannis, K., Evaluation experiments on the detection of programming patterns using software metrics (1997) WCRE, pp. 44-54; Koschke, R., Survey of research on software clones (2006) DRSS, pp. 1-24; Krinke, J., Is cloned code more stable than non-cloned code (2008) SCAM, pp. 57-66; Krishnan, G.P., Tsantalis, N., Unification and refactoring of clones (2014) CSMR-18/WCRE-21 Software Evolution Week, p. 10. , (to appear); Lague, B., Proulx, D., Mayrand, J., Merlo, E., Hudepohl, J., Assessing the benefits of incorporating function clone detection in a development process (1997) ICSM, pp. 314-321; Lee, S., Jeong, I., SDD high performance code clone detection system for large scale source code (2005) OOPSLA, pp. 140-141; Lee, S., Bae, G., Chae, H., Bae, D., Kwon, Y., Automated scheduling for clone-based refactoring using a competent ga (2010) Softw. Pract. Exper., 41 (5), pp. 521-550; Liu, H., Ma, Z., Zhang, L., Shao, W., Detecting duplications in sequence diagrams based on suffix trees (2006) APSEC, pp. 269-276; Livieri, S., Higo, Y., Matushita, M., Inoue, K., Very-large scale code clone analysis and visualization of open source programs using distributed cCFinder: D-CCFinder (2007) ICSE, pp. 106-115; Mayrand, J., Lague, B., Hudepohl, J., Evaluating the benefits of clone detection in the software maintenance activities in large scale systems (1996) WESS; Mayrand, J., Leblanc, C., Merlo, E., Experiment on the automatic detection of function clones in a software system using metrics (1996) ICSM, pp. 244-253; Mondal, M., Roy, C.K., Rahman, M., Saha, R.K., Krinke, J., Schneider, K.A., Comparative stability of cloned and non-cloned code an empirical study (2012) ACM-SAC, pp. 1227-1234; Mondal, M., Roy, C.K., Schneider, K.A., An empirical study on clone stability (2012) ACM Applied Comp. Review, 12 (3), pp. 20-36; Mondal, M., Roy, C.K., Schneider, K.A., An insight into the dispersion of changes in cloned and non-cloned code a genealogy based empirical study (2013) Sci. of Comp. Prog, , (in press); Mondal, M., Roy, C.K., Schneider, K.A., Automatic ranking of clones for refactoring through mining association rules (2014) CSMR-18/WCRE-21 Software Evolution Week, p. 10. , (to appear); Nasehi, S., Sotudeh, G., Gomrokchi, M., Source code enhancement using reduction of duplicated code (2007) IASTED, pp. 192-197; Nguyen, H., Nguyen, T., Pham, N., Al-Kofahi, J., Nguyen, T., Clone management for evolving software (2011) IEEE Trans. on Softw. Engg., 1 (1), pp. 1-19; Nguyen, T., Nguyen, H., Pham, N., Al-Kofahi, J., Nguyen, T., Cleman comprehensive clone group evolution management (2008) ASE, pp. 451-454; Nguyen, T., Nguyen, H., Al-Kofahi, J., Pham, N., Nguyen, T., Scalable and incremental clone detection for evolving software (2009) ICSM, pp. 491-494; Nguyen, T., Nguyen, H., Pham, N., Al-Kofahi, J., Nguyen, T., Cloneaware configuration management (2009) ASE, pp. 123-134; Pate, J., Tairas, R., Kraft, N., Clone evolution a systematic review (2011) Journal of Soft.: Evol. and Proc., pp. 1-23; Pham, N., Nguyen, H., Nguyen, T., Al-Kofahi, J., Nguyen, T., Complete and accurate clone detection in graph-based models (2009) ICSE, pp. 276-286; Rahman, M.S., Aryani, A., Roy, C.K., Perin, F., On the relationships between domain-based coupling and code clones an exploratory study (2013) ICSE, pp. 1265-1268; Rattan, D., Bhatia, R., Singh, M., Software clone detection a systematic review (2013) Infor. and Soft. Tech., 55 (7), pp. 1165-1199; Rieger, M., Ducasse, S., Lanza, M., Insights into system-wide code duplication (2004) WCRE, pp. 100-109; Roy, C.K., Cordy, J.R., A survey on software clone detection research (2007) Tech Report TR 2007-541, , Queens University; Roy, C.K., Cordy, J.R., NICAD accurate detection of near-miss intentional clones using flexible pretty-printing and code normalization (2008) ICPC, pp. 172-181; Roy, C.K., Cordy, J.R., A mutation/injection-based automatic framework for evaluating code clone detection tools (2009) ICSTW, pp. 157-166; Roy, C.K., Cordy, J.R., Koschke, R., Comparison and evaluation of code clone detection techniques and tools a qualitative approach (2009) Sci. Comput. Program., 74, pp. 470-495; Saha, R.K., Asaduzzaman, M., Zibran, M.F., Roy, C.K., Schneider, K.A., Evaluating code clone genealogies at release level an empirical study (2010) SCAM, pp. 87-96; Saha, R.K., Roy, C.K., Schneider, K.A., Visualizing the evolution of code clones (2011) IWSC, pp. 71-72. , ACM; Saha, R.K., Roy, C.K., Schneider, K.A., An automatic framework for extracting and classifying near-miss clone genealogies (2011) ICSM, pp. 293-302; Saha, R.K., Roy, C.K., Schneider, K.A., Gcad a near-miss clone genealogy extractor to support clone evolution analysis (2013) ICSM, pp. 488-491; Saha, R.K., Roy, C.K., Schneider, K.A., Perry, D.E., Understanding the evolution of type-3 clones an exploratory study (2013) MSR, pp. 139-148; Santone, A., Clone detection through process algebras and java bytecode (2011) IWSC, pp. 73-74. , ACM; Schulze, S., Kuhlemann, M., Advanced analysis for code clone removal (2009) WSR, pp. 1-2; Schulze, S., Kuhlemann, M., Rosenmüller, M., Towards a refactoring guideline using code clone classification (2008) WRT, pp. 61-64; Schwarz, N., Lungu, M., Robbes, R., On how often code is cloned across repositories (2012) ICSE-NIER, pp. 1289-1292; Störrle, H., Towards clone detection in uML domain models (2010) ECSA, pp. 285-293; Svajlenko, J., Keivanloo, I., Roy, C.K., Scaling classical clone detection tools for ultra-large datasets an exploratory study (2013) IWSC, pp. 16-22; Svajlenko, J., Roy, C.K., Cordy, J.R., A mutation analysis based benchmarking framework for clone detectors (2013) IWSC, pp. 8-9; Tairas, R., (2013) Code Clones Literature, , http://students.cis.uab.edu/tairasr/clones/literature/, (last access: Dec.); Tairas, R., Gray, J., Phoenix-based clone detection using suffix trees (2006) ACM-SE, pp. 679-684; Tairas, R., Gray, J., Get to know your clones with ceDAR (2009) OOPSLA, pp. 817-818; Tairas, R., Gray, J., Increasing clone maintenance support by unifying clone detection and refactoring activities (2012) Info. &Soft. Tech., 54 (12), pp. 1297-1307; Tairas, R., Gray, J., Baxter, I., Visualizing clone detection results (2007) ASE, pp. 549-550. , ACM; Toomim, M., Begel, A., Graham, S., Managing duplicated code with linked editing (2004) VLHCC, pp. 173-180; Uddin, M., Roy, C.K., Schneider, K.A., Hindle, A., On the effectiveness of simhash for detecting near-miss clones in large scale software systems (2011) WCRE, pp. 13-22; Ueda, Y., Kamiya, T., Kusumoto, S., Inoue, K., Gemini maintenance support environment based on code clone analysis (2002) METRICS, pp. 67-76. , IEEE Computer Society Press; Venkatasubramanyam, R.D., Gupta, S., Singh, H.K., Prioritizing code clone detection results for clone management (2013) IWSC, pp. 30-36; Wang, T., Harman, M., Jia, Y., Krinke, J., Searching for better configurations a rigorous approach to clone evaluation (2013) ESEC/SIGSOFT FSE, pp. 455-465; Wang, X., Dang, Y., Zhang, L., Zhang, D., Lan, E., Mei, H., Can i clone this piece of code here (2012) ASE, pp. 170-179; Weckerle, V., (2008) CPC: An Eclipse Framework for Automated Clone Life Cycle Tracking and Update Anomaly Detection, , Master's thesis, Freie Universität Berlin, Germany; Xie, S., Khomh, F., Zou, Y., An empirical study of the faultproneness of clone mutation and clone migration (2013) MSR, pp. 149-158; Xie, S., Khomh, F., Zou, Y., Keivanloo, I., An empirical study on the fault-proneness of clone migration in clone genealogies (2014) CSMR-18/WCRE-21 Software Evolution Week, p. 10. , (to appear); Xing, Z., Xue, Y., Jarzabek, S., Distilling useful clones by contextual differencing (2013) WCRE, pp. 102-111; Yamanaka, Y., Choi, E., Yoshida, N., Inoue, K., Sano, T.I., Applying clone change notification system into an industrial development process (2013) ICPC, pp. 199-206; Yoshida, N., Higo, Y., Kamiya, T., Kusumoto, S., Inoue, K., On refactoring support based on code clone dependency relation (2005) METRICS, pp. 16-25; Zhang, G., Peng, X., Xing, Z., Zhao, W., Cloning practices why developers clone and what can be changed (2012) ICSM, pp. 285-294; Zhang, G., Peng, X., Xing, Z., Jiang, S., Wang, H., Zhao, W., Towards contextual and on-demand code clone management by continuous monitoring (2013) ASE, pp. 497-507; Zhang, Y., Basit, H., Jarzabek, S., Anh, D., Low, M., Query-based filtering and graphical view generation for clone analysis (2008) ICSM, pp. 376-385; Zibran, M.F., Roy, C.K., Towards flexible code clone detection, management, and refactoring in iDE (2011) IWSC, pp. 75-76; Zibran, M.F., Roy, C.K., A constraint programming approach to conflict-aware optimal scheduling of prioritized code clone refactoring (2011) SCAM, pp. 105-114; Zibran, M.F., Roy, C.K., Conflict-aware optimal scheduling of code clone refactoring a constraint programming approach (2011) ICPC, pp. 266-269; Zibran, M.F., Roy, C.K., IDE-based real-time focused search for near-miss clones (2012) ACM-SAC, pp. 1235-1242; Zibran, M.F., Roy, C.K., Conflict-aware optimal scheduling of prioritized code clone refactoring (2013) IET Software, 7 (3); Zibran, M.F., Saha, R.K., Asaduzzaman, M., Roy, C.K., Analyzing and forecasting near-miss clones in evolving software an empirical study (2011) ICECCS, pp. 295-304; Zibran, M.F., Saha, R.K., Roy, C.K., Schneider, K.A., Evaluating the conventional wisdom in clone removal a genealogy-based empirical study (2013) SAC, pp. 1123-1130},
sponsors={IEEE Computer Society; Reengineering Forum (REF)},
publisher={IEEE Computer Society},
address={Antwerp},
language={English},
abbrev_source_title={Softw. Evol. Week - IEEE Conf. Softw. Maint., Reengineering, Reverse Eng., CSMR-WCRE - Proc.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Bazrafshan201350,
author={Bazrafshan, S. and Koschke, R.},
title={An empirical study of clone removals},
journal={IEEE International Conference on Software Maintenance, ICSM},
year={2013},
pages={50-59},
doi={10.1109/ICSM.2013.16},
art_number={6676876},
note={cited By 8; Conference of 29th IEEE International Conference on Software Maintenance, ICSM 2013 ; Conference Date: 22 September 2013 Through 28 September 2013;  Conference Code:101824},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84891701161&doi=10.1109%2fICSM.2013.16&partnerID=40&md5=7756418b297bbdeaf4369fcf06d5bbae},
affiliation={Software Engineering Group, University of Bremen, Germany},
abstract={It is often claimed that duplicated source code is a threat to the maintainability of a software system and that developers should manage code duplication. A previous study analyzed the evolution of four software systems and found a remarkable discrepancy between code clones detected by a state-of-the-art clone detector and those deliberately removed by developers as the scope of the clones hardly ever matched. However, the results are based on a relatively small amount of data and need to be validated by a more extensive analysis. In this paper, we present an extension of this study by analyzing deliberate as well as accidental removals of code duplication in the evolution of eleven systems. Based on our findings, we could confirm the results of the previous study. Beyond that we found that accidental removals of cloned code occur slightly more often than deliberate removals and that many clone removals were in fact incomplete. © 2013 IEEE.},
author_keywords={Clone evolution;  Clone removal;  Software maintenance},
keywords={Clone removals;  Code clone;  Code duplication;  Empirical studies;  Software systems;  Source codes, Computer software;  Computer software maintenance, Cloning},
references={Antoniol, G., Villano, U., Merlo, E., Di Penta, M., Analyzing cloning evolution in the Linux kernel (2002) Information and Software Technology, 44 (13), pp. 755-765; Aversano, L., Cerulo, L., Di Penta, M., How clones are maintained: An empirical study (2007) Proc. of the 11th CSMR, pp. 81-90. , IEEE; Bakota, T., Ferenc, R., Gyimothy, T., Clone smells in software evolution (2007) Proc. of the 23rd ICSM, pp. 24-33. , IEEE; Balazinska, M., Merlo, E., Dagenais, M., Laguë, B., Kontogiannis, K., Advanced clone-analysis to support object-oriented system refactoring (2000) Proc. of the 7th WCRE, pp. 98-107. , IEEE; Barbour, L., Khomh, F., Zou, Y., Late propagation in software clones (2011) Proc. of the 27th ICSM, pp. 273-282. , IEEE; Bazrafshan, S., Evolution of near-miss clones (2012) Proc. of the 12th SCAM, pp. 74-83. , IEEE; Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) IEEE Transactions on Software Engineering, 33 (9), pp. 577-591. , Sept; Bettenburg, N., Shang, W., Ibrahim, W., Adams, B., Zou, Y., Hassan, A.E., An empirical study on inconsistent changes to code clones at release level (2009) Proc. of the 27th ICSM, pp. 85-94. , IEEE; De Wit, M., Zaidman, A., Van Deursen, A., Managing code clones using dynamic change tracking and resolution (2009) Proc. of the 25th ICSM, pp. 169-178. , IEEE; Göde, N., Evolution of type-1 clones (2009) Proc. of the 9th SCAM, pp. 77-86. , IEEE; Göde, N., Clone removal: Fact or fiction? (2010) Proc. of the 4th IWSC, pp. 33-40. , ACM; Göde, N., Harder, J., Clone stability (2011) Proc. of the 15th CSMR, pp. 65-74. , IEEE; Göde, N., Harder, J., Oops!... I changed it again (2011) Proc. of the 5th IWSC, pp. 14-20. , ACM; Göde, N., Koschke, R., Frequency and risks of changes to clones (2011) Proc. of the 33rd ICSE, pp. 311-320. , ACM; Göde, N., Koschke, R., Studying clone evolution using incremental clone detection (2013) Journal of Software: Evolution and Process, 25 (2), pp. 165-192; Higo, Y., Kamiya, T., Kusumoto, S., Inoue, K., Refactoring support based on code clone analysis (2004) PROFES, pp. 220-233; Hui Mui, H., (2010) Studying Late Propagations Using Software Repository Mining, , Masters thesis, Delft University of Technology; Jarzabek, S., Li, S., Unifying clones with a generative programming technique: A case study (2006) J. Softw. Maint. Evol, 18 (4), pp. 267-292; Kapser, C., Godfrey, M.W., Cloning considered harmful (2006) Proc. of the 13th WCRE, pp. 19-28. , considered harmful. IEEE; Kim, M., Bergman, L., Lau, T., Notkin, D., An ethnographic study of copy and paste programming practices in OOPL (2004) ISESE, , IEEE; Kim, M., Sazawal, V., Notkin, D., Murphy, G., An empirical study of code clone genealogies (2005) ESEC/FSE, pp. 187-196. , ACM; Koschke, R., Survey of research on software clones (2007) Duplication, Redundancy, and Similarity in Software, Number 06301 in Dagstuhl Seminar Proceedings, , Dagstuhl, Germany, IBFI, Schloss Dagstuhl; Krinke, J., A study of consistent and inconsistent changes to code clones (2007) Proc. of the 14th WCRE, pp. 170-178. , IEEE; Krinke, J., Is cloned code more stable than non-cloned code? (2008) Proc. of the 8th SCAM, pp. 57-66. , IEEE; Latoza, T.D., Venolia, G., Deline, R., Maintaining mental models: A study of developer work habits (2006) Proc. of the 28th ICSE, , ACM; Livieri, S., Higo, Y., Matsushita, M., Inoue, K., Analysis of the Linux kernel evolution using code clone coverage (2007) Proc. of the 4th MSR, pp. 22-25. , IEEE; Lozano, A., Wermelinger, M., Nuseibeh, B., Evaluating the harmfulness of cloning: A change based experiment (2007) Proc. of the 4th MSR, pp. 18-21. , IEEE; Mondal, M., Roy, C.K., Rahman, M.S., Saha, R.K., Krinke, J., Schneider, K.A., Comparative stability of cloned and non-cloned code: An empirical study (2012) Proc. of the 27th SAC, , In; Nguyen, T.T., Nguyen, H.A., Pham, N.H., Al-Kofahi, J.M., Nguyen, T.N., Clone-aware configuration management (2009) Proc. of the 24th ASE, pp. 123-134. , IEEE; Roy, C.K., Cordy, J.R., (2007) A Survey on Software Clone Detection Research, , Technical report, Queens University at Kingston, Ontario, Canada; Saha, R.K., Asaduzzaman, M., Zibran, M.F., Roy, C.K., Schneider, K.A., Evaluating code clone genealogies at release level: An empirical study (2010) Proc. of the 10th SCAM, pp. 87-96. , IEEE; Saha, R.K., Roy, C.K., Schneider, K.A., An automatic framework for extracting and classifying near-miss clone genealogies (2011) Proc. of the 27th ICSM, pp. 293-302. , ACM; Thummalapenta, S., Cerulo, L., Aversano, L., Di Penta, M., An empirical study on the maintenance of source code clones (2009) ESE, 15 (1), pp. 1-34; Toomim, M., Begel, A., Graham, S.L., Managing duplicated code with linked editing (2004) Proc. of the 2004 VL/HCC, pp. 173-180. , IEEE; Volanschi, N., Safe clone-based refactoring through stereotype identification and iso-generation (2012) Proc. of the 6th IWSC, pp. 50-56. , IEEE},
correspondence_address1={Software Engineering Group, University of BremenGermany},
sponsors={IEEE Computer Society; Technical Council on Software Engineering; IEEE},
address={Eindhoven},
language={English},
abbrev_source_title={IEEE Int. Conf. Softw. Maint. ICSM},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koschke20131527,
author={Koschke, R. and Juergens, E. and Rilling, J.},
title={7th international workshop on software clones (IWSC 2013)},
journal={Proceedings - International Conference on Software Engineering},
year={2013},
pages={1527-1528},
doi={10.1109/ICSE.2013.6606770},
art_number={6606770},
note={cited By 3; Conference of 2013 35th International Conference on Software Engineering, ICSE 2013 ; Conference Date: 18 May 2013 Through 26 May 2013;  Conference Code:100317},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84886446365&doi=10.1109%2fICSE.2013.6606770&partnerID=40&md5=7aa7713c873371a3d1f477c9150f5b36},
affiliation={University of Bremen, Bremen, Germany; CQSE GmbH, Muenchen, Germany; Concordia University, Montreal, Canada},
abstract={Software Clones are identical or similar pieces of code, models or designs. In this, the 7th International Workshop on Software Clones (IWSC), we will discuss issues in software clone detection, analysis and management, as well as applications to software engineering contexts that can benefit from knowledge of clones. These are important emerging topics in software engineering research and practice. Special emphasis will be given this time to clone management in practice, emphasizing use cases and experiences. We will also discuss broader topics on software clones, such as clone detection methods, clone classification, management, and evolution, the role of clones in software system architecture, quality and evolution, clones in plagiarism, licensing, and copyright, and other topics related to similarity in software systems. The format of this workshop will give enough time for intense discussions. © 2013 IEEE.},
keywords={Clone classifications;  Clone detection;  Clone management;  Emerging topics;  International workshops;  Software clone detection;  Software clones;  Software systems, Application programs;  Software engineering, Cloning},
correspondence_address1={University of Bremen, Bremen, Germany},
sponsors={Association for Computing Machinery (ACM); SIGSOFT; IEEE Computer Society; Technical Council on Software Engineering (TCSE)},
address={San Francisco, CA},
issn={02705257},
isbn={9781467330763},
coden={PCSED},
language={English},
abbrev_source_title={Proc Int Conf Software Eng},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Koschke2013601,
author={Koschke, R.},
title={Incremental reflexion analysis},
journal={Journal of software: Evolution and Process},
year={2013},
volume={25},
number={6},
pages={601-637},
doi={10.1002/smr.542},
note={cited By 4},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883653787&doi=10.1002%2fsmr.542&partnerID=40&md5=8686b446b84ac6239f205c2b794d183f},
affiliation={University of Bremen, Bremen, Germany},
abstract={Architecture conformance checking is implemented in many commercial and research tools. These tools typically implement the reflexion analysis originally proposed by Murphy, Notkin, and Sullivan. This analysis allows for structural validation of an architecture model against a source model connected by a mapping from source entities onto architecture entities. Given this mapping, the reflexion analysis computes the discrepancies between the architecture model and source model automatically. The mapping process is usually highly interactive and the most time-consuming activity in the reflexion analysis. In current tools, the reflexion analysis must be repeated completely whenever the underlying source or architecture models or the mapping changes. In large systems, the recomputation can hinder interactive use as users expect an immediate response to their changes. This paper describes an incremental reflexion analysis that does not require a complete repetition of the reflexion analysis. Instead, it repeats the analysis only for those parts that are actually influenced by a change. The incremental reflexion analysis is evaluated on large real-world systems. Copyright © 2011 John Wiley & Sons, Ltd.},
author_keywords={Architecture conformance checking;  Architecture reconstruction;  Incremental reflexion analysis;  Software maintenance},
keywords={Architecture modeling;  Architecture models;  Architecture reconstruction;  Conformance checking;  Incremental reflexion analysis;  Mapping process;  Real-world system;  Source modeling, Computer software maintenance;  Tools, Mapping},
references={Murphy, G.C., Notkin, D., Reengineering with reflexion models: A case study (1997) IEEE Computer, 30 (8), pp. 29-36; (1998) Nikkei Computer, 19, pp. 161-169. , Reprinted in January; Murphy, G.C., Notkin, D., Sullivan, K., Software reflexion models: Bridging the gap between source and high-level models (1995) ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 18-28. , ACM Press: New York; Koschke, R., Incremental reflexion analysis (2010) IEEE Conference on Software Maintenance and Reengineering, pp. 1-10. , IEEE Press: Silver Spring, MD; Koschke, R., (1999) Atomic Architectural Component Recovery for Program Understanding and Evolution, , PhD Thesis, Institute of Software Technology, University of Stuttgart, Germany; Koschke, R., Frenzel, P., Breu, A.P., Angstmann, K., Extending the reflexion method for consolidating software variants into product lines (2009) Software Quality Journal, 17 (4), pp. 331-366; Koschke, R., Architecture reconstruction (2009) Software Engineering: International Summer Schools, pp. 140-173. , De Lucia A, Ferrucci F (eds.). Springer: Berlin; Ducasse, S., Pollet, D., Software architecture reconstruction: A process-oriented taxonomy (2009) IEEE Transactions on Software Engineering, 35 (4), pp. 573-591; Van Deursen, A., Hofmeister, C., Koschke, R., Moonen, L., Riva, C., Symphony: View-driven software architecture reconstruction (2004) IEEE/IFIP Working Conference on Software Architecture, pp. 122-132. , IEEE Press: Silver Spring, MD; Guo, G.Y., Atlee, J.M., Kazman, R., A software architecture reconstruction method (1999) IEEE/IFIP Working Conference on Software Architecture, pp. 15-33. , Kluwer Academic Publishers: Dordrecht; Knodel, J., (2002) Process Models for the Reconstruction of Software Architecture Views, , Diploma Thesis No. 1987, University of Stuttgart, Computer Science, July; Knodel, J., Lindvall, M., Muthig, D., Static evaluation of software architectures - A short summary (2005) IEEE/IFIP Working Conference on Software Architecture, pp. 237-238. , IEEE Computer Society Press, DOI: 10.1109/WICSA.2005.68; Knodel, J., Lindvall, M., Muthig, D., Naab, M., Static evaluation of software architectures (2006) IEEE Conference on Software Maintenance and Reengineering, pp. 279-294. , IEEE Computer Society Press, DOI: 10.1109/CSMR.2006.53; Knodel, J., Mende, T., Leszak, M., Guder, F., Meier, G., Ruckert, C., Schitter, C., Arque: Architecture-centric quality engineering (2009) IEEE Conference on Software Maintenance and Reengineering, pp. 289-292. , IEEE Computer Society Press, DOI: 10.1109/CSMR.2009.21; DeRemer, F., Kron, H., Programming-in-the-large versus programming-in-the-small (1976) IEEE Transactions on Software Engineering, SE-2 (2), pp. 80-86; Holt, R.C., Binary relational algebra applied to software architecture (1996) CSRI Technical Report 345, , Computer Systems Research Institute, University of Toronto, June; Holt, R.C., (2005) Permission Theory for Software Architecture Plus Phantom Architectures, , Technical Report, School of Computer Science, University of Waterloo, September; Malton, A.J., Holt, R.C., Boxology of NBA and TA: A basis for understanding software architecture (2005) IEEE Working Conference on Reverse Engineering, , IEEE Press: Silver Spring, MD; Van Ommering, R., Krikhaar, R., Feijs, L., Languages for formalizing, visualizing and verifying software architectures (2001) Computer Languages, 27 (1-3), pp. 3-18. , DOI 10.1016/S0096-0551(01)00013-3, PII S0096055101000133; Mancoridis, S., (1995) Controlling the Interactions of Architectural Design Components Using Scoping Rules, , PhD Thesis, Department of Computer Science, University of Toronto, December; Feijs, L., Krikhaar, R., Van Ommering, R., A relational approach to support software architecture analysis (1998) Software - Practice and Experience, 28 (4), pp. 371-400; Eichberg, M., Kloppenburg, S., Klose, K., Mezini, M., Defining and continuous checking of structural program dependencies (2008) International Conference on Software Engineering, pp. 391-400. , ACM Press: New York; Tarski, A., On the calculus of relations (1941) Journal of Symbolic Logic, 6 (3), pp. 73-89; Van Gurp, J., Brinkkemper, S., Bosch, J., Design preservation over subsequent releases of a software product: A case study of Baan ERP (2005) Journal of Software Maintenance and Evolution, 17 (4), pp. 277-306. , DOI 10.1002/smr.313; Mattsson, A., Lundell, B., Lings, B., Fitzgerald, B., Experiences from representing software architecture in a large industrial project using model driven development (2007) Proceedings of the 29th International Conference on Software Engineering Workshops, Workshop SHAring and Reusing Architectural Knowledge (SHARK-ADI), p. 6. , ACM Press: New York; Tvedt, R., Costa, P., Lindvall, M., Does the code match the design? A process for architecture evaluation (2002) IEEE International Conference on Software Maintenance, pp. 393-403. , IEEE Press: Silver Spring, MD; Feilkas, M., Ratiu, D., Juergens, E., The loss of architectural knowledge during system evolution: An industrial case study (2009) International Conference on Program Comprehension, , IEEE Press: Silver Spring, MD; Van Gurp, J., Bosch, J., Design erosion: Problems and causes (2002) Journal of Systems and Software, 61 (2), pp. 105-119. , PII S0164121201001522; Knodel, J., Muthig, D., Haury, U., Meier, G., Architecture compliance checking - Experiences from successful technology transfer to industry (2008) IEEE Conference on Software Maintenance and Reengineering, pp. 43-52. , IEEE Press: Silver Spring, MD, DOI: 10.1109/CSMR.2008.4493299; Knodel, J., Muthig, D., Rost, D., Constructive architecture compliance checking - An experiment on support by live feedback (2008) IEEE International Conference on Software Maintenance, pp. 287-296. , IEEE Press: Silver Spring, MD, DOI: 10.1109/ICSM.2008.4658077; Knodel, J., Popescu, D., A comparison of static architecture compliance checking approaches (2007) IEEE/IFIP Working Conference on Software Architecture, pp. 12-12. , IEEE Computer Society Press, DOI: 10.1109 /WICSA.2007.1; Murphy, G.C., Notkin, D., Sullivan, K.J., Software reflexion models: Bridging the gap between design and implementation (2001) IEEE Transactions on Software Engineering, 27 (4), pp. 364-380. , DOI 10.1109/32.917525; Bischofberger, W., Kühl, J., Löffler, S., Sotograph - A pragmatic approach to source code architecture conformance checking (2004) Lecture Notes in Computer Science, 3047 (2004), pp. 1-9. , Software Architecture Springer: Berlin/Heidelberg; Raza, A., Vogel, G., Plödereder, E., Bauhaus - A tool suite for program analysis and reverse engineering (2006) Lecture Notes in Computer Science, 4006, pp. 71-82. , Reliable Software Technologies, Ada-Europe Springer: Berlin; Koschke, R., Zehn Jahre, W.S.R., Bauhaus, Z.J., Workshop Software Reengineering (2008) GI Lecture Notes for Informatics, pp. 51-66. , Gimnich R, Kaiser U, Quante J, Winter A (eds.). IEEE Computer Society Press; Koschke, R., Simon, D., Hierarchical reflexion models (2003) IEEE Working Conference on Reverse Engineering, pp. 36-45. , IEEE Press: Silver Spring, MD; Frenzel, P., Koschke, R., Breu, A.P.J., Angstmann, K., Extending the reflection method for consolidating software variants into product lines (2007) IEEE Working Conference on Reverse Engineering, pp. 160-169. , IEEE Press: Silver Spring, MD; Buckley, J., LeGear, A.P., Exton, C., Cadogan, R., Johnston, T., Looby, B., Koschke, R., Encapsulating targeted component abstractions using software Reflexion Modelling (2008) Journal of Software Maintenance and Evolution, 20 (2), pp. 107-134. , DOI 10.1002/smr.364; Christl, A., Koschke, R., Storey, M.A., Equipping the reflexion method with automated clustering (2005) IEEE Working Conference on Reverse Engineering, pp. 89-98. , IEEE Press: Silver Spring, MD; Christl, A., Koschke, R., Storey, M.-A., Automated clustering to support the reflexion method (2007) Information and Software Technology, 49 (3), pp. 255-274. , DOI 10.1016/j.infsof.2006.10.015, PII S095058490600187X; Aldrich, J., Chambers, C., Notkin, D., Archjava: Connecting software architecture to implementation (2002) International Conference on Software Engineering, pp. 187-196. , ACM Press: New York; Rötschke, T., Krikhaar, R., Architecture analysis tools to support evolution of large industrial systems (2002) IEEE International Conference on Software Maintenance, pp. 182-191. , IEEE Press: Silver Spring, MD; Gannod, G.C., Murthy, S., Verification of recovered software architectures (2003) IEEE International Workshop on Program Comprehension, pp. 258-267. , IEEE Press: Silver Spring, MD; Fiutem, R., Antoniol, G., Identifying design-code inconsistencies in object-oriented software: A case study (1998) IEEE International Conference on Software Maintenance, p. 94. , IEEE Press: Silver Spring, MD},
correspondence_address1={Koschke, R.; University of Bremen, Bremen, Germany; email: koschke@informatik.uni-bremen.de},
issn={20477481},
language={English},
abbrev_source_title={J. Softw. Evol. Process},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Berger2013285,
author={Berger, B.J. and Sohr, K. and Koschke, R.},
title={Extracting and analyzing the implemented security architecture of business applications},
journal={Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR},
year={2013},
pages={285-294},
doi={10.1109/CSMR.2013.37},
art_number={6498476},
note={cited By 18; Conference of 17th European Conference on Software Maintenance and Reengineering, CSMR 2013 ; Conference Date: 5 March 2013 Through 8 March 2013;  Conference Code:96813},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84877245527&doi=10.1109%2fCSMR.2013.37&partnerID=40&md5=5936d62df70627b75d5b4259e6cc3281},
affiliation={Center for Computing Technologies (TZI), Universität Bremen, Bremen, Germany},
abstract={Security is getting more and more important for the software development process as the advent of more complex, connected and extensible software entails new risks. In particular, multi-tier business applications, e.g., based on the Service-Oriented Architecture (SOA), are vulnerable to new attacks, which may endanger the business processes of an organization. These applications consist often of legacy code, which is now exported via Web Services, although it has originally been developed for internal use only. The last years showed great progress in the area of static code analysis for the detection of common low level security bugs, such as buffer overflows and cross-site scripting vulnerabilities. However, there is still a lack of tools that allow an analyst to assess the implemented security architecture of an application. In this paper, we propose a technique that automatically extracts the implemented security architecture of Java-based business applications from the source code. In addition, we carry out threat modeling on this extracted architecture to detect security flaws. We evaluate and discuss our approach with the help of two commercial real-world case studies, one taken from the e-government domain and the other one from logistics. © 2013 IEEE.},
author_keywords={reverse engineering;  software security;  static analysis;  threat modeling},
keywords={Buffer overflows;  Business applications;  Cross site scripting;  Security Architecture;  Software development process;  Software security;  Static code analysis;  Threat modeling, Computer software maintenance;  Information services;  Java programming language;  Reengineering;  Reverse engineering;  Service oriented architecture (SOA);  Software engineering;  Static analysis;  Web services, Security of data},
references={McGraw, G., (2006) Software Security: Building Security, , Addison-Wesley; Livshits, B., Lam, M., Finding Security Vulnerabilities in Java Applications Using Static Analysis Proceedings of the 14th USENIX Security Symposium, Aug. 2005; Chess, B., West, J., (2007) Secure Programming with Static Analysis, , Addison-Wesley; Chess, B., Improving Computer Security Using Extended Static Checking IEEE Symposium on Security and Privacy, 2002, pp. 160-173; Chen, H., Wagner, D., MOPS: An infrastructure for examining security properties of software (2002) Proceedings of the ACM Conference on Computer and Communications Security, pp. 235-244. , New York, NY, USA: ACM; Ashcraft, K., Engler, D., Using Programmer-Written Compiler Extensions to Catch Security Holes (2002) Proceedings of the IEEE Symposium on Security and Privacy, p. 143. , IEEE Computer Society; (2012) Fortify Source Code Analyser, , http://www.fortify.com/products; (2012) Coverity Prevent, , http://www.coverity.com; Enck, W., Octeau, D., McDaniel, P., Chaudhuri, S., A Study of Android Application Security Proceedings of the 14th USENIX Security Symposium, Aug. 2011; Allen, J.H., Barnum, S., Ellison, R.J., McGraw, G., Mead, N.R., (2008) Software Security Engineering: A Guide for Project Managers (The SEI Series in Software Engineering), , Addison-Wesley Professional; Basin, D., Doser, J., Lodderstedt, T., Model driven security: From UML models to access control infrastructures (2006) ACM Transactions on Software Engineering and Methodology, 15 (1), pp. 39-91. , http://delivery.acm.org/10.1145/1130000/1125810/p39-basin.pdf?key1= 1125810&key2=9723690511&coll=portal&dl=ACM&CFID= 42424&CFTOKEN=38947858; Jürjens, J., Shabalin, P., Automated Verification of UMLsec Models for Security Requirements (2004) LNCS, 3273, pp. 365-379. , Proceedings of UML 2004 - The Unified Modelling Language: Modelling Languages and Applications, ser. Springer; Hernan, S., Lambert, S., Ostwald, T., Shostack, A., Uncover Security Design Flaws Using the STRIDE Approach (2006) MSDN Magazine, , http://msdn.microsoft.com/en-us/magazine/cc163519.aspx, Nov. Online. Available; Vallée-Rai, R., Co, P., Gagnon, E., Hendren, L., Lam, P., Sundaresan, V., Soot - A Java Bytecode Optimization Framework (1999) Proceedings of Conference of the Centre for Advanced Studies on Collaborative Research, p. 13. , IBM Press; Raza, A., Vogel, G., Plödereder, E., Bauhaus-A Tool Suite for Program Analysis and Reverse Engineering (2006) Lecture Notes in Computer Science, 4006, pp. 71-82. , Ada-Europe, ser. Springer; Murphy, G.C., Notkin, D., Sullivan, K.J., Software reflexion models: Bridging the gap between design and implementation (2001) IEEE Transactions on Software Engineering, 27 (4), pp. 364-380. , DOI 10.1109/32.917525; Koschke, R., Incremental Reflexion Analysis (2010) European Conference on Software Maintenance and Reengineering, , IEEE Computer Society Press, Mar; (2012) The Common Weakness Enumeration (CWE) Initiative, , http://cwe.mitre.org/, MITRE Corporation; Swiderski, F., Snyder, W., (2004) Threat Modeling, , Redmond, WA, USA: Microsoft Press; (2012) The Common Weakness Enumeration (CWE) Initiative - CWE-290: Authentication Bypass by Spoofing, , http://cwe.mitre.org/data/definitions/290.html; Rescorla, E., (2000) HTTP over TLS, , http://tools.ietf.org/html/rfc2818, may; (2012) The Common Weakness Enumeration (CWE) Initiative - CWE-602: Client-Side Enforcement of Server-Side Security, , http://cwe.mitre.org/data/definitions/602.html; Dhillon, D., Developer-Driven Threat Modeling: Lessons Learned in the Trenches (2011) IEEE Security and Privacy, 9 (4); Carini, P.R., Hind, M., Flow-sensitive Interprocedural Constant Propagation (1995) PLDI '95, pp. 23-31. , Proceedings "of the ACM SIGPLAN 1995 Conference on Programming Language Design and Implementation", ser. New York, NY, USA: ACM; (2012) OMG Object Constraint Language, , http://www.omg.org/spec/OCL/2.3.1/PDF/; (2012), http://www.omg.org/; (2012) The Common Weakness Enumeration (CWE) Initiative - CWE-5: J2EE Misconfiguration: Data Transmission Without Encryption, , http://cwe.mitre.org/data/definitions/5.html; (2012) Eclipse Modeling Framework, , http://www.eclipse.org/modeling/emf/; (2006) Web Services Security: SOAP Message Security 1.1, , https://www.oasis-open.org/committees/download.php/16790/wss-v1. 1-spec-os-SOAPMessageSecurity.pdf; Maseberg, S., (2011), Personal communication; Felmetsger, V., Cavedon, L., Kruegel, C., Vigna, G., Toward Automated Detection of Logic Vulnerabilities in Web Applications (2010) USENIX Security Symposium, pp. 143-160. , USENIX Association; Ernst, M.D., Perkins, J.H., Guo, P.J., McCamant, S., Pacheco, C., Tschantz, M.S., Xiao, C., The Daikon system for dynamic detection of likely invariants (2007) Science of Computer Programming, 69 (1-3), pp. 35-45. , DOI 10.1016/j.scico.2007.01.015, PII S016764230700161X, Experimental Software and Toolkits; Myers, A.C., JFlow: Practical mostly-static Information Flow Control POPL '99: Proceedings of the 26th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, 1999, pp. 228-241; Antonino, P., Duszynski, S., Jung, C., Rudolph, M., Indicator-based Architecture-level Security Evaluation in a Service-oriented Environment (2010) ECSA '10, pp. 221-228. , Proceedings of the Fourth European Conference on Software Architecture: Companion Volume, ser. New York, NY, USA: ACM; Jung, C., Rudolph, M., Schwarz, R., Security Evaluation of Service- Oriented Systems Using the SiSOA Method (2011) International Journal of Secure Software Engineering, 2 (4), pp. 19-33; Jung, C., Rudolph, M., Schwarz, R., Security Evaluation of Service-oriented Systems with an Extensible Knowledge Base (2011) Proceedings of the Sixth International Conference on Availability, Reliability and Security (ARES), pp. 698-703. , IEEE; Abi-Antoun, M., Barnes, J.M., Analyzing Security Architectures (2010) ASE '10, pp. 3-12. , http://doi.acm.org/10.1145/1858996.1859001, Proceedings of the IEEE/ACM International Conference on Automated Software Engineering, ser. New York, NY, USA: ACM, Online. Available; Sohr, K., Berger, B., Idea: Towards Architecture-Centric Security Analysis of Software (2010) Engineering Secure Software and Systems, , Springer-Verlag},
correspondence_address1={Center for Computing Technologies (TZI), Universität Bremen, Bremen, Germany},
sponsors={Reengineering Forum Industry Association; Universita degli Studi di Genova - DIBRIS},
address={Genova},
issn={15345351},
isbn={9780769549484},
language={English},
abbrev_source_title={Proc. Eur. Conf. Software Maint. Reeng.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{G̈ode2013165,
author={G̈ode, N. and Koschke, R.},
title={Studying clone evolution using incremental clone detection},
journal={Journal of software: Evolution and Process},
year={2013},
volume={25},
number={2},
pages={165-192},
doi={10.1002/smr.520},
note={cited By 23},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84875386059&doi=10.1002%2fsmr.520&partnerID=40&md5=dd949b8ad340e4566de39bb9c84e9ab4},
affiliation={University of Bremen, Fachbereich 3, Postfach 33 04 40, 28334 Bremen, Germany},
abstract={Finding, understanding and managing software clones-passages of duplicated source code-is of large interest in research and practice. Analyzing the evolution of clones across multiple versions of a program adds value to both applications. Although there is an abundance of techniques to detect clones, current approaches are limited to a single version of a program. The current techniques to track clones utilize these single-version approaches and map clones of consecutive versions retroactively. This causes an unnecessary overhead in runtime and may lead to an incorrect mapping due to ambiguity. In this paper, we present an incremental clone detection algorithm, which detects clones based on the results of the previous version's analysis. It creates a mapping between clones of consecutive versions along with the detection. We evaluated our incremental approach regarding its advantage in runtime as well as the usefulness of the mapping for studies on the clone evolution. Copyright © 2010 John Wiley & Sons, Ltd.},
author_keywords={Clone evolution;  Incremental clone detection;  Software maintenance},
keywords={Clone detection;  Clone detection algorithms;  Clone evolution;  Incremental approach;  Runtimes, Application programs;  Computer software maintenance;  Mapping, Cloning},
references={Baker, B.S., A program for identifying duplicated code (1992) Computing Science and Statistics: Proceedings of the 24th Symposium on the Interface, 24, pp. 49-57; Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., Clone detection using abstract syntax trees (1998) Proceedings of the International Conference on Software Maintenance, pp. 368-377. , IEEE Computer Society: Silver Spring MD; Ducasse, S., Rieger, M., Demeyer, S., A language independent approach for detecting duplicated code (1999) Proceedings of the International Conference on Software Maintenance, pp. 109-118. , IEEE Computer Society: Silver Spring MD; Johnson, J.H., Identifying redundancy in source code using fingerprints (1993) Proceedings of the Conference of the Centre for Advanced Studies on Collaborative Research, pp. 171-183. , IBM Press: Indianapolis, IN, U.S.A; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multilinguistic token-based code clone detection system for large scale source code (2002) IEEE Transactions on Software Engineering, 28 (7), pp. 654-670; Komondoor, R.V., Horwitz, S., Using slicing to identify duplication in source code (2001) Proceedings of the 8th International Symposium on Static Analysis, pp. 40-56. , Springer: Berlin; Kontogiannis, K., Demori, R., Bernstein, M., Galler, M., Merlo, E., Pattern matching for design concept localization (1995) Proceedings of the 2nd Working Conference on Reverse Engineering, pp. 96-103. , IEEE Computer Society: Silver Spring MD; Koschke, R., Falke, R., Frenzel, P., Clone detection using abstract syntax suffix trees (2006) Proceedings of the 13th Working Conference on Reverse Engineering, pp. 253-262. , IEEE Computer Society: Silver Spring MD; Krinke, J., Identifying similar code with program dependence graphs (2001) Proceedings of the 8th Working Conference on Reverse Engineering, pp. 301-309. , IEEE Computer Society: Silver Spring MD; Marcus, A., Maletic, J.I., Identification of high-level concept clones in source code (2001) Proceedings of the 16th IEEE International Conference on Automated Software Engineering, pp. 107-114. , IEEE Computer Society: Silver Spring MD; Mayrand, J., Leblanc, C., Merlo, E., Experiment on the automatic detection of function clones in a software system using metrics (1996) Proceedings of the International Conference on Software Maintenance, pp. 244-253. , IEEE Computer Society: Silver Spring MD; Canfora, G., Cerulo, L., Di Penta, M., Identifying changed source code lines from version repositories (2007) Proceedings of the 4th International Workshop on Mining Software Repositories, pp. 14-21. , IEEE Computer Society: Silver Spring MD; Duala-Ekoko, E., Robillard, M.P., Tracking code clones in evolving software (2007) Proceedings of the 29th International Conference on Software Engineering, pp. 158-167. , IEEE Computer Society: Silver Spring MD; Aversano, L., Cerulo, L., Di Penta, M., How clones are maintained: An empirical study (2007) Proceedings of the 11th European Conference on Software Maintenance and Reengineering, pp. 81-90. , IEEE Computer Society: Silver Spring MD; Krinke, J., A study of consistent and inconsistent changes to code clones (2007) Proceedings of the 14th Working Conference on Reverse Engineering, pp. 170-178. , IEEE Computer Society: Silver Spring MD; Thummalapenta, S., Cerulo, L., Aversano, L., Di Penta, M., An empirical study on the maintenance of source code clones (2010) Empirical Software Engineering, 15 (1), pp. 1-34; Koschke, R., Survey of research on software clones (2007) Duplication, Redundancy, and Similarity in Software, 6301. , Koschke R, Merlo E, Walenstein A (eds.), Dagstuhl Seminar Proceedings, Internationales Begegnungs- und Forschungszentrum für Informatik (IBFI); Koschke, R., Frontiers in software clone management (2008) Proceedings of Frontiers of Software Maintenance, pp. 119-128. , IEEE Computer Society: Silver Spring MD; Koschke, R., Identifying and removing software clones (2008) Software Evolution, pp. 15-36. , Mens T, Demeyer S (eds.). Springer: Berlin, Heidelberg; Roy, C.K., Cordy, J.R., A survey on software clone detection research (2007) Technical Report, , Queens University at Kingston, Ontario, Canada; Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) IEEE Transactions on Software Engineering, 33 (9), pp. 577-591; Baker, B.S., Parameterized pattern matching: Algorithms and applications (1996) Journal of Computer and System Sciences, 52 (1), pp. 28-42; Falke, R., Frenzel, P., Koschke, R., Empirical evaluation of clone detection using syntax suffix trees (2008) Empirical Software Engineering, 13 (6), pp. 601-643; Laguë, B., Proulx, D., Mayrand, J., Merlo, E., Hudepohl, J., Assessing the benefits of incorporating function clone detection in a development process (1997) Proceedings of the International Conference on Software Maintenance, pp. 314-321. , IEEE Computer Society: Silver Spring MD; Antoniol, G., Villano, U., Merlo, E., Di Penta, M., Analyzing cloning evolution in the linux kernel (2002) Information and Software Technology, 44 (13), pp. 755-765; Li, Z., Lu, S., Myagmar, S., Zhou, Y., CP-Miner: A tool for finding copy-paste and related bugs in operating system code (2004) Proceedings of the 6th Conference on Opearting Systems Design and Implementation, pp. 20-33. , USENIX Association: Berkeley, CA, U.S.A; Li, Z., Lu, S., Myagmar, S., Zhou, Y., CP-miner: Finding copy-paste and related bugs in large-scale software code (2006) IEEE Transactions on Software Engineering, 32 (3), pp. 176-192; Livieri, S., Higo, Y., Matsushita, M., Inoue, K., Analysis of the linux kernel evolution using code clone coverage (2007) Proceedings of the 4th International Workshop on Mining Software Repositories, pp. 22-25. , IEEE Computer Society: Silver Spring MD; Antoniol, G., Casazza, G., Di Penta, M., Merlo, E., Modeling clones evolution through time series (2001) Proceedings of the International Conference on Software Maintenance, pp. 273-280. , IEEE Computer Society: Silver Spring MD; Krinke, J., (2008) Proceedings of the 8th International Working Conference on Source Code Analysis and Manipulation, pp. 57-66. , IEEE Computer Society: Silver Spring MD; Kim, M., Sazawal, V., Notkin, D., Murphy, G.C., An empirical study of code clone genealogies (2005) Proceedings of the Joint 10th European Software Engineering Conference and the 13th ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 187-196. , ACM: New York; Bakota, T., Ferenc, R., Gyimothy, T., Clone smells in software evolution (2007) Proceedings of the 23rd International Conference on Software Maintenance, pp. 24-33. , IEEE Computer Society: Silver Spring MD; Duala-Ekoko, E., Robillard, M.P., (2008) Proceedings of the 30th International Conference on Software Engineering, pp. 843-846. , ACM Press: New York; Göde, N., Koschke, R., Incremental clone detection (2009) Proceedings of the 13th European Conference on Software Maintenance and Reengineering, pp. 219-228. , IEEE Computer Society: Silver Spring MD; Manber, U., Myers, G., Suffix arrays: A new method for on-line string searches (1991) SIAM Journal on Computing, 22 (5), pp. 935-948; McCreight, E., A space-economical suffix tree construction algorithm (1976) Journal of the ACM, 32 (2), pp. 262-272; Ukkonen, E., On-line construction of suffix trees (1995) Algorithmica, 14 (3), pp. 249-260; Gusfield, D., Landau, G.M., Schieber, B., An efficient algorithm for the all pairs suffix-prefix problem (1992) Information Processing Letters, 41 (4), pp. 181-185; Amir, A., Farach, M., Galil, Z., Giancarlo, R., Park, K., Dynamic dictionary matching (1994) Journal of Computer and System Sciences, 49 (2), pp. 208-222; Ferragina, P., Grossi, R., Montagero, M., A note on updating suffix tree labels (1997) Proceedings of the 3rd Italian Conference on Algorithms and Complexity, pp. 181-192. , Springer: Berlin; Baker, B.S., On finding duplication and near-duplication in large software systems (1995) The Second Working Conference on Reverse Engineering, pp. 86-95. , IEEE Computer Society: Silver Spring MD; Baker, B.S., Parameterized duplication in strings: Algorithms and an application to software maintenance (1997) SIAM Journal on Computing, 26 (5), pp. 1343-1362; Monden, A., Nakae, D., Kamiya, T., Sato, S., Matsumoto, K., Software quality analysis by code clones in industrial legacy software (2002) Proceedings of the 8th International Symposium on Software Metrics, p. 87. , IEEE Computer Society: Silver Spring MD; Lozano, A., Wermelinger, M., Nuseibeh, B., Evaluating the harmfulness of cloning: A change based experiment (2007) Proceedings of the 4th International Workshop on Mining Software Repositories, pp. 18-21. , IEEE Computer Society: Silver Spring MD; Lozano, A., Wermelinger, M., Assessing the effect of clones on changeability (2008) Proceedings of the 24th International Conference on Software Maintenance, pp. 227-236. , IEEE Computer Society: Silver Spring MD; Tiarks, R., Koschke, R., Falke, R., An assessment of type-3 clones as detected by state-of-The-Art tools (2009) Proceedings of the 9th International Working Conference on Source Code Analysis and Manipulation, pp. 67-76. , IEEE Computer Society: Silver Spring MD},
correspondence_address1={Koschke, R.; University of Bremen, Fachbereich 3, Postfach 33 04 40, 28334 Bremen, Germany; email: koschke@informatik.uni-bremen.de},
issn={20477481},
language={English},
abbrev_source_title={J. Softw. Evol. Process},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koschke20133,
author={Koschke, R.},
title={2013 7th International Workshop on Software Clones, IWSC 2013 - Proceedings: Foreword},
journal={2013 7th International Workshop on Software Clones, IWSC 2013 - Proceedings},
year={2013},
pages={3-6},
doi={10.1109/IWSC.2013.6613031},
art_number={6613031},
note={cited By 0; Conference of 2013 7th International Workshop on Software Clones, IWSC 2013 ; Conference Date: 19 May 2013 Through 19 May 2013;  Conference Code:100372},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84886649318&doi=10.1109%2fIWSC.2013.6613031&partnerID=40&md5=0cb7eaf4a23e8cea69a4bd321af74676},
affiliation={University of Bremen, Germany},
abstract={Software clones are identical or similar pieces of code or design. Clones are known to be closely related to various issues on software engineering, such as software quality, complexity, architecture, refactoring, evolution, licensing, plagiarism, and so on. Various characteristics of software systems can be uncovered through clone analysis, and system restructuring can be performed by merging clones. © 2013 IEEE.},
keywords={Computer software selection and evaluation, Clone analysis;  International workshops;  Refactorings;  Software clones;  Software Quality;  Software systems, Cloning},
correspondence_address1={Koschke, R.; University of BremenGermany},
publisher={IEEE Computer Society},
address={San Francisco, CA},
isbn={9781467364454},
language={English},
abbrev_source_title={Int. Workshop Softw. Clones, IWSC - Proc.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Schmid2013215,
author={Schmid, K. and Koschke, R. and Kröher, C. and Lüdemann, D.},
title={Towards identifying evolution smells in Software Product Lines},
journal={Lecture Notes in Informatics (LNI), Proceedings - Series of the Gesellschaft fur Informatik (GI)},
year={2013},
volume={P-215},
pages={215-219},
note={cited By 1; Conference of Multi-Conference on Software Engineering, SE 2013 ; Conference Date: 26 February 2013 Through 1 March 2013;  Conference Code:110646},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84922738691&partnerID=40&md5=859dbc28352f162554937fabcb2107ce},
affiliation={University of Hildesheim, Institute of Computer Science, Software Systems Engineering, Marienburger Platz 22, Hildesheim, 31141, Germany; University of Bremen, Institute of Computer Science, Softwaretechnik, Am Fallturm 1, Bremen, 28359, Germany},
abstract={As more and more companies shift to a product line approach, supporting the evolution of software product lines becomes increasingly important. While today already significant work exists along the lines of quality analysis for software product lines, there is much less work that addresses the evolution scenario. In this paper, we briefly describe different categories of approaches for identifying problems in product lines. Based on this we describe a new research direction for identifying problems in product line evolution scenarios. © Gesellschaft für Informatik, Bonn 2013.},
keywords={Computer software, Product line evolutions;  Product-lines;  Software Product Line, Software engineering},
references={Benavides, D., Segura, S., Ruiz-Cortes, A., Automated analysis of feature models 20 years later: A literature review (2010) Information Systems, 35 (6), pp. 615-636. , [BSR10]; Koschke, R., Frenzel, P., Breu, A., Angstmann, K., Extending the reflexion method for consolidating software variants into product lines (2009) Software Quality Journal, 17 (4), pp. 331-366. , [KFBA09]; Kästner, C., Giarrusso, P., Rendel, T., Erdweg, S., Ostermann, K., Berger, T., Variability-Aware parsing in the presence of lexical macros and conditional compilation (2011) Proceedings of the ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages and Applications (OOPSLA), pp. 805-824. , [KGREOB11]; Van Der Linden, F., Schmid, K., Rommes, E., (2007) Product Lines in Action, , [LSR07], Springer; Ribeiro, M., Queiroz, F., Borba, P., Toledo, P., Brabrand, C., Soares, S., On the impact of feature dependencies when maintaining preprocessor-based software product lines (2011) International Conference on Generative Programming and Component Engineering, pp. 23-32. , [RQBTBS11]; Schmid, K., Verteilte evolution von produktlinien: Herausforderungen und ein lösungsansatz, 1 (2009) Workshop Design For Future-Langlebige Softwaresysteme (L2S2), , [Sc09] FZI Karlsruhe; Schmid, K., John, J., A customizable approach to full lifecycle variability management (2004) Sci-ence of Computer Programming, 53 (3), pp. 259-284. , [SJ04]; She, S., Lotufo, R., Berger, T., Wasowski, A., Czarnecki, K., Reverse engineering feature models (2011) International Conference on Software Engineering, pp. 461-470. , [SLBWC11]},
correspondence_address1={Schmid, K.; University of Hildesheim, Institute of Computer Science, Software Systems Engineering, Marienburger Platz 22, Germany},
editor={Lichter H., Wagner S.},
sponsors={},
publisher={Gesellschaft fur Informatik (GI)},
issn={16175468},
isbn={9783885796091},
language={English},
abbrev_source_title={Lect. Notes Informatics (LNI), Proc. - Series Ges. Inform. (GI)},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Hemel2012357,
author={Hemel, A. and Koschke, R.},
title={Reverse engineering variability in source code using clone detection: A case study for linux variants of consumer electronic devices},
journal={Proceedings - Working Conference on Reverse Engineering, WCRE},
year={2012},
pages={357-366},
doi={10.1109/WCRE.2012.45},
art_number={6385131},
note={cited By 19; Conference of 19th Working Conference on Reverse Engineering, WCRE 2012 ; Conference Date: 15 October 2012 Through 18 October 2012;  Conference Code:94941},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872348618&doi=10.1109%2fWCRE.2012.45&partnerID=40&md5=8d4530d441e1b78ccde14da5b81a3ad7},
affiliation={Tjaldur Software Governance Solutions, Netherlands; Fachbereich Mathematik und Informatik, University of Bremen, Germany},
abstract={The Consumer Electronics Working Group (CEWG) in the Linux Foundation has identified several problems in the re-use process of embedded Linux software for consumer electronic devices. Among these is the increasing fragmentation of Linux derivatives. Vendors of electronic devices copy the Linux sources and make their modifications to adapt it to their own devices, but fail to back port their modifications to the mainstream Linux sources. Likewise, later improvements of the Linux sources are not integrated into the vendors' variants. CEWG launched the Long Term Support Initiative (LTSI) for an industry-managed tree of the Linux sources, maintained by CEWG, that is based on the long-term stable kernel tree annually updated with the latest mainstream kernel version to address their needs. In order to justify this initiative, CEWG asked us to investigate whether and if so how much non-upstream code can be found in industry products and to which extent to and for what part of the kernel. We used large-scale clone detection techniques to compare various Linux versions to their vendor-specific variants. We found many changes that were not back ported. Some of these changes were even found in Linux subsystems where neither we nor people from the Linux Foundation would expect them. We also found instances of defects fixed in the mainstream kernel that were not integrated into the vendors' code. Overall, our investigation provides enough evidence to support the need for an LTSI and better collaboration among Linux developers both of the mainstream and the vendor variants. © 2012 IEEE.},
author_keywords={open-source development;  software clone detection;  software product lines},
keywords={Clone detection;  Clone detection techniques;  Consumer electronic devices;  Electronic device;  Embedded Linux;  Industry products;  Open source development;  Software clone detection;  Software Product Line;  Source codes;  Working groups, Cloning;  Computer software reusability;  Consumer electronics;  Forestry;  Reverse engineering, Computer operating systems, Coding;  Computer Programs;  Electronic Equipment},
references={Tian, Y., Lawall, J.L., Lo, D., Identifying linux bug fixing patches (2012) International Conference on Software Engineering. ACM Press, pp. 386-396; Koschke, R., Large-scale inter-system clone detection using suffix trees (2012) European Conference on Software Maintenance and Reengineering, pp. 309-318; Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) IEEE Transactions on Software Engineering, 33 (9), pp. 577-591. , Sep; Mende, T., Koschke, R., Beckwermert, F., An evaluation of code similarity identification for the grow-and-prune model (2009) Journal on Software Maintenance and Evolution, 21 (2), pp. 143-169. , March-April; Bazrafshan, S., Koschke, R., Göde, N., Approximate code search in program histories (2011) Working Conference on Reverse Engineering, pp. 109-118; Koschke, R., Frontiers in software clone management (2008) Frontiers in Software Maintenance, Proceedings of the International Conference on Software Maintenance, pp. 119-128; Roy, C.K., Cordy, J.R., Koschke, R., Comparison and evaluation of code clone detection techniques and tools: A qualitative approach (2009) Journal of Science of Computer Programming, 74 (7), pp. 470-495; Baker, B.S., A program for identifying duplicated code (1992) Computer Science and Statistics 24: Proceedings of the 24th Symposium on the Interface, pp. 49-57. , Mar; Hummel, B., Juergens, E., Heinemann, L., Conradt, M., Index-based code clone detection: Incremental, distributed, scalable (2010) International Conference on Software Maintenance, pp. 1-9; Keivanloo, I., Rilling, J., Charland, P., Seclone-a hybrid approach to internet-scale real-time code clone search (2011) International Conference on Program Comprehension, pp. 223-224; Keivanloo, I., Rilling, J., Charland, P., Internet-scale real-time code clone search via multilevel indexing (2011) Working Conference on Reverse Engineering, pp. 23-27; Livieri, S., German, D.M., Inoue, K., (2010) A Needle in the Stack: Efficient Clone Detection for Huge Collections of Source Code, , University of Osaka, Technical report, Jan; Livieri, S., Higo, Y., Matushita, M., Inoue, K., Very-large scale code clone analysis and visualization of open source (2007) International Conference on Software Engineering. ACM Press, pp. 106-115; German, D.M., Penta, M.D., Guéhéneuc, Y.-G., An-Toniol, G., Code siblings: Technical and legal implications of copying code between applications (2009) Working Conference on Mining Software Repositories (MSR), pp. 81-90; Krinke, J., Gold, N., Jia, Y., Binkley, D., Cloning and copying between gnome projects (2010) Working Conference on Mining Software Repositories (MSR), pp. 98-101; Al-Ekram, R., Kapser, C., Holt, R., Godfrey, M., Cloning by accident: An empirical study of source code cloning across software systems (2005) International Symposium on Empirical Software Engineering; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multi-linguistic token-based code clone detection system for large scale source code (2002) IEEE Transactions on Software Engineering, 28 (7), pp. 654-670; Antoniol, G., Villano, U., Merlo, E., Penta, M.D., Analyzing cloning evolution in the linux kernel (2002) Information and Software Technology, 44 (13), pp. 755-765. , Oct; Koschke, R., Frenzel, P., Breu, A.P., Angstmann, K., Extending the reflexion method for consolidating software variants into product lines (2009) Software Quality Journal, 17 (4), pp. 331-366. , Dec},
correspondence_address1={Hemel, A.; Tjaldur Software Governance SolutionsNetherlands; email: armijn@tjaldur.nl},
sponsors={Reengineering Forum},
address={Kingston, ON},
issn={10951350},
isbn={9780769548913},
language={English},
abbrev_source_title={Proc. Working Conf. Rev. Eng. WCRE},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Cordy2012,
author={Cordy, J.R. and Inoue, K. and Koschke, R.},
title={2012 6th International Workshop on Software Clones, IWSC 2012 - Proceedings: Foreword},
journal={2012 6th International Workshop on Software Clones, IWSC 2012 - Proceedings},
year={2012},
pages={iii},
doi={10.1109/IWSC.2012.6227859},
art_number={6227859},
note={cited By 0; Conference of 2012 6th International Workshop on Software Clones, IWSC 2012 ; Conference Date: 4 June 2012 Through 4 June 2012;  Conference Code:91312},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84864240585&doi=10.1109%2fIWSC.2012.6227859&partnerID=40&md5=ed71bb7f80a3fc02ca20b3f10c3676fe},
affiliation={Queen's University, Canada; Osaka University, Japan; University of Bremen, Germany},
abstract={Software clones are identical or similar pieces of code or design. Clones are known to be closely related to various issues on software engineering, such as software quality, complexity, architecture, refactoring, evolution, licensing, plagiarism, and so on. Various characteristics of software systems can be uncovered through the clone analysis, and system restructuring can be performed by merging clones. The purpose of this workshop is to continue to solidify and give shape to this research/application area and community. More specifically, the goals are to bring together academic and industrial researchers and practitioners from around the world to evaluate the current state of research and applications, discuss common problems, discover new opportunities for collaboration, exchange ideas, and envision new areas of research and applications. In this, the 6th international clone workshop, we will discuss issues in software clone detection, analysis and management, as well as applications to software engineering contexts that can benefit from knowledge of clones. As befits a maturing workshop, we have this year added independent program committee chairs to oversee the technical program. © 2012 IEEE.},
keywords={Clone analysis;  International workshops;  Program committee;  Refactorings;  Research and application;  Software clone detection;  Software clones;  Software Quality;  Software systems;  State of research;  Technical programs, Computer software selection and evaluation;  Industrial research;  Software engineering, Cloning},
correspondence_address1={Cordy, J.R.; Queen's UniversityCanada},
address={Zurich},
isbn={9781467317955},
language={English},
abbrev_source_title={Int. Workshop Softw. Clones, IWSC - Proc.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Roehm2012255,
author={Roehm, T. and Tiarks, R. and Koschke, R. and Maalej, W.},
title={How do professional developers comprehend software?},
journal={Proceedings - International Conference on Software Engineering},
year={2012},
pages={255-265},
doi={10.1109/ICSE.2012.6227188},
art_number={6227188},
note={cited By 114; Conference of 34th International Conference on Software Engineering, ICSE 2012 ; Conference Date: 2 June 2012 Through 9 June 2012;  Conference Code:91326},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84864191006&doi=10.1109%2fICSE.2012.6227188&partnerID=40&md5=e04970631c06a1dbc01c1f9f465aaa39},
affiliation={TU München, Munich, Germany; University of Bremen, Bremen, Germany},
abstract={Research in program comprehension has considerably evolved over the past two decades. However, only little is known about how developers practice program comprehension under time and project pressure, and which methods and tools proposed by researchers are used in industry. This paper reports on an observational study of 28 professional developers from seven companies, investigating how developers comprehend software. In particular we focus on the strategies followed, information needed, and tools used. We found that developers put themselves in the role of end users by inspecting user interfaces. They try to avoid program comprehension, and employ recurring, structured comprehension strategies depending on work context. Further, we found that standards and experience facilitate comprehension. Program comprehension was considered a subtask of other maintenance tasks rather than a task by itself. We also found that face-to-face communication is preferred to documentation. Overall, our results show a gap between program comprehension research and practice as we did not observe any use of state of the art comprehension tools and developers seem to be unaware of them. Our findings call for further careful analysis and for reconsidering research agendas. © 2012 IEEE.},
author_keywords={context awareness;  empirical studies;  maintenance;  program comprehension;  software documentation},
keywords={Context- awareness;  Empirical studies;  End users;  Face-to-face communications;  Maintenance tasks;  Observational study;  Program comprehension;  Research agenda;  Software documentation;  State of the art, Maintenance;  Research;  Software engineering;  User interfaces, Computer programming},
references={Boehm, B., Software engineering (1976) IEEE Transactions on Computers, C-25 (12), pp. 1226-1241; Brooks, R.E., Towards a theory of the comprehension of computer programs (1983) International Journal of Man-Machine Studies, 18 (6), pp. 543-554; Creswell, J., (2009) Research Design: Qualitative, Quantitative, and Mixed Methods Approaches, , Sage Publications, Inc; DeLine, R., Khella, A., Czerwinski, M., Robertson, G., Towards understanding programs through wear-based filtering (2005) Proceedings of the 2005 ACM Symposium on Software Visualization, SoftVis'05, pp. 183-192. , ACM; Fjeldstad, R., Hamlen, W., Application program maintenance study: Report to our respondents GUIDE 48, Philadelphia, PA, 1979; Forward, A., Lethbridge, T.C., The relevance of software documentation, tools and technologies: A survey (2002) Proceedings of the 2002 ACM Symposium on Document Engineering, pp. 26-33. , ACM; Ko, A.J., DeLine, R., Venolia, G., Information needs in collocated software development teams (2007) Proceedings of the 29th International Conference on Software Engineering, ICSE'07, pp. 344-353. , IEEE Computer Society; Ko, A.J., Myers, B.A., Designing the whyline: A debugging interface for asking questions about program behavior (2004) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, CHI'04, pp. 151-158. , ACM; Ko, A.J., Myers, B.A., Coblenz, M.J., Aung, H.H., An exploratory study of how developers seek, relate, and collect relevant information during software maintenance tasks (2006) IEEE Transactions on Software Engineering, 32, pp. 971-987; LaToza, T.D., Venolia, G., DeLine, R., Maintaining mental models: A study of developer work habits (2006) Proceedings of the 28th International Conference on Software Engineering, ICSE'06, pp. 492-501. , ACM; Lethbridge, T.C., Singer, J., Forward, A., How software engineers use documentation: The state of the practice (2003) IEEE Software, 20 (6), pp. 35-39; Littman, D., Pinto, J., Letovsky, S., Soloway, E., Mental models and software maintenance (1987) Journal of Systems and Software, 7 (4), pp. 341-355; Maalej, W., Task-first or context-first? Tool integration revisited (2009) Proceedings of the 2009 IEEE/ACM International Conference on Automated Software Engineering, ASE'09, pp. 344-355. , IEEE Computer Society; Maalej, W., Happel, H.-J., Can development work describe itself? (2010) 7th IEEE International Working Conference on Mining Software Repositories, MSR '10., pp. 191-200. , IEEE; Murphy, G.C., Kersten, M., Findlater, L., How are java software developers using the eclipse ide? (2006) IEEE Software, 23 (4), pp. 76-83; Rajlich, V., Wilde, N., The role of concepts in program comprehension (2002) Proceedings of the 10th International Workshop on Program Comprehension, pp. 271-278; Robillard, M., Coelho, W., Murphy, G., How effective developers investigate source code: An exploratory study (2004) IEEE Transactions on Software Engineering, 30 (12), pp. 889-903; Roehm, T., Maalej, W., Automatically detecting developer activities and problems in software development work: Nier track Proceedings of the 34th International Conference on Software Engineering, ICSE'12, 2012; Sillito, J., De Voider, K., Fisher, B., Murphy, G., Managing software change tasks: An exploratory study (2005) Proceedings of the 2005 International Symposium on Empirical Software Engineering, ISESE'05, p. 10; Sillito, J., Murphy, G.C., De Volder, K., Questions programmers ask during software evolution tasks (2006) Proceedings of the 14th ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE'06, pp. 23-34. , ACM; Sillito, J., Murphy, G.C., Volder, K.D., Asking and answering questions during a programming change task (2008) IEEE Transactions on Software Engineering, 34 (4), pp. 434-451; Singer, J., Lethbridge, T., Vinson, N., Anquetil, N., An examination of software engineering work practices (1997) Proceedings of the 1997 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'97, p. 21. , IBM Press; Von Mayrhauser, A., Vans, A.M., Identification of dynamic comprehension processes during large scale maintenance (1996) IEEE Transactions on Software Engineering, 22 (6), pp. 424-437; Von Mayrhauser, A., Vans, A.M., Lang, S., Program comprehension and enhancement of software Proceedings of the IFIP World Computing Congress - Information Technology and Knowledge Engineering, 1998},
correspondence_address1={Roehm, T.; TU München, Munich, Germany; email: roehm@cs.tum.edu},
sponsors={IEEE Computer Society; ACM; University of Zurich (UZH), Department of Informatics; Technical Council on Software Engineering (TCSE); Special Interest Group on Software Engineering (SIGSOFT); SI-SE},
address={Zurich},
issn={02705257},
isbn={9781467310673},
coden={PCSED},
language={English},
abbrev_source_title={Proc Int Conf Software Eng},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koschke2012309,
author={Koschke, R.},
title={Large-scale inter-system clone detection using suffix trees},
journal={Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR},
year={2012},
pages={309-318},
doi={10.1109/CSMR.2012.37},
art_number={6178897},
note={cited By 41; Conference of 2012 16th European Conference on Software Maintenance and Reengineering, CSMR 2012 ; Conference Date: 27 March 2012 Through 30 March 2012;  Conference Code:89560},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84860537264&doi=10.1109%2fCSMR.2012.37&partnerID=40&md5=5ace29041f67c70f678a973740e467dc},
affiliation={University of Bremen, Germany},
abstract={Detecting license violations of source code requires to compare a suspected system against a very large corpus of source code, for instance, the Debian source distribution. Thus, techniques detecting suspiciously similar code must scale in terms of resources needed. In addition to that, high precision of the detection is necessary because a human needs to inspect the results. The current approaches to address the resource challenge is to create an index for the corpus to which the suspected source code is compared. The index creation, however, is very costly. If the analysis is done only once, it may not be worth the effort. This paper demonstrates how suffix trees can be used to obtain a scalable comparison. Our evaluation shows that this approach is faster than current index-based techniques. In addition to that, this paper proposes a method to improve precision through user feedback and automated data mining. © 2012 IEEE.},
author_keywords={Clone detection;  Code search;  License violation detection},
keywords={Automated data mining;  Clone detection;  Code search;  High precision;  Human needs;  Index creation;  Source codes;  Source distribution;  Suffix-trees;  User feedback, Cloning;  Computer programming languages;  Forestry;  Reengineering, Computer software maintenance, Clones;  Coding;  Evaluation;  Precision;  Programing Languages},
references={Yamashina, T., Uwano, H., Fushida, K., Kamei, Y., Nagura, M., Kawaguchi, S., Iida, H., Shinobi: A real-time code clone detection tool for software maintenance (2009) Working Conference on Reverse Engineering, pp. 313-314. , IEEE Computer Society Press; Bazrafshan, S., Koschke, R., Göde, N., Approximate code search in program histories (2011) Working Conference on Reverse Engineering, pp. 109-118. , IEEE Computer Society Press; Iman keivanloo and juergen rilling and philippe charland (2011) International Conference on Program Comprehension, pp. 223-224. , IEEE Computer Society Press; Keivanloo, I., Rilling, J., Charland, P., Internet-scale realtime code clone search via multi-level indexing (2011) Working Conference on Reverse Engineering, pp. 23-27. , IEEE Computer Society Press; Barbour, L., Yuan, H., Zou, Y., A technique for just-intime clone detection in large scale systems (2010) International Conference on Program Comprehension, pp. 76-79. , IEEE Computer Society Press; Ekwa Duala-Ekoko, M.R., Clonetracker: Tool support for code clone management (2008) International Conference on Software Engineering, pp. 843-846. , ACM Press; De Wit, M., Zaidman, A., Van Deursen, A., Managing code clones using dynamic change tracking and resolution (2009) International Conference on Software Maintenance, pp. 169-178. , IEEE Computer Society Press; Berger, B., Koschke, R., Reduzierung der programmgröse durch klonerkennung (2008) Workshop Automotive Software Engineering, Tagungsband Zur Jahrestagung der Gesellschaft für Informatik, , GI Lecture Notes for Informatics; Mende, T., Koschke, R., Beckwermert, F., An evaluation of code similarity identification for the grow-and-prune model (2009) Journal on Software Maintenance and Evolution, 21 (2), pp. 143-169. , March-April; Mende, T., Beckwermert, F., Koschke, R., Meier, G., Supporting the grow-and-prune model in software product lines evolution using clone detection (2008) European Conference on Software Maintenance and Reengineering, pp. 163-172. , IEEE Computer Society Press; Higo, Y., Tanaka, K., Kusumoto, S., Toward identifying inter-project clone sets for building useful libraries (2010) International Workshop on Software Clones, , ACM Press; Hummel, B., Juergens, E., Heinemann, L., Conradt, M., A needle in the stack: Efficient clone detection for huge collections of source code (2010) International Conference on Software Maintenance, pp. 1-9. , IEEE Computer Society Press; Livieri, S., German, D.M., Inoue, K., A needle in the stack: Efficient clone detection for huge collections of source code (2010) University of Osaka, Technical Report, , Jan; Cordy, J.R., Exploring large-scale system similarity using incremental clone detection and live scatterplots (2011) International Conference on Program Comprehension, pp. 151-160. , IEEE Computer Society Press; Koschke, R., Survey of research on software clones (2007) Duplication, Redundancy, and Similarity in Software, Ser. Dagstuhl Seminar Proceedings, , http://drops.dagstuhl.de/opus/volltexte/2007, R. Koschke, E. Merlo, and A. Walenstein, Eds., no. 06301. Dagstuhl, Germany: Dagstuhl. [Online]; Koschke, R., Frontiers in software clone management (2008) Frontiers in Software Maintenance, Proceedings of the International Conference on Software Maintenance, pp. 119-128. , IEEE Computer Society Press; Roy, C.K., Cordy, J.R., Koschke, R., Comparison and evaluation of code clone detection techniques and tools: A qualitative approach (2009) Journal of Science of Computer Programming, 74 (7), pp. 470-495. , Special Issue on Program Comprehension (ICPC 2008); Baker, B.S., A program for identifying duplicated code (1992) Computer Science and Statistics 24: Proceedings of the 24th Symposium on the Interface, pp. 49-57. , Mar; Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) IEEE Transactions on Software Engineering, 33 (9), pp. 577-591. , Sep; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multi- linguistic token-based code clone detection system for large scale source code (2002) IEEE Transactions on Software Engineering, 28 (7), pp. 654-670; Koschke, R., Falke, R., Frenzel, P., Clone detection using abstract syntax suffix trees (2006) Working Conference on Reverse Engineering, pp. 253-262. , IEEE Computer Society Press; Falke, R., Koschke, R., Frenzel, P., Empirical evaluation of clone detection using syntax suffix trees (2008) Empirical Software Engineering, 13 (6), pp. 601-643; Livieri, S., Higo, Y., Matushita, M., Inoue, K., Very-large scale code clone analysis and visualization of open source (2007) International Conference on Software Engineering, pp. 106-115. , ACM Press; McCreight, E., A space-economical suffix tree construction algorithm (1976) Journal of the ACM, 32 (2), pp. 262-272; Ukkonen, E., On-line construction of suffix trees (1995) Algorithmica, 14, pp. 249-260; Chang, W.I., Lawler, E.L., Sublinear expected time approximate string matching and biological applications (1994) Algorithmica, 12, pp. 327-344; Gusfield, D., Algorithms on strings (2008) Trees and Sequences: Computer Science and Computational Biology, , Cambridge University Press; Juergens, E., Deissenboeck, F., Hummel, B., Clonedetective - A workbench for clone detection research (2009) International Conference on Software Engineering, , ACM Press; Higo, Y., Kamiya, T., Kusumoto, S., Inoue, K., Method and implementation for investigating code clones in a software system (2007) Information and Software Technology, 49 (9-10), pp. 985-998; Tiarks, R., Koschke, R., Falke, R., An assessment of type-3 clones as detected by state-of-the-art tools (2009) International Workshop on Source Code Analysis and Manipulation, pp. 67-76. , IEEE Computer Society Press; Tiarks, R., Koschke, R., Falke, R., An extended assessment of type-3 clones as detected by state-of-the-art tools (2011) Software Quality Journal, 19 (2), pp. 295-331; Falke, R., (2011) Erkennung von Falsch-Positiven Softwareklonen Mittels Lernverfahren, , PhD dissertation, University of Bremen, Germany; Puglisi, S.J., Smyth, W.F., Yusufu, M., Fast optimal algorithms for computing all the repeats in a string (2008) PSC, pp. 161-169; Krinke, J., Gold, N., Jia, Y., Binkley, D., Cloning and copying between gnome projects (2010) Working Conference on Mining Software Repositories (MSR), pp. 98-101. , IEEE Computer Society Press; Mertzel, N.J., Copying 0.03 percent of software code base not "de minimis" (2008) Journal of Intellectual Property Law & Practice, 9 (3), pp. 547-548; Mende, T., (2011) On the Evaluation of Defect Prediction Models, , PhD Dissertation, University of Bremen, Germany},
correspondence_address1={Koschke, R.; University of BremenGermany; email: koschke@tzi.de},
sponsors={Reengineering Forum (REF); University of Szeged; FrontEndART Software Ltd.},
address={Szeged},
issn={15345351},
isbn={9780769546667},
language={English},
abbrev_source_title={Proc. Eur. Conf. Software Maint. Reeng.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Katzmarski201217,
author={Katzmarski, B. and Koschke, R.},
title={Program complexity metrics and programmer opinions},
journal={IEEE International Conference on Program Comprehension},
year={2012},
pages={17-26},
doi={10.1109/icpc.2012.6240486},
art_number={6240486},
note={cited By 15; Conference of 2012 20th IEEE International Conference on Program Comprehension, ICPC 2012 ; Conference Date: 11 June 2012 Through 13 June 2012;  Conference Code:91930},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84864967011&doi=10.1109%2ficpc.2012.6240486&partnerID=40&md5=2e038f24633bb7affe1075970b0dd0f9},
affiliation={Fachbereich Mathematik und Informatik, University of Bremen, Bremen, Germany},
abstract={Various program complexity measures have been proposed to assess maintainability. Only relatively few empirical studies have been conducted to back up these assessments through empirical evidence. Researchers have mostly conducted controlled experiments or correlated metrics with indirect maintainability indicators such as defects or change frequency. This paper uses a different approach. We investigate whether metrics agree with complexity as perceived by programmers. We show that, first, programmers' opinions are quite similar and, second, only few metrics and in only few cases reproduce complexity rankings similar to human raters. Data-flow metrics seem to better match the viewpoint of programmers than control-flow metrics, but even they are only loosely correlated. Moreover we show that a foolish metric has similar or sometimes even better correlation than other evaluated metrics, which raises the question how meaningful the other metrics really are. In addition to these results, we introduce an approach and associated statistical measures for such multi-rater investigations. Our approach can be used as a model for similar studies. © 2012 IEEE.},
author_keywords={control-flow metrics;  data-flow metrics;  program complexity},
keywords={Data transfer;  Maintainability, Back up;  Change frequencies;  Control-flow metrics;  Controlled experiment;  Data-flow metrics;  Empirical studies;  Program complexity;  Statistical measures, Computer programming},
references={Halstead, M.H., (1977) Elements of Software Science, , Elsevier; McCabe, T.J., A complexity measure (1976) IEEE Transactions on Software Engineering, 2, pp. 308-320; Nejmeh, B.A., Npath: A measure of execution path complexity and its applications (1988) Commun. ACM, 31, pp. 188-200. , Feb; Beyer, D., Fararooy, A., A simple and effective measure for complex low-level dependencies International Conference on Program Comprehension, 2010, pp. 80-83; Elshoff, J., An analysis of some commercial PL/I programs (1976) IEEE Transactions on Software Engineering, SE-2 (2), pp. 113-120. , Jun; Shao, J., Wang, Y., A new measure of software complexity based on cognitive weights (2003) Canadian Journal of Electrical and Computer Engineering, 28 (2), pp. 69-74. , Apr; Posnett, D., Hindle, A., Devanbu, P.T., A simpler model of software readability Working Conference on Mining Software Repositories, 2011, pp. 73-82; Buse, R.P.L., Weimer, W.R., Learning a metric for code readability (2010) IEEE Transactions on Software Engineering, 36 (4), pp. 546-558. , july-aug; Boysen, J., (1977) Factors Affecting Computer Program Comprehension, , PhD thesis, Iowa State University; Boysen, J.P., Keller, R.F., Measuring computer program comprehension (1980) Proceedings of the Eleventh SIGCSE Technical Symposium on Computer Science Education, pp. 92-102. , ACM Press; Ko, A., Myers, B., Coblenz, M., Aung, H., An exploratory study of how developers seek, relate, and collect relevant information during software maintenance tasks (2006) IEEE Transactions on Software Engineering, 32 (12), pp. 971-987. , Dec; Ko, A.J., DeLine, R., Venolia, G., Information needs in collocated software development teams (2007) International Conference on Software Engineering, pp. 344-353; Roehm, T., Tiarks, R., Koschke, R., Maalej, W., How do industry developers comprehend software? (2012) International Conference on Software Engineering, , ACM Press; Murphy, G.C., Kersten, M., Findlater, L., How are Java software developers using the Eclipse IDE? (2006) IEEE Software, 23 (4), pp. 76-83; Menzies, T., Greenwald, J., Frank, A., Data mining static code attributes to learn defect predictors (2007) IEEE Transactions on Software Engineering, 33 (1), pp. 2-13; Hassan, A.E., Predicting faults using the complexity of code changes (2009) Proc. of the 31st ICSE, pp. 78-88. , Washington, DC, USA: IEEE Computer Society; Gyimóthy, T., Ferenc, R., Siket, I., Empirical validation of object-oriented metrics on open source software for fault prediction (2005) IEEE Transactions on Software Engineering, 31, pp. 897-910; Zimmermann, T., Nagappan, N., Zeller, A., (2008) Predicting Bugs from History, pp. 69-88. , Springer, Mar. ch. 4; Zimmermann, T., Nagappan, N., Predicting defects using network analysis on dependency graphs (2008) Proc. of the 30th ICSE, pp. 531-540. , New York, NY, USA: ACM; Bird, C., Nagappan, N., Devanbu, P.T., Gall, H., Murphy, B., Does distributed development affect software quality? An empirical case study of Windows Vista Proc. of the 31st ICSE, 2009, pp. 518-528; Knab, P., Pinzger, M., Bernstein, A., Predicting defect densities in source code files with decision tree learners (2006) Proc. of the Workshop on Mining Software Repositories, pp. 119-125. , New York, NY, USA: ACM; Ostrand, T., Weyuker, E., Bell, R., Predicting the location and number of faults in large software systems (2005) IEEE Transactions on Software Engineering, 31 (4), pp. 340-355; Nagappan, N., Ball, T., Use of relative code churn measures to predict system defect density International Conference on Software Engineering, 2005, pp. 284-292; Nagappan, N., Ball, T., Static analysis tools as early indicators of pre-release defect density (2005) International Conference on Software Engineering, pp. 580-586. , ACM; Mende, T., (2011) On the Evaluation of Defect Prediction Models, , PhD Dissertation, University of Bremen, Germany; Kemerer, C., Software complexity and software maintenance: A survey of empirical research (1995) Annals of Software Engineering, 1 (1), pp. 1-22. , Dec; Basili, V., Perricone, B., Software errors and complexity: An empirical investigation (1984) Communications of the ACM, 27 (1), pp. 42-52; Shen, V., Yu, T.-J., Thebaut, S., Paulsen, L., Identifying error-prone software - An empirical study (1985) IEEE Transactions on Software Engineering, 11 (4), pp. 317-323; Compton, B., Withrow, C., Prediction and control of ada software defects (1990) Journal of Systems and Software, 12 (3), pp. 199-207; An, K., Gustafson, D., Melton, A., A model for software maintenance International Conference on Software Maintenance, 1987, pp. 57-62; Benander, B.A., Gorla, N., Benander, A.C., An empirical study of the use of the goto statement (1990) Journal of Systems and Software, 11 (3), pp. 217-223; Korson, T.D., Vaishnavi, V.K., An empirical study of modularity on program modifiability Workshop on Empirical Studies of Programmers on Empirical Studies of Programmers, 1986, pp. 168-186; Troy, D., Zweben, S., Measuring the quality of structured designs (1981) Journal of Systems and Software, 2 (2), pp. 113-120; Selby, R., Basili, V., Error localization during software maintenance: Generating hierarchical system descriptions from the source code alone (1988) International Conference on Software Maintenance, pp. 192-197. , IEEE Computer Society Press; Yau, S., Chang, P., A metric of modifiability for software maintenance (1988) International Conference on Software Maintenance, pp. 374-381. , IEEE Computer Society Press; Lind, R., Vairavan, K., An experimental investigation of software metrics and their relationship to software development effort (1989) IEEE Transactions on Software Engineering, 15 (5), pp. 649-653; Gill, G., Kemerer, C., Cyclomatic complexity density and software maintenance productivity (1991) IEEE Transactions on Software Engineering, 17 (12), pp. 1284-1288; D, J., The effect of inheritance on the maintainability of object-oriented software: An empirical study (1995) International Conference on Software Maintenance, pp. 20-29. , IEEE Computer Society Press; Kamiya, T., Kusumoto, S., Inoue, K., Mohri, Y., Empirical evaluation of reuse sensitiveness of complexity metrics (1999) Information and Software Technology, 41 (5), pp. 297-305; Feigenspan, J., Apel, S., Liebig, J., Kastner, C., Exploring software measures to assess program comprehension (2011) International Symposium on Empirical Software Engineering and Measurement, pp. 127-136. , IEEE Computer Society Press; P, L., Two controlled experiments assessing the usefulness of design pattern documentation in program maintenance (2002) IEEE Transactions on Software Engineering, 28 (6), pp. 595-606; Sharif, B., Maletic, J., An eye tracking study on camelcase and under score identifier styles (2010) International Conference on Program Comprehension, pp. 196-205. , IEEE Computer Society Press; Lawrie, D., Morrell, C., Feild, H., Binkley, D., What's in a name? A study of identifiers (2006) International Conference on Program Comprehension, pp. 3-12. , IEEE Computer Society Press; Lawrie, D., Morrell, C., Feild, H., Binkley, D., Effective identifier names for comprehension and memory (2007) Journal Innovations in Systems and Software Engineering, 3 (4), pp. 303-318; Rilling, J., Klemola, T., Identifying comprehension bottlenecks using program slicing and cognitive complexity metrics (2003) International Workshop on Program Comprehension, pp. 115-124. , IEEE Computer Society Press; Deligiannis, I., Stamelos, I., Angelis, L., Roumeliotis, M., Shepperd, M., Controlled experiment investigation of an object oriented design heuristic for maintainability (2003) Journal of Systems and Software, 65 (2), pp. 127-139. , Feb; Deligiannis, I., Shepperd, M., Roumeliotis, M., Stamelos, I., An empirical investigation of an object-oriented design heuristic for maintainability (2004) Journal of Systems and Software, 72 (2), pp. 129-143; Bois, B.D., Demeyer, S., Verelst, J., Mens, T., Temmerman, M., Does god class decomposition affect comprehensibility? (2006) IASTED, pp. 346-355. , IASTED/ACTA Press; Abbes, M., Khomh, F., Guéhéneuc, Y.-G., Antoniol, G., An empirical study of the impact of antipatterns on program comprehension (2011) European Conference on Software Maintenance and Reengineering, pp. 181-190. , IEEE Computer Society Press; Li, W., Shatnawi, R., An empirical study of the bad smells and class error probability in the post-release object-oriented system evolution (2007) Journal of Systems and Software, 80 (7), pp. 1120-1128; Jeanmart, S., Gueheneuc, Y.-G., Sahraoui, H., Habra, N., Impact of the visitor pattern on program comprehension and maintenance International Symposium on Empirical Software Engineering and Measurement, 2009, pp. 69-78; Kendall, M.G., (1970) Rank Correlation Methods, , 4th ed. London: Griffin; Thurstone, L., A law of comparative judgement (1994) Psychological Review, 101 (2), p. 273286; Fleiss, J., Measuring nominal scale agreement among many raters (1971) Psychological Bulletin, 76 (5), pp. 378-382; Sim, J., Wright, C.C., The kappa statistic in reliability studies: Use, interpretation, and sample size requirements (2005) Physical Therapy, 85 (3), pp. 257-268. , March; Landis, J.R., Koch, G.G., The measurement of observer agreement for categorical data (1977) Biometrics, 33 (1), pp. 159-174; Weyuker, E.J., Evaluating software complexity measures (1988) IEEE Transactions on Software Engineering, 14, pp. 1357-1365; Beyer, D., Fararooy, A., Depdigger: A tool for detecting complex low-level dependencies Program Comprehension (ICPC), 2010 IEEE 18th International Conference on, 30 2010-july 2 2010, pp. 40-41},
correspondence_address1={Katzmarski, B.; Fachbereich Mathematik und Informatik, University of Bremen, Bremen, Germany; email: bkatzm@tzi.de},
sponsors={IEEE; IEEE Computer Society; Technical Council on Software Engineering (TCSE)},
publisher={IEEE Computer Society},
address={Passau},
isbn={9781467312165},
language={English},
abbrev_source_title={IEEE Int. Conf. Program Comprehension},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Scholz2011251,
author={Scholz, B. and Koschke, R.},
title={Object-based dynamic protocol recovery for multi-threading programs},
journal={Proceedings - Working Conference on Reverse Engineering, WCRE},
year={2011},
pages={251-260},
doi={10.1109/WCRE.2011.38},
art_number={6079849},
note={cited By 1; Conference of 18th Working Conference on Reverse Engineering, WCRE 2011 ; Conference Date: 17 October 2011 Through 20 October 2011;  Conference Code:87657},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-83455162482&doi=10.1109%2fWCRE.2011.38&partnerID=40&md5=38181ea83844537abb0b9fb61716268f},
affiliation={Fachbereich Mathematik und Informatik, University of Bremen, Bremen, Germany},
abstract={A protocol defines the sequencing constraints for the operations that can be applied to an object. Quante introduced a protocol recovery technique that is able to extract protocols from existing software by means of dynamic analysis. This approach represents the behavior as object process graphs (OPG). OPGs are a projection of the control flow graph reduced to the operations relevant to an individual object. The protocol is inferred from a set of OPGs. The extraction was designed to handle sequential programs only. As multi-core architectures and, hence, multi-threading becomes more and more common in nowadays programming, it is necessary to extend reverse engineering techniques for multi-threaded programs. In this paper, we extend Quante's approach to protocol reconstruction for programs with multiple threads. We are formalizing this process using concepts from automata theory, namely, product and shuffle automata. We present a naive approach to combine these concepts and a combined approach. Our evaluation for realistic Java programs demonstrates the scalability of the combined approach and the combinatorial explosion of the naive approach. © 2011 IEEE.},
author_keywords={automata theory;  dynamic analysis;  object process graphs;  product automata;  Protocol recovery;  shuffle automata},
keywords={Combinatorial explosion;  Control flow graphs;  Engineering techniques;  Individual objects;  Java program;  Multi-threaded programs;  Multi-threading;  Multicore architectures;  Multiple threads;  Object based;  Process graphs;  product automata;  Protocol recovery;  Sequential programs;  shuffle automata, Computer software;  Data flow analysis;  Dynamic analysis;  Java programming language;  Multicore programming;  Multiprocessing programs;  Recovery;  Reverse engineering, Automata theory},
references={Engler, D., Chelf, B., Chou, A., Hallem, S., Checking system rules using system-specific, programmer-written compiler extensions Proc. 4th Symp. on Operating System Design and Impl., 2000, pp. 1-16; Quante, J., Do dynamic object process graphs support program understanding? - A controlled experiment International Conference on Program Comprehension, 2008, pp. 73-82; Quante, J., (2009) Dynamic Object Process Graphs, , PhD dissertation, University of Bremen, Bremen, Germany; Quante, J., Koschke, R., Dynamic object process graphs (2008) Journal of Systems and Software, 81, pp. 481-501; Quante, J., Koschke, R., Dynamic protocol recovery Working Conference on Reverse Engineering, Oct. 2007, pp. 219-228; Quante, J., Online construction of dynamic object process graphs Conference on Software Maintenance and Reengineering, 2007, pp. 113-122; Quante, J., Koschke, R., Dynamic object process graphs Conference on Software Maintenance and Reengineering, 2006, pp. 81-90; Olender, K.M., Osterweil, L.J., Interprocedural static analysis of sequencing constraints (1992) ACM Transactions on Software Engineering and Methodology, 1 (1), pp. 21-52. , Jan; Whaley, J., Martin, M.C., Lam, M.S., Automatic extraction of object-oriented component interfaces Symposium on Software Testing and Analysis, 2002, pp. 218-228; Alur, R., Cerny, P., Madhusudan, P., Nam, W., Synthesis of interface specifications for java classes (2005) POPL, pp. 98-109; Dallmeier, V., Knopp, N., Mallon, C., Hack, S., Zeller, A., Generating test cases for specification mining International Symposium on Software Testing and Analysis, 2010, pp. 85-96; Ammons, G., Bodik, R., Larus, J.R., Mining specifications Proc. 29th Symp. on Principles of Prog. Languages (POPL), 2002, pp. 4-16; Biermann, A.W., Feldman, J.A., On the synthesis of finite-state machines from samples of their behaviour (1972) IEEE Trans. on Comp., 21, pp. 591-597; Richetin, M., Vernadet, F., Regular inference for syntactic pattern recognition: A case study Proc. 7th Intl. Conf. on Pattern Rec., 1984, pp. 1370-1372; Gabel, M., Su, Z., Javert: Fully automatic mining of general temporal properties from dynamic traces Conference Foundations of Software Engineering, 2008, pp. 339-349; Yang, J., Evans, D., Bhardwaj, D., Bhat, T., Das, M., Perracotta: Mining temporal api rules from imperfect traces Proc. of 28th ICSE, New York, NY, USA, 2006, pp. 282-291; Xie, T., Notkin, D., Automatic extraction of sliced object state machines for component interfaces Proc. 3rd Workshop on Specification and Verification of Component-Based Systems, 2004, pp. 39-46; Eisenbarth, T., Koschke, R., Vogel, G., Static object trace extraction for programs with pointers (2005) Journal of Systems and Software, 77 (3), pp. 263-284. , DOI 10.1016/j.jss.2004.04.028, PII S0164121204002079, Software Reverse Engineering; Raman, A., Patrick, J., The sk-strings method for inferring PFSA Proc. Workshop Automata Induction, Gramm. Inference and Lang. Acquisition, 1997; Ghezzi, C., Mocci, A., Monga, M., Synthesizing intensional behavior models by graph transformation International Conference on Software Engineering, 2009, pp. 430-440; Dallmeier, V., (2010) Mining and Checking Object Behavior, , PhD dissertation, University of Saarland, Saarbrcken, Germany; Pradel, M., Gross, T.R., Automatic generation of object usage specifications from large method traces (2009) International Conference on Automated Software Engineering, pp. 371-382; Lo, D., Khoo, S.-C., SMArTIC: Towards building an accurate, robust and scalable specification miner Conference Foundations of Software Engineering, 2006, pp. 265-275; Reiss, S.P., Renieris, M., Encoding program executions International Conference on Software Engineering, 2001, pp. 221-230; Salah, M., Denton, T., Mancoridis, S., Shokoufandeh, A., Vokolos, F.I., Scenariographer: A tool for reverse engineering class usage scenarios from method invocation sequences International Conference on Software Maintenance, 2005, pp. 155-164; Sekar, R., Bendre, M., Dhurjati, D., Bollineni, P., A fast automaton-based method for detecting anomalous program behaviors SP '01: Proc. of Symposium on Security and Privacy, 2001, pp. 144-155},
correspondence_address1={Scholz, B.; Fachbereich Mathematik und Informatik, University of Bremen, Bremen, Germany; email: bscholz@tzi.de},
sponsors={Reengineering Forum},
address={Limerick},
issn={10951350},
isbn={9780769545820},
language={English},
abbrev_source_title={Proc. Working Conf. Rev. Eng. WCRE},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Bazrafshan2011109,
author={Bazrafshan, S. and Koschke, R. and Göde, N.},
title={Approximate code search in program histories},
journal={Proceedings - Working Conference on Reverse Engineering, WCRE},
year={2011},
pages={109-118},
doi={10.1109/WCRE.2011.22},
art_number={6079833},
note={cited By 10; Conference of 18th Working Conference on Reverse Engineering, WCRE 2011 ; Conference Date: 17 October 2011 Through 20 October 2011;  Conference Code:87657},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-83455205912&doi=10.1109%2fWCRE.2011.22&partnerID=40&md5=95a22f7a9feef0b9f2014d80b17e53a9},
affiliation={University of Bremen, Bremen, Germany},
abstract={Very often a defect must be corrected not only in the current version of a program at one particular place but in many places and many other versions - possibly even in different development branches. Consequently, we need a technique to efficiently locate all approximate matches of an arbitrary defective code fragment in the program's history as they may need to be fixed as well. This paper presents an approximate whole-program code search in multiple releases and branches. We evaluate this technique for real-world defects of various large and realistic programs having multiple releases and branches. We report runtime measurements and recall using varying levels of allowable differences of the approximate search. © 2011 IEEE.},
author_keywords={approximate search;  clone detection;  incremental search},
keywords={Approximate matches;  approximate search;  Clone detection;  Code fragments;  Code search;  Incremental search;  Run-time measurement, Defects;  Reverse engineering, Codes (symbols)},
references={Aversano, L., Cerulo, L., Di Penta, M., How clones are maintained: An empirical study (2007) Proceedings of the 11th European Conference on Software Maintenance and Reengineering, pp. 81-90. , IEEE Computer Society; Bakota, T., Ferenc, R., Gyimóthy, T., Clone smells in software evolution (2007) Proceedings of the 23rd International Conference on Software Maintenance, pp. 24-33. , IEEE Computer Society; Jiang, L., Su, Z., Chiu, E., Context-based detection of clone-related bugs (2007) Proceedings of the 6th Joint Meeting on European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 55-64. , ACM; Juergens, E., Deissenboeck, F., Hummel, B., Wagner, S., Do code clones matter? (2009) Proceedings of the 31st International Conference on Software Engineering, pp. 485-495. , IEEE Computer Society; Li, Z., Lu, S., Myagmar, S., Zhou, Y., CP-Miner: Finding copy-paste and related bugs in large-scale software code (2006) IEEE Transactions on Software Engineering, 32 (3), pp. 176-192; Bazrafshan, S., (2010) Klonerkennung in Programmhistorien, , Diploma Thesis, University of Bremen; Baeza-Yates, R.A., Perleberg, C.H., Fast and practical approximate string matching (1996) Information Processing Letters, 59 (1), pp. 21-27. , A; Chang, W.I., Lawler, E.L., Approximate string matching in sublinear expected time (1990) Proceedings of the 31st Annual Symposium on Foundations of Computer Science, pp. 116-124. , IEEE Computer Society; Chang, W.I., Lawler, E.L., Sublinear approximate string matching and biological applications (1994) Algorithmica, 12 (4), pp. 327-344; Myers, E.W., A sublinear algorithm for approximate keyword searching (1994) Algorithmica, 12 (4), pp. 345-374; Gusfield, D., (2008) Algorithms on Strings, Trees and Sequences: Computer Science and Computational Biology, , New York, NY, USA: Cambridge University Press; Wu, S., Manber, U., Fast text searching: Allowing errors (1992) Communications of the ACM, 35 (10), pp. 83-91; Pevzner, P., Waterman, M., Multiple filtration and approximate pattern matching (1995) Algorithmica, 13 (1), pp. 135-154; Lee, M., Roh, J., Hwang, S., Kim, S., Instant code clone search (2010) Proceedings of the International Symposium on Foundations of Software Engineering, pp. 167-176. , ACM; Hummel, B., Juergens, E., Heinemann, L., Conradt, M., Index-based code clone detection: Incremental, distributed, scalable (2010) Proceedings of the 26th International Conference on Software Maintenance, , IEEE Computer Society; Roy, C.K., Cordy, J.R., (2007) A Survey on Software Clone Detection Research, , Queens University at Kingston, Ontario, Canada, Technical Report; Koschke, R., Survey of research on software clones (2007) Dagstuhl Seminar Proceedings, , Duplication, Redundancy, and Similarity in Software, ser. R. Koschke, E. Merlo, and A. Walenstein, Eds., no. 06301. Dagstuhl, Germany: Internationales Begegnungs- und Forschungszentrum für Informatik (IBFI), Schloss Dagstuhl, Germany; Göde, N., Koschke, R., Incremental clone detection (2009) Proceedings of the European Conference on Software Maintenance and Reengineering, pp. 219-228. , IEEE Computer Society; Göde, N., Koschke, R., Studying clone evolution using incremental clone detection (2010) Journal of Software Maintenance and Evolution: Research and Practice, , published online; Levenstein, V.I., Binary codes capable of correcting deletions insertions and reversals (1966) Sov. Phys. Dokl., 10, pp. 707-710; Sankoff, D., Cedergren, J., (1975) Time Warps, String Edits, and Macromolecules: The Theory and Practice of Sequence Comparison, , Reading, MA, USA: Addison-Wesley; McCreight, E.M., A space-economical suffix-tree construction algorithm (1976) Journal of the ACM, 23 (2), pp. 262-272; Ukkonen, E., On-line construction of suffix trees (1995) Algorithmica, 14, pp. 249-260; Ferragina, P., Grossi, R., Montagero, M., A note on updating suffix tree labels (1997) Proceedings of the Third Italian Conference on Algorithms and Complexity, pp. 181-192. , London, UK: Springer-Verlag; Göde, N., (2008) Incremental Clone Detection, , Diploma Thesis, University of Bremen, September; Chang, W.I., Lampe, J., Theoretical and empirical comparisons of approximate string matching algorithms (1992) LNCS, 644, pp. 175-184. , Proceedings of the Third Symposium on Combinatorial Pattern Matching. Springer; Stephen, G.A., (1994) String Searching Algorithms, , River Edge, NJ, USA: World Scientific; Bender, M.A., Farach-Colton, M., The LCA problem revisited Proceedings of the 4th Latin American Symposium on Theoretical Informatics, 2000, pp. 88-94; Landau, G., Vishkin, U., Introducing efficient parallelism into approximate string matching and a new serial algorithm Proceedings of ACM Symposium on the Theory of Computing, Berkeley, CA, USA, 1986, pp. 220-230; Landau, G.M., Vishkin, U., Nussinov, R., An efficient string matching algorithm with k differences for nucleotide and amino acid sequences (1986) Nucleic Acids Research, 14 (1), pp. 31-46; Myers, E.W., An o(nd) difference algorithm and its variations (1986) Algorithmica, 1, pp. 251-266; Cormen, T., Leiserson, C., Rivest, R., (1992) Introduction to Algorithms, , Cambridge, MA, USA: MIT Press and McGraw Hill; Skiena, S.S., (2008) The Algorithm Design Manual, , New York, NY, USA: Springer},
correspondence_address1={Bazrafshan, S.; University of Bremen, Bremen, Germany; email: saman.bazrafshan@informatik.uni-bremen.de},
sponsors={Reengineering Forum},
address={Limerick},
issn={10951350},
isbn={9780769545820},
language={English},
abbrev_source_title={Proc. Working Conf. Rev. Eng. WCRE},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Göde2011311,
author={Göde, N. and Koschke, R.},
title={Frequency and risks of changes to clones},
journal={Proceedings - International Conference on Software Engineering},
year={2011},
pages={311-320},
doi={10.1145/1985793.1985836},
note={cited By 88; Conference of 33rd International Conference on Software Engineering, ICSE 2011 ; Conference Date: 21 May 2011 Through 28 May 2011;  Conference Code:85380},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-79959897807&doi=10.1145%2f1985793.1985836&partnerID=40&md5=0404a0c3d78058cc08c77bafa25b7a5d},
affiliation={University of Bremen, Bremen, Germany},
abstract={Code Clones - duplicated source fragments - are said to increase maintenance effort and to facilitate problems caused by inconsistent changes to identical parts. While this is certainly true for some clones and certainly not true for others, it is unclear how many clones are real threats to the system's quality and need to be taken care of. Our analysis of clone evolution in mature software projects shows that most clones are rarely changed and the number of unintentional inconsistent changes to clones is small. We thus have to carefully select the clones to be managed to avoid unnecessary effort managing clones with no risk potential. © 2011 ACM.},
author_keywords={clone detection;  clone evolution;  software maintenance},
keywords={Clone detection;  clone evolution;  Code clone;  Risk potentials;  Software project;  System's quality, Cloning;  Software engineering, Computer software maintenance},
references={Aversano, L., Cerulo, L., Di Penta, M., How clones are maintained: An empirical study (2007) CSMR, , IEEE; Baker, B.S., Parameterized duplication in strings: Algorithms and an application to software maintenance (1997) Journal on Computing, 26 (5); Bakota, T., Ferenc, R., Gyimóthy, T., Clone smells in software evolution (2007) ICSM, , IEEE; Balazinska, M., Merlo, E., Dagenais, M., Lagüe, B., Kontogiannis, K., Advanced clone-analysis to support object-oriented system refactoring (2000) WCRE, , IEEE; Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., Clone detection using abstract syntax trees (1998) ICSM, , IEEE; De Wit, M., Zaidman, A., Van Deursen, A., Managing code clones using dynamic change tracking and resolution (2009) ICSM, , IEEE; Ducasse, S., Rieger, M., Demeyer, S., A language independent approach for detecting duplicated code (1999) ICSM, , IEEE; Göde, N., Evolution of type-1 clones (2009) SCAM, , IEEE; Göde, N., Koschke, R., Incremental clone detection (2009) CSMR, , IEEE; Göde, N., Koschke, R., Studying clone evolution using incremental clone detection (2010) JSME; Harder, J., Göde, N., Quo vadis, clone management? (2010) IWSC, , ACM; Higo, Y., Kamiya, T., Kusumoto, S., Inoue, K., Refactoring support based on code clone analysis (2004) LNCS, p. 3009; Jiang, L., Misherghi, G., Su, Z., Glondu, S., DECKARD: Scalable and accurate tree-based detection of code clones (2007) ICSE, , IEEE; Jiang, L., Su, Z., Chiu, E., Context-based detection of clone-related bugs (2007) ESEC/FSE, , ACM; Johnson, J.H., Identifying redundancy in source code using fingerprints (1993) CASCON, , IBM Press; Juergens, E., Deissenboeck, F., How much is a clone? (2010) SQM; Juergens, E., Deissenboeck, F., Hummel, B., Wagner, S., Do code clones matter? (2009) ICSE, , IEEE; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multilinguistic token-based code clone detection system for large scale source code (2002) TSE, 28 (7); Kapser, C.J., Godfrey, M.W., "Cloning considered harmful" considered harmful: Patterns of cloning in software (2008) ESE, 13 (6); Kim, M., Sazawal, V., Notkin, D., Murphy, G.C., An empirical study of code clone genealogies (2005) ESEC/FSE, , ACM; Komondoor, R.V., Horwitz, S., Using slicing to identify duplication in source code (2001) SAS, , Springer-Verlag; Koschke, R., Survey of research on software clones (2007) Duplication, Redundancy, and Similarity in Software, , R. Koschke, E. Merlo, and A. Walenstein, editors, number 06301 in Dagstuhl Seminar Proceedings; Krinke, J., Identifying similar code with program dependence graphs (2001) WCRE, , IEEE; Krinke, J., A study of consistent and inconsistent changes to code clones (2007) WCRE, , IEEE; Li, Z., Lu, S., Myagmar, S., Zhou, Y., CP-Miner: Finding copy-paste and related bugs in large-scale software code (2006) TSE, 32 (3); Lozano, A., Wermelinger, M., Assessing the effect of clones on changeability (2008) ICSM, , IEEE; Lozano, A., Wermelinger, M., Nuseibeh, B., Evaluating the harmfulness of cloning: A change based experiment (2007) MSR, , IEEE; Mayrand, J., Leblanc, C., Merlo, E., Experiment on the automatic detection of function clones in a software system using metrics (1996) ICSM, , IEEE; Myers, E.W., An O(ND) difference algorithm and its variations (1986) Algorithmica, 1 (2); Nguyen, T.T., Nguyen, H.A., Pham, N.H., Al-Kofahi, J.M., Nguyen, T.N., Clone-aware configuration management (2009) ASE, , IEEE; Roy, C.K., Cordy, J.R., (2007) A Survey on Software Clone Detection Research, , Technical report, Queens University at Kingston, Ontario, Canada; Thummalapenta, S., Cerulo, L., Aversano, L., Di Penta, M., An empirical study on the maintenance of source code clones (2010) ESE, 15 (1); Toomim, M., Begel, A., Graham, S.L., Managing duplicated code with linked editing (2004) Symposium on Visual Languages and Human Centric Computing, , IEEE; Ueda, Y., Kamiya, T., Kusumoto, S., Inoue, K., On detection of gapped code clones using gap locations (2002) APSEC, , IEEEy},
correspondence_address1={Göde, N.; University of Bremen, Bremen, Germany; email: nils@informatik.uni-bremen.de},
sponsors={Assoc. Comput. Mach., Spec. Interest Group Softw.; Eng. (ACM SIGSOFT); IEEE Computer Society; Technical Council on Software Engineering (TCSE)},
address={Waikiki, Honolulu, HI},
issn={02705257},
isbn={9781450304450},
coden={PCSED},
language={English},
abbrev_source_title={Proc Int Conf Software Eng},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Cordy20111210,
author={Cordy, J.R. and Inoue, K. and Jarzabek, S. and Koschke, R.},
title={Fifth International Workshop on Software Clones (IWSC 2011)},
journal={Proceedings - International Conference on Software Engineering},
year={2011},
pages={1210-1211},
doi={10.1145/1985793.1986050},
note={cited By 0; Conference of 33rd International Conference on Software Engineering, ICSE 2011 ; Conference Date: 21 May 2011 Through 28 May 2011;  Conference Code:85380},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-79959892627&doi=10.1145%2f1985793.1986050&partnerID=40&md5=c4ad65cf562c83fed90637034d2dc3e4},
affiliation={Queen's University, Kingston, ON, Canada; Osaka University, Osaka, Japan; National University of Singapore, Singapore, Singapore; University of Bremen, Bremen, Germany},
abstract={Software clones are identical or similar pieces of code, design or other artifacts. Clones are known to be closely related to various issues in software engineering, such as software quality, complexity, architecture, refactoring, evolution, licensing, plagiarism, and so on. Various characteristics of software systems can be uncovered through clone analysis, and system restructuring can be performed by merging clones. The goals of this workshop are to bring together researchers and practitioners from around the world to evaluate the current state of research and applications, discuss common problems, discover new opportunities for collaboration, exchange ideas, envision new areas of research and applications, and explore synergies with similarity analysis in other areas and disciplines. © 2011 ACM.},
author_keywords={clone detection;  reverse engineering;  software clones;  software maintenance},
keywords={Clone analysis;  Clone detection;  Common problems;  International workshops;  Refactorings;  Research and application;  Similarity analysis;  Software clones;  Software Quality;  Software systems;  State of research, Cloning;  Computer software selection and evaluation;  Research;  Reverse engineering;  Software engineering, Computer software maintenance},
references={Basit, H., Ali, U., Jarzabek, S., Viewing Simple Clones from a Structural Clones Perspective Proc. Fifth Intl. Workshop on Software Clones, 2011; Choi, E., Yoshida, N., Ishio, T., Inoue, K., Sano, T., Extracting Code Clones for Refactoring Using Combinations of Clone Metrics Proc. Fifth Intl. Workshop on Software Clones, 2011; Göde, N., Harder, J., Oops!... I Changed It Again Proc. Fifth Intl. Workshop on Software Clones, 2011; Hummel, B., Juergens, E., Steidl, D., Index-Based Model Clone Detection Proc. Fifth Intl. Workshop on Software Clones, 2011; Krinke, J., Is Cloned Code older than Non-Cloned Code? Proc. Fifth Intl. Workshop on Software Clones, 2011; Lavoie, T., Merlo, E., Automated Type III Clone Oracle Using Levenshtein Metric Proc. Fifth Intl. Workshop on Software Clones, 2011; Martin, D., Cordy, J.R., Analyzing Web Service Similarity Using Contextual Clones Proc. Fifth Intl. Workshop on Software Clones, 2011; Schugerl, P., Scalable Clone Detection Using Description Logic Proc. Fifth Intl. Workshop on Software Clones, 2011; Tairas, R., Jacob, F., Gray, J., Representing Clones in a Localized Manner Proc. Fifth Intl. Workshop on Software Clones, 2011; Carver, J., Chatterji, D., Kraft, N., On the Need for Human-based Empirical Validation of Techniques and Tools for Code Clone Analysis Proc. Fifth Intl. Workshop on Software Clones, 2011; Dang, Y., Ge, S., Zhang, D., Code Clone Detection Experience at Microsoft Proc. Fifth Intl. Workshop on Software Clones, 2011; Godfrey, M., Davis, J., German, D., Hindle, A., Determining the provenance of software artifacts Proc. Fifth Intl. Workshop on Software Clones, 2011; Juergens, E., Research in Cloning Beyond Code: A First Roadmap Proc. Fifth Intl. Workshop on Software Clones, 2011; Kamiya, T., How Code Skips over Revisions Proc. Fifth Intl. Workshop on Software Clones, 2011; Saha, R., Roy, C.K., Schneider, K., Visualizing the Evolution of Code Clones Proc. Fifth Intl. Workshop on Software Clones, 2011; Santone, A., Clone detection through Process Algebras and Java Bytecode Proc. Fifth Intl. Workshop on Software Clones, 2011; Zibran, M., Roy, C., Towards Flexible Code Clone Detection, Management, and Refactoring in IDE Proc. Fifth Intl. Workshop on Software Clones, 2011; Asaduzzaman, M., Roy, C.K., Schneider, K., VisCad: Flexible Code Clone Analysis Support for NiCad Proc. Fifth Intl. Workshop on Software Clones, 2011; Cordy, J.R., Live Scatterplots Proc. Fifth Intl. Workshop on Software Clones, 2011; Harder, J., Göde, N., Efficiently Handling Clone Data: RCF and cyclone Proc. Fifth Intl. Workshop on Software Clones, 2011; Xue, Y., Xing, Z., Jarzabek, S., CloneDiff: Semantic Differencing of Clones Proc. Fifth Intl. Workshop on Software Clones, 2011},
correspondence_address1={Cordy, J. R.; Queen's University, Kingston, ON, Canada; email: cordy@cs.queensu.ca},
sponsors={Assoc. Comput. Mach., Spec. Interest Group Softw.; Eng. (ACM SIGSOFT); IEEE Computer Society; Technical Council on Software Engineering (TCSE)},
address={Waikiki, Honolulu, HI},
issn={02705257},
isbn={9781450304450},
coden={PCSED},
language={English},
abbrev_source_title={Proc Int Conf Software Eng},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Cordy2011,
author={Cordy, J.R. and Inoue, K. and Jarzabek, S. and Koschke, R.},
title={Proceedings - International Conference on Software Engineering: Foreword},
journal={Proceedings - International Conference on Software Engineering},
year={2011},
pages={v},
note={cited By 0; Conference of 5th International Workshop on Software Clones, IWSC 2011, Co-located with ICSE 2011 ; Conference Date: 23 May 2011 Through 23 May 2011;  Conference Code:85276},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-79959542072&partnerID=40&md5=e8436457bc4f306042663a84afec1b0c},
correspondence_address1={Cordy, J. R.},
sponsors={ACM SIGSOFT; IEEE CS},
address={Waikiki, Honolulu, HI},
issn={02705257},
isbn={9781450305884},
coden={PCSED},
language={English},
abbrev_source_title={Proc Int Conf Software Eng},
document_type={Editorial},
source={Scopus},
}

@CONFERENCE{Mende2011259,
author={Mende, T. and Koschke, R. and Peleska, J.},
title={On the utility of a defect prediction model during HW/SW integration testing: A retrospective case study},
journal={Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR},
year={2011},
pages={259-268},
doi={10.1109/CSMR.2011.32},
art_number={5741333},
note={cited By 3; Conference of 2011 15th European Conference on Software Maintenance and Reengineering, CSMR 2011 ; Conference Date: 1 March 2011 Through 4 March 2011;  Conference Code:84629},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-79955164128&doi=10.1109%2fCSMR.2011.32&partnerID=40&md5=73870c9a6144522477e1d574c25ad9bd},
affiliation={Fachbereich Mathematik und Informatik, University of Bremen, Bremen, Germany},
abstract={Testing is an important and cost-intensive part of the software development life cycle. Defect prediction models try to identify error-prone components, so that these can be tested earlier or more in-depth, and thus improve the cost-effectiveness during testing. Such models have been researched extensively, but whether and when they are applicable in practice is still debated. The applicability depends on many factors, and we argue that it cannot be analyzed without a specific scenario in mind. In this paper, we therefore present an analysis of the utility for one case study, based on data collected during the hardware/software integration test of a system from the avionic domain. An analysis of all defects found during this phase reveals that more than half of them are not identifiable by a codebased defect prediction model. We then investigate the predictive performance of different prediction models for the remaining defects. The small ratio of defective instances results in relatively poor performance. Our analysis of the cost-effectiveness then shows that the prediction model is not able to outperform simple models, which order files either randomly or by lines of code. Hence, in our setup, the application of defect prediction models does not offer any advantage in practice. © 2011 IEEE.},
author_keywords={Defect prediction models;  Empirical case study;  Software metrics},
keywords={Avionic domains;  Cost-intensive;  Defect prediction models;  Empirical case study;  Error prones;  Hardware/software integration;  Integration testing;  Lines of code;  Poor performance;  Prediction model;  Predictive performance;  Software development life cycle;  Software metrics, Computer software maintenance;  Cost effectiveness;  Defects;  Forecasting;  Maintainability;  Mathematical models;  Reengineering;  Research;  Software design, Cost benefit analysis},
references={Fenton, N., Ohlsson, N., Quantitative analysis of faults and failures in a complex software system (2000) Transactions on Software Engineering, 26 (8), pp. 797-814; Ohlsson, N., Alberg, H., Predicting Fault-Prone Software Modules in Telephone Switches (1996) IEEE Transactions on Software Engineering, 22 (12), pp. 886-894; Ostrand, T.J., Weyuker, E.J., Bell, R.M., Predicting the location and number of faults in large software systems (2005) IEEE Transactions on Software Engineering, 31 (4), pp. 340-355. , DOI 10.1109/TSE.2005.49; Menzies, T., Greenwald, J., Frank, A., Data mining static code attributes to learn defect predictors (2007) IEEE Transactions on Software Engineering, 33 (1), pp. 2-13. , DOI 10.1109/TSE.2007.256941; Nagappan, N., Murphy, B., Basili, V., The influence of organizational structure on software quality: An empirical case study (2008) International Conference on Software Engineering, pp. 521-530. , New York, NY, USA: ACM; Lessmann, S., Baesens, B., Mues, C., Pietsch, S., Benchmarking classification models for software defect prediction: A proposed framework and novel findings (2008) Transactions on Software Engineering, 34 (4), pp. 485-496; Mende, T., Koschke, R., Revisiting the evaluation of defect prediction models (2009) 5th International Conference on Predictor Models in Software Engineering, pp. 1-10. , New York, NY, USA; Menzies, T., Milton, Z., Turhan, B., Cukic, B., Jiang, Y., Bener, A., Defect prediction from static code features: Current results, limitations, new approaches (2010) Automated Software Engg., 17, pp. 375-407. , December; Arisholm, E., Briand, L.C., Fuglerud, M., Data mining techniques for building fault-proneness models in telecom Java software (2007) 18th IEEE International Symposium on Software Reliability Engineering, pp. 215-224; Fenton, N.E., Neil, M., Critique of software defect prediction models (1999) IEEE Transactions on Software Engineering, 25 (5), pp. 675-689. , DOI 10.1109/32.815326; Bird, C., Bachmann, A., Aune, E., Duffy, J., Bernstein, A., Filkov, V., Devanbu, P., Fair and balanced?: Bias in bug-fix datasets (2009) ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 121-130; Zimmermann, T., Premraj, R., Zeller, A., Predicting defects for eclipse (2007) Predictor Models in Software Engineering, , May; Turhan, B., Menzies, T., Bener, A.B., Di Stefano, J., On the relative value of cross-company and within-company data for defect prediction (2009) Empirical Software Engineering, 14 (5), pp. 540-578; Hassan, A.E., Predicting faults using the complexity of code changes (2009) International Conference on Software Engineering, pp. 78-88. , IEEE Computer Society; Gyimothy, T., Ferenc, R., Siket, I., Empirical validation of object-oriented metrics on open source software for fault prediction (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 897-910. , DOI 10.1109/TSE.2005.112; Zimmermann, T., Nagappan, N., Predicting defects using network analysis on dependency graphs (2008) International Conference on Software Engineering, pp. 531-540. , New York, NY, USA: ACM; Bird, C., Nagappan, N., Devanbu, P.T., Gall, H., Murphy, B., Does distributed development affect software quality? an empirical case study of Windows Vista (2009) International Conference on Software Engineering, pp. 518-528; Arisholm, E., Briand, L.C., Johannessen, E.B., A systematic and comprehensive investigation of methods to build and evaluate fault prediction models (2010) Journal of Systems Software, 83, pp. 2-17; Zimmermann, T., Nagappan, N., Gall, H., Giger, E., Murphy, B., Cross-project defect prediction: A large scale experiment on data vs. domain vs. process (2009) ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 91-100. , New York, NY, USA: ACM; Mende, T., Koschke, R., Leszak, M., Evaluating defect prediction models for a large, evolving software system (2009) European Conference on Software Maintenance and Reengineering, pp. 247-250. , IEEE Press; Zhang, H., Zhang, X., Comments on data mining static code attributes to learn defect predictors (2007) Transactions on Software Engineering, 33 (9), pp. 635-637; Menzies, T., Dekhtyar, A., Distefano, J., Greenwald, J., Problems with precision: A response to "Comments on 'data mining static code attributes to learn defect predictors'" (2007) IEEE Transactions on Software Engineering, 33 (9), pp. 637-640. , DOI 10.1109/TSE.2007.70721; Arisholm, E., Briand, L.C., Predicting fault-prone components in a Java legacy system (2006) ISCE'06 - Proceedings of the 5th ACM-IEEE International Symposium on Empirical Software Engineering, 2006, pp. 8-17. , DOI 10.1145/1159733.1159738, ISCE'06 - Proceedings of the 5th ACM-IEEE International Symposium on Empirical Software Engineering; Peleska, J., Formal methods for test automation - Hard realtime testing of controllers for the Airbus aircraft family (2002) 6th Biennial World Conference on Integrated Design & Process Technology, , Pasadena, California, June 23-28, 2002. Society for Design and Process Science, Jun; McCabe, T.J., A complexity measure (1976) Transactions on Software Engineering, 2 (4), pp. 308-320; Halstead, M.H., (1977) Elements of Software Science, , New York, NY, USA: Elsevier Science Inc; Breiman, L., Random forests (2001) Machine Learning, 45 (1), pp. 5-32. , DOI 10.1023/A:1010933404324; Team, R.R.D.C., (2010) A Language and Environment for Statistical Computing R Foundation for Statistical Computing Vienna Austria, , http://www.R-project.org, ISBN 3-900051-07-0. [Online]. Available; Liaw, A., Wiener, M., Classification and regression by randomForest (2002) R News, 2 (3), pp. 18-22. , http://CRAN.R-project.org/doc/Rnews/, [Online]. Available; Rothermel, G., Untcn, R.H., Chu, C., Harrold, M.J., Prioritizing test cases for regression testing (2001) IEEE Transactions on Software Engineering, 27 (10), pp. 929-948. , DOI 10.1109/32.962562; Kameia, Y., Matsumoto, S., Monden, A., Ichi Matsumoto, K., Adams, B., Hassan, A.E., Revisiting common bug prediction findings using effort-aware models (2010) International Conference on Software Maintenance; Bruntink, M., Van Deursen, A., Predicting class testability using object-oriented metrics (2004) Proceedings - Fourth IEEE International Workshop on Source Code Analysis and Manipulation, pp. 136-145. , Proceedings - Fourth IEEE International Workshop on Source Code Analysis and Manipulation; Mende, T., Koschke, R., Effort-aware defect prediction models (2010) European Conference on Software Maintenance and Reengineering, pp. 109-118; Mende, T., Replication of defect prediction studies: Problems, pitfalls and recommendations (2010) 6th Intern. Conference on Predictor Models in Software Engineering, pp. 1-10. , September},
correspondence_address1={Mende, T.; Fachbereich Mathematik und Informatik, University of Bremen, Bremen, Germany; email: tmende@informatik.uni-bremen.de},
sponsors={Carl von Ossietzky University Oldenburg; OFFIS Institute for Information Technology; Reengineering Forum (REF); Eur. Res. Consort. Informatics Math.; (ERCIM) Working Group Softw. Evol.; GI-Fachgruppe Software Reengineering (SRE)},
address={Oldenburg},
issn={15345351},
isbn={9780769543437},
language={English},
abbrev_source_title={Proc. Eur. Conf. Software Maint. Reeng.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Tiarks2011295,
author={Tiarks, R. and Koschke, R. and Falke, R.},
title={An extended assessment of type-3 clones as detected by state-of-the-art tools},
journal={Software Quality Journal},
year={2011},
volume={19},
number={2},
pages={295-331},
doi={10.1007/s11219-010-9115-6},
note={cited By 16},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-79952814906&doi=10.1007%2fs11219-010-9115-6&partnerID=40&md5=21715633a0040d590342fbcf79f9fd6d},
affiliation={University of Bremen, 28359 Bremen, Germany},
abstract={Code reuse through copying and pasting leads to so-called software clones. These clones can be roughly categorized into identical fragments (type-1 clones), fragments with parameter substitution (type-2 clones), and similar fragments that differ through modified, deleted, or added statements (type-3 clones). Although there has been extensive research on detecting clones, detection of type-3 clones is still an open research issue due to the inherent vagueness in their definition. In this paper, we analyze type-3 clones detected by state-of-the-art tools and investigate type-3 clones in terms of their syntactic differences. Then, we derive their underlying semantic abstractions from their syntactic differences. Finally, we investigate whether there are code characteristics that indicate that a tool-suggested clone candidate is a real type-3 clone from a human's perspective. Our findings can help developers of clone detectors and clone refactoring tools to improve their tools. © 2010 Springer Science+Business Media, LLC.},
author_keywords={Clone categorization;  Software clones;  Type-3 clones},
references={Baker, B.S., On finding duplication and near-duplication in large software systems (1995) Proceedings of WCRE, pp. 86-95. , In L. Wills, P. Newcomb, & E. Chikofsky (Eds.); Balazinska, M., Merlo, E.M., Dagenais, M., Lague, B., Kontogiannis, K., Measuring clone based reengineering opportunities (1999) IEEE Symposium On Software Metrics, pp. 292-303. , IEEE Computer Society Press; Balazinska, M., Merlo, E., Dagenais, M., Lague, B., Kontogiannis, K., Advanced clone-analysis to support object-oriented system refactoring (2000) In WCRE, pp. 98-107. , IEEE Computer Society Press; Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., Clone detection using abstract syntax trees (1998) ICSM, pp. 368-378. , In T. M. Koshgoftaar & K. Bennett (Eds.); Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) IEEE Computer Society Transactions On Software Engineering, 33, pp. 577-591; Chen, X., Kwong, S., Li, M., A compression algorithm for dna sequences and its applications in genome comparison (2000) RECOMB'00: Proceedings of the Fourth Annual International Conference On Computational Molecular Biology, p. 107. , New York, NY, USA: ACM. doi:10.1145/332306.332352; Chen, X., Francia, B., Li, M., McKinnon, B., Seker, A., (2004) Shared Information and Program Plagiarism Detection. Transactions On Information Theory, 50 (7), pp. 1545-1551. , doi:10.1109/TIT.2004.830793; Dijkstra, E.W., A note on two problems in connexion with graphs (1959) Numerische Mathematik, 1, pp. 269-271; Ducasse, S., Rieger, M., Demeyer, S., A language independent approach for detecting duplicated code (1999) ICSM'99: Proceedings of the IEEE International Conference On Software Maintenance, p. 109. , Washington, DC, USA: IEEE Computer Society; Evans, W.S., Fraser, C.W., Ma, F., Clone detection via structural abstraction (2007) In WCRE, pp. 150-159; Falke, R., Koschke, R., Frenzel, P., Empirical evaluation of clone detection using syntax suffix trees (2008) Empirical Software Engineering, 13 (6), pp. 601-643. , doi:10.1007/s10664-008-9073-9; Frenzel, P., Koschke, R., Breu, A.P.J., Angstmann, K., Extending the reflection method for consolidating software variants into product lines (2007) InWCRE, pp. 160-169. , IEEE Computer Society Press; Higo, Y., Kamiya, T., Kusumoto, S., Inoue, K., Aries: Refactoring support environment based on code clone analysis (2004) In IASTED Conference On Software Engineering and Applications, pp. 222-229; Higo, Y., Kamiya, T., Kusumoto, S., Inoue, K., Method and implementation for investigating code clones in a software system (2007) Information and Software Technology, 49 (9-10), pp. 985-998; Jia, Y., Binkley, D., Harman, M., Krinke, J., Matsushita, M., Kclone: A proposed approach to fast precise code clone detection (2009) In Proceedings of CSMR'09, pp. 12-16; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multilinguistic token-based code clone detection system for large scale source code (2002) IEEE Computer Society Transactions On Software Engineering, 28 (7), pp. 654-670; Kapser, C., Anderson, P., Godfrey, M., Koschke, R., Rieger, M., van Rysselberghe, F., Weißgerber, P., Subjectivity in clone judgment: Can we ever agree? (2007) Duplication, Redundancy, and Similarity In Software, Dagstuhl Seminar Proceedings, , No. 06301; Kapser, C.J., Godfrey, M.W., A taxonomy of clones in source code: The re-engineers most wanted list (2003) Proceedings of IWDSC'03; Kapser, C.J., Godfrey, M.W., Toward a taxonomy of clones in source code: A case study (2003) In Evolution of Large Scale Industrial Software Architectures, pp. 67-78; Kapser, C.J., Godfrey, M.W., Supporting the analysis of clones in software systems: Research articles (2006) Journal of Software Maintenance and Evolution, 18 (2), pp. 61-82; Koschke, R., Survey of research on software clones (2007) Duplication, Redundancy, and Similarity In Software, , In R. Koschke, E. Merlo, & A. Walenstein (Eds.), Dagstuhl seminar proceedings; Koschke, R., Frontiers in software clone management (2008) Proceedings of the International Conference On Software Maintenance; Koschke, R., (2008) Identifying and Removing Software Clones, pp. 15-39. , chap. 2, Berlin: Springer; Koschke, R., Girard, J.F., Intermediate representations for reverse engineering (1998) WCRE, pp. 241-250. , IEEE Computer Society Press; Koschke, R., Frenzel, P., Breu, A.P., Angstmann, K., Extending the reflexion method for consolidating software variants into product lines (2009) Software Quality Journal, 17 (4), pp. 331-366; Krinke, J., Identifying similar code with program dependence graphs (2001) In WCRE, pp. 301-309; Li, M., Chen, X., Li, X., Ma, B., The similarity metric (2004) Transactions On Information Theory, 50 (12), pp. 3250-3264; Mayrand, J., Leblanc, C., Merlo, E., Experiment on the automatic detection of function clones in a software system using metrics (1996) ICSM, p. 244. , IEEE Computer Society; Mende, T., Beckwermert, F., Koschke, R., Meier, G., Supporting the grow-and-prune model in software product lines evolution using clone detection (2008) European Conference On Software Maintenance and Reengineering, pp. 163-172. , IEEE Computer Society Press; Mende, T., Koschke, R., Beckwermert, F., An evaluation of code similarity identification for the growand-prunemodel (2009) Journal of SoftwareMaintenance AndEvolution:Research and Practice, 21 (2), pp. 143-169; Nevill-Manning, C.G., Witten, I.H., Linear-time, incremental hierarchy inference for compression (1997) DCC, pp. 3-11. , Washington, DC, USA: IEEE Computer Society; Quinlan, J.R., (1993) C4.5: Programs For Machine Learning, , San Francisco, CA, USA: Morgan Kaufmann Publishers Inc; Roy, C.K., Cordy, J.R., (2007) A Survey On Software Clone Detection Research. Technical Report No. 2007-541, , Ontario, Canada: School of Computing, Queen's University at Kingston; Roy, C.K., Cordy, J.R., Koschke, R., Comparison and evaluation of code clone detection techniques and tools: A qualitative approach (2009) Journal of Science of Computer Programming, , doi: 10.1016/j.scico.2009.02.007, accepted for publication; Selkow, S.M., The tree-to-tree editing problem (1977) Information Processing Letters, 6 (6), pp. 184-186. , doi: 10.1016/0020-0190(77)90064-3; Shasha, D., Zhang, K., Fast parallel algorithms for the unit cost editing distance between trees (1989) SPAA'89: Proceedings of the First Annual ACM Symposium On Parallel Algorithms and Architectures, pp. 117-126. , New York, NY, USA: ACM. doi:10.1145/72935.72949; Smith, R., Horwitz, S., (2009) Detecting and Measuring Similarity In Code Clones; Tai, K.C., The tree-to-tree correction problem (1979) J ACM, 26 (3), pp. 422-433. , doi:10.1145/322139.322143; Tiarks, R., Koschke, R., Falke, R., An assessment of type-3 clones as detected by state-of-the-art tools (2009) Workshop Source Code Analysis and Manipulation, pp. 67-76. , IEEE Computer Society Press; Valiente, G., (2002) Algorithms On Trees and Graphs, , 1st Ed.. New York: Springer; Walenstein, A., (2007) Code Clones: Reconsidering Terminology, , Dagstuhl Seminar Proceedings, No. 06301; Walenstein, A., Jyoti, N., Li, J., Yang, Y., Lakhotia, A., Problems creating task-relevant clone detection reference data (2003) WCRE, , IEEE Computer Society Press; Walenstein, A., El-Ramly, M., Cordy, J.R., Mahdavi, K., Pizka, M., Ramalingam, G., von Gudenberg, J.W., (2007) Similarity In Programs. In Duplication, Redundancy, and Similarity In Software; Walenstein, A., Venable, M., Hayes, M., Thompson, C., Lakhotia, A., Exploiting similarity between variants to defeat malware (2007) Proceedings of BlackHat 2007 DC Briefings; Zhang, K., Algorithms for the constrained editing distance between ordered labeled trees and related problems (1995) Pattern Recognition, 28 (3), pp. 463-474. , doi:10.1016/0031-3203(94)00109-Y; Zhang, K., Shasha, D., Simple fast algorithms for the editing distance between trees and related problems (1989) SIAM Journal On Scientific Computing, 18 (6), pp. 1245-1262. , doi:10.1137/0218082; Ziv, J., Lempel, A., A universal algorithm for sequential data compression (1977) Transactions On Information Theory, 23 (3), pp. 337-343. , http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1055714, URL},
correspondence_address1={Koschke, R.; University of Bremen, 28359 Bremen, Germany; email: koschke@informatik.uni-bremen.de},
publisher={Kluwer Academic Publishers},
issn={09639314},
language={English},
abbrev_source_title={Softw. Qual. J.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Koschke20113,
author={Koschke, R. and Marcus, A. and Gannod, G.C.},
title={Guest editor's introduction to the special section on the 2009 International conference on program comprehension (ICPC 2009)},
journal={Software Quality Journal},
year={2011},
volume={19},
number={1},
pages={3-4},
doi={10.1007/s11219-010-9119-2},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-78751649640&doi=10.1007%2fs11219-010-9119-2&partnerID=40&md5=858427b8d615bb99de646f39eb3f076c},
affiliation={University of Bremen, Bremen, Germany; Wayne State University, Detroit, MI, United States; Miami University, Oxford, OH, United States},
correspondence_address1={Koschke, R.; University of Bremen, Bremen, Germany; email: koschke@tzi.de},
publisher={Kluwer Academic Publishers},
issn={09639314},
language={English},
abbrev_source_title={Softw. Qual. J.},
document_type={Editorial},
source={Scopus},
}

@CONFERENCE{Inoue2010,
author={Inoue, K. and Jarzabek, S. and Koschke, R. and Cordy, J.R.},
title={Proceedings - International Conference on Software Engineering: Foreword},
journal={Proceedings - International Conference on Software Engineering},
year={2010},
page_count={1},
note={cited By 0; Conference of 4th International Workshop on Software Clones, IWSC 2010, in Conjunction with the 32nd ACM/IEEE International Conference on Software Engineering, ICSE 2010 ; Conference Date: 2 May 2010 Through 8 May 2010;  Conference Code:81138},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954745724&partnerID=40&md5=67a7664d2cabd8c2b50db0891f03b2ff},
affiliation={Osaka University, Japan; National University of Singapore, Singapore, Singapore; University of Bremen, Germany; Queen's University, Canada},
correspondence_address1={Inoue, K.; Osaka UniversityJapan},
sponsors={ACM Special Interest Group on Software Engineering (SIGSOFT); IEEE CS},
address={Cape Town},
issn={02705257},
isbn={9781605589800},
coden={PCSED},
language={English},
abbrev_source_title={Proc Int Conf Software Eng},
document_type={Editorial},
source={Scopus},
}

@CONFERENCE{Koschke20101,
author={Koschke, R.},
title={Incremental reflexion analysis},
journal={Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR},
year={2010},
pages={1-10},
doi={10.1109/CSMR.2010.10},
art_number={5714412},
note={cited By 8},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-79952661229&doi=10.1109%2fCSMR.2010.10&partnerID=40&md5=fe032959d64b837a95a7768a1aba413a},
affiliation={Fachbereich Mathematik und Informatik, University of Bremen, Bremen, Germany},
abstract={Architecture conformance checking is implemented in many commercial and research tools. These tools typically implement the reflexion analysis originally proposed by Murphy and Notkin. This analysis allows for structural validation of an architecture model against a source model connected by a mapping from source entities onto architecture entities. Given this mapping, the reflexion analysis computes the discrepancies between the architecture model and source model automatically. The mapping process is usually highly interactive and the most time-consuming activity in the reflexion analysis. In current tools, the reflexion analysis must be repeated completely whenever the underlying source or architecture models or the mapping change. In large systems, the recomputation can hinder interactive use as a user expects an immediate response to his or her change. This paper describes an incremental reflexion analysis that does not require a complete repetition of the reflexion analysis. Instead, it repeats the analysis only for those parts that are influenced by a change. The incremental reflexion analysis is evaluated on large real-world systems. © 2010 IEEE.},
author_keywords={Architecture conformance;  Architecture reconstruction;  Reflexion analysis},
keywords={Architecture modeling;  Architecture models;  Architecture reconstruction;  Conformance checking;  Mapping process;  Real-world system;  Reflexion analysis;  Source modeling, Mapping},
references={Murphy, G.C., Notkin, D., Reengineering with reflexion models: A case study (1997) IEEE Computer, 30 (8), pp. 29-36. , Aug; (1998) Nikkei Computer, 19, pp. 161-169. , reprinted in, January; Murphy, G.C., Notkin, D., Sullivan, K., Software reflexion models: Bridging the gap between source and high-level models (1995) ACM SIGSOFT Symposium on the Foundations of Software Engineering., pp. 18-28. , ACM Press; Koschke, R., Frenzel, P., Breu, A.P., Angstmann, K., Reflexion method for product lines (2009) Software Quality Journal, , accepted for publication; Knodel, J., Muthig, D., Haury, U., Meier, G., Architecture compliance checking - Experiences from successful technology transfer to industry (2008) CSMR, pp. 43-52. , IEEE Press; Feilkas, M., Ratiu, D., Juergens, E., The loss of architectural knowledge during system evolution: An industrial case study (2009) International Conference on Program Comprehension, , IEEE Press; Koschke, R., Simon, D., Hierarchical reflexion models (2003) WCRE, pp. 36-45. , IEEE Press, Nov; Buckley, J., LeGear, A.P., Exton, C., Cadogan, R., Johnston, T., Looby, B., Koschke, R., Encapsulating targeted component abstractions using software Reflexion Modelling (2008) Journal of Software Maintenance and Evolution, 20 (2), pp. 107-134. , DOI 10.1002/smr.364; Knodel, J., Muthig, D., Rost, D., Constructive architecture compliance checking - An experiment on support by live feedback (2008) ICSM, pp. 287-296. , IEEE Press; Christl, A., Koschke, R., Storey, M.-A., Automated clustering to support the reflexion method (2007) Information and Software Technology, 49 (3), pp. 255-274. , DOI 10.1016/j.infsof.2006.10.015, PII S095058490600187X},
correspondence_address1={Koschke, R.; Fachbereich Mathematik und Informatik, University of Bremen, Bremen, Germany; email: koschke@tzi.de},
publisher={IEEE Computer Society},
issn={15345351},
isbn={9780769543215},
language={English},
abbrev_source_title={Proc. Eur. Conf. Software Maint. Reeng.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Mende2010107,
author={Mende, T. and Koschke, R.},
title={Effort-aware defect prediction models},
journal={Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR},
year={2010},
pages={107-116},
doi={10.1109/CSMR.2010.18},
art_number={5714425},
note={cited By 98},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-79952662958&doi=10.1109%2fCSMR.2010.18&partnerID=40&md5=331c53620488adae231e6f46e780838b},
affiliation={Fachbereich Mathematik und Informatik, University of Bremen, Bremen, Germany},
abstract={Defect Prediction Models aim at identifying errorprone modules of a software system to guide quality assurance activities such as tests or code reviews. Such models have been actively researched for more than a decade, with more than 100 published research papers. However, most of the models proposed so far have assumed that the cost of applying quality assurance activities is the same for each module. In a recent paper, we have shown that this fact can be exploited by a trivial classifier ordering files just by their size: such a classifier performs surprisingly good, at least when effort is ignored during the evaluation. When effort is considered, many classifiers perform not significantly better than a random selection of modules. In this paper, we compare two different strategies to include treatment effort into the prediction process, and evaluate the predictive power of such models. Both models perform significantly better when the evaluation measure takes the effort into account. © 2010 IEEE.},
author_keywords={Cost-benefits;  Defect prediction models;  Evaluation},
keywords={Defects;  Quality assurance;  Software testing, Cost benefits;  Defect prediction models;  Evaluation;  Evaluation measures;  Prediction process;  Predictive power;  Random selection;  Software systems, Forecasting},
references={Fenton, N., Ohlsson, N., Quantitative analysis of faults and failures in a complex software system (2000) IEEE Transactions on Software Engineering, 26 (8), pp. 797-814; Turney, P.D., Types of cost in inductive concept learning (2002) The Computing Research Repository, CSLG AND 0212034; Khoshgoftaar, T.M., Allen, E.B., Classification of faultprone software modules: Prior probabilities, costs, and model evaluation (1998) Empirical Software Engineering, 3 (3), pp. 275-298; Jiang, Y., Cukic, B., Misclassification cost-sensitive fault prediction models (2009) Proc. of the 5th PROMISE, pp. 1-10. , New York, NY, USA: ACM; Arisholm, E., Briand, L.C., Predicting fault-prone components in a Java legacy system (2006) ISCE'06 - Proceedings of the 5th ACM-IEEE International Symposium on Empirical Software Engineering, 2006, pp. 8-17. , DOI 10.1145/1159733.1159738, ISCE'06 - Proceedings of the 5th ACM-IEEE International Symposium on Empirical Software Engineering; Arisholm, E., Briand, L.C., Fuglerud, M., Data mining techniques for building fault-proneness models in telecom java software (2007) Proc. of the 18th ISSRE, pp. 215-224. , IEEE Press; Arisholm, E., Briand, L.C., Johannessen, E.B., A systematic and comprehensive investigation of methods to build and evaluate fault prediction models (2010) Journal of Systems and Software, 83 (1), pp. 2-17; Mende, T., Koschke, R., Revisiting the evaluation of defect prediction models (2009) Proc. of the 5th PROMISE; Menzies, T., Greenwald, J., Frank, A., Data mining static code attributes to learn defect predictors (2007) IEEE Transactions on Software Engineering, 33 (1), pp. 2-13. , DOI 10.1109/TSE.2007.256941; Hassan, A.E., Predicting faults using the complexity of code changes (2009) Proc. of the 31st ICSE, pp. 78-88. , Washington, DC, USA: IEEE Computer Society; Gyimothy, T., Ferenc, R., Siket, I., Empirical validation of object-oriented metrics on open source software for fault prediction (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 897-910. , DOI 10.1109/TSE.2005.112; Zimmermann, T., Nagappan, N., Zeller, A., (2008) Predicting Bugs from History., pp. 69-88. , Springer, March, ch. 4; Zimmermann, T., Nagappan, N., Predicting defects using network analysis on dependency graphs (2008) Proc. of the 30th ICSE, pp. 531-540. , New York, NY, USA: ACM; Bird, C., Nagappan, N., Devanbu, P.T., Gall, H., Murphy, B., Does distributed development affect software quality? An empirical case study of windows vista (2009) Proc. of the 31st ICSE, pp. 518-528; Fawcett, T., An introduction to ROC analysis (2006) Pattern Recognition Letters, 27 (8), pp. 861-874; Khoshgoftaar, T.M., Cukic, B., Seliya, N., An empirical assessment on program module-order models (2007) Quality Technology and Quantitative Management, 4 (2), pp. 171-190; Ostrand, T.J., Weyuker, E.J., Bell, R.M., Predicting the location and number of faults in large software systems (2005) IEEE Transactions on Software Engineering, 31 (4), pp. 340-355. , DOI 10.1109/TSE.2005.49; Mende, T., Koschke, R., Leszak, M., Evaluating defect prediction models for a large, evolving software system (2009) Proc. of the 13th CSMR., pp. 247-250. , IEEE Press; Knab, P., Pinzger, M., Bernstein, A., Predicting defect densities in source code files with decision tree learners (2006) Proc. of the Workshop on Mining Software Repositories, pp. 119-125. , New York, NY, USA: ACM; Nagappan, N., Ball, T., Use of relative code churn measures to predict system defect density (2005) Proc. of the 27th ICSE, pp. 284-292; Nagappan, N., Ball, T., Static analysis tools as early indicators of pre-release defect density (2005) Proc. of the 27th ICSE, pp. 580-586. , New York, NY, USA: ACM; Demsar, J., Statistical comparisons of classifiers over multiple data sets (2006) Journal of Machine Learning Research, 7, pp. 1-30. , http://jmlr.csail.mit.edu/papers/volume7/demsar06a/demsar06a.pdf; Lessmann, S., Baesens, B., Mues, C., Pietsch, S., Benchmarking classification models for software defect prediction: A proposed framework and novel findings (2008) IEEE Transactions on Software Engineering, 34 (4), pp. 485-496; Jiang, Y., Cukic, B., Ma, Y., Techniques for evaluating fault prediction models (2008) Empirical Software Engineering, 13 (5), pp. 561-595; Jiang, Y., Cukic, B., Menzies, T., Costs curve evaluation of fault prediction models (2008) Proc. of the 19th ISSRE., pp. 197-206. , IEEE Press; Khoshgoftaar, T.M., Allen, E.B., Ordering fault-prone software modules (2003) Software Quality Journal, 11 (1), pp. 19-37. , DOI 10.1023/A:1023632027907; Elkan, C., The foundations of cost-sensitive learning (2001) Proceedings of the 17th International Joint Conference on Artificial Intelligence, pp. 973-978; Domingos, P., Metacost: A general method for making classifiers cost sensitive (1999) Proc. of the 5th International Conference on Knowledge Discovery and Data Mining, pp. 155-164; Leszak, M., Software defect analysis of a multi-release telecommunications system (2005) Lecture Notes in Computer Science, 3547, pp. 98-114. , Product Focused Software Process Improvement: 6th International Conference, PROFES 2005. Proceedings; McCabe, T.J., A complexity measure (1976) IEEE Transactions on Software Engineering, 2 (4), pp. 308-320; Bruntink, M., Van Deursen, A., Predicting class testability using object-oriented metrics (2004) Proceedings - Fourth IEEE International Workshop on Source Code Analysis and Manipulation, pp. 136-145. , Proceedings - Fourth IEEE International Workshop on Source Code Analysis and Manipulation; Bruntink, M., Van Deursen, A., An empirical study into class testability (2006) Journal of Systems and Software, 79 (9), pp. 1219-1232. , DOI 10.1016/j.jss.2006.02.036, PII S0164121206000586, Selected Papaers From the Fourth Source Code Analysis and Manipulation (SCAM 2004) Workshop; Zimmermann, T., Premraj, R., Zeller, A., Predicting defects for eclipse (2007) Proc. of the 3rd PROMISE, , May; Halstead, M.H., (1977) Elements of Software Science, , New York, NY, USA: Elsevier Science Inc; Breiman, L., Random forests (2001) Machine Learning, 45 (1), pp. 5-32. , DOI 10.1023/A:1010933404324; (2008) R: A Language and Environment for Statistical Computing, R Foundation for Statistical Computing, , R Development Core Team, Vienna, Austria; Liaw, A., Wiener, M., Classification and regression by randomforest (2002) R News, 2 (3), pp. 18-22; Zhang, H., Zhang, X., Comments on "data mining static code attributes to learn defect predictors" (2007) IEEE Transactions on Software Engineering, 33 (9), pp. 635-637; Menzies, T., Dekhtyar, A., Distefano, J., Greenwald, J., Problems with precision: A response to "Comments on 'data mining static code attributes to learn defect predictors'" (2007) IEEE Transactions on Software Engineering, 33 (9), pp. 637-640. , DOI 10.1109/TSE.2007.70721; Friedman, M., The use of ranks to avoid the assumption of normality implicit in the analysis of variance (1937) Journal of the American Statistical Association, 32, pp. 675-701; Brefeld, U., Geibel, P., Wysotzki, F., Support Vector Machines with Example Dependent Costs (2003) LECTURE NOTES IN COMPUTER SCIENCE, (2837), pp. 23-34. , Machine Learning: ECML 2003; Geibel, P., Brefeld, U., Wysotzki, F., Learning linear classifiers sensitive to example dependent and noisy costs (2003) 5th International Symposium on Intelligent Data Analysis, pp. 167-178},
correspondence_address1={Mende, T.; Fachbereich Mathematik und Informatik, University of Bremen, Bremen, Germany; email: tmende@informatik.uni-bremen.de},
publisher={IEEE Computer Society},
issn={15345351},
isbn={9780769543215},
language={English},
abbrev_source_title={Proc. Eur. Conf. Software Maint. Reeng.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Tiarks200967,
author={Tiarks, R. and Koschke, R. and Falke, R.},
title={An assessment of type-3 clones as detected by state-of-the-art tools},
journal={9th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2009},
year={2009},
pages={67-76},
doi={10.1109/SCAM.2009.16},
art_number={5279980},
note={cited By 26; Conference of 9th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2009 ; Conference Date: 20 September 2009 Through 21 September 2009;  Conference Code:78514},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-72349089357&doi=10.1109%2fSCAM.2009.16&partnerID=40&md5=b83a79eead765017378f0f069190fefa},
affiliation={University of Bremen, Bremen, Germany},
abstract={Code reuse through copying and pasting leads to so-called software clones. These clones can be roughly categorized into identical fragments (type-1 clones), fragments with parameter substitution (type-2 clones), and similar fragments that differ through modified, deleted, or added statements (type-3 clones). Although there has been extensive research on detecting clones, detection of type-3 clones is still an open research issue due to the inherent vagueness in their definition. In this paper, we analyze type-3 clones detected by state-of-the-art tools and investigate type-3 clones in terms of their syntactic differences. Then, we derive their underlying semantic abstractions from their syntactic differences. Finally, we investigate whether there are any additional code characteristics that indicate that a tool-suggested clone candidate is a real type-3 clone from a human's perspective. Our findings can help developers of clone detectors to improve their tools. © 2009 IEEE.},
author_keywords={Clone categorization;  Software clones;  Type-3 clones},
keywords={Code reuse;  Research issues, Computer software reusability;  Syntactics, Cloning},
references={Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) IEEE Computer Society Transactions on Software Engineering, pp. 577-591. , Sep; Koschke, R., Frontiers in software clone management (2008) Proc. of the International Conference on Software Maintenance; Evans, W.S., Fraser, C.W., Ma, F., Clone detection via structural abstraction (2007) WCRE, pp. 150-159; Koschke, R., Survey of research on software clones (2007) ser. Dagstuhl Seminar Proceedings, , Duplication, Redundancy, and Similarity in Software, R. Koschke, E. Merlo, and A. Walenstein, Eds; Koschke, R., (2008) Identifying and Removing Software Clones, pp. 15-39. , Springer Verlag, ch. 2, pp; C. K. Roy and J. R. Cordy, A survey on software clone detection research, School of Computing, Queen's University at Kingston, Ontario, Canada, Technical Report No. 2007-541, 2007; Roy, C.K., Cordy, J.R., Koschke, R., Comparison and evaluation of code clone detection techniques and tools: A qualitative approach (2009) Journal of Science of Computer Programming, , accepted for publication; Walenstein, A., El-Ramly, M., Cordy, J.R., Mah-davi, W.S.K., Pizka, M., Ramalingam, G., von Gudenberg, J.W., Similarity in programs (2007) Duplication, Redundancy, and Similarity in Software; Mayrand, J., Leblanc, C., Merlo, E., Experiment on the automatic detection of function clones in a software system using metrics (1996) ICSM, p. 244. , IEEE Computer Society; Balazinska, M., Merlo, E., Dagenais, M., Lague, B., Kontogiannis, K., Advanced clone-analysis to support object-oriented system refactoring (2000) WCRE, pp. 98-107. , IEEE Computer Society Press, Oct; Kapser, C.J., Godfrey, M.W., Supporting the analysis of clones in software systems: Research articles (2006) Journal of Software Maintenance and Evolution, 18 (2), pp. 61-82; Kapser, C.J., Godfrey, M.W., Toward a taxonomy of clones in source code: A case study (2003) Evolution of Large Scale Industrial Software Architectures, pp. 67-78; -, A taxonomy of clones in source code: The re-engineers most wanted list, in In Proc. of IWDSC'03, 2003; A. Walenstein, Code clones: Reconsidering terminology, in Duplication, Redundancy, and Similarity in Software, ser. Dagstuhl Seminar Proceedings, No. 06301, 2007; Baker, B.S., On finding duplication and near-duplication in large software systems (1995) Proc. of WCRE, pp. 86-95. , L. Wills, P. Newcomb, and E. Chikofsky, Eds, July; Falke, R., Koschke, R., Frenzel, P., Empirical evaluation of clone detection using syntax suffix trees (2008) Empirical Software Engineering, 13 (6), pp. 601-643; Jia, Y., Binkley, D., Harman, M., Krinke, J., Matsushita, M., Kclone: A proposed approach to fast precise code clone detection (2009) Proc. of CSMR'09, pp. 12-16; Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., Clone detection using abstract syntax trees (1998) ICSM, pp. 368-378. , T. M. Koshgoftaar and K. Bennett, Eds; J. Krinke, Identifying similar code with program dependence graphs, in WCRE, 2001, pp. 301-309; Quinlan, J.R., (1993) C4.5: Programs for Machine Learning, , San Francisco, CA, USA: Morgan Kaufmann Publishers Inc, January},
correspondence_address1={Tiarks, R.; University of Bremen, Bremen, Germany; email: beccs@informatik.uni-bremen.de},
sponsors={CREST, King's College London; Informatics Circle of Research Excellence; Semantic Designs Inc.; IEEE Computer Society Technical Council on Software Engineering},
address={Edmonton, AB},
isbn={9780769537931},
language={English},
abbrev_source_title={IEEE Int. Work. Conf. Source Code Anal. Manip., SCAM},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koschke200915,
author={Koschke, R. and Tiarks, R.},
title={Have we already totally understood program comprehension? [Haben wir Programmverstehen schon ganz verstanden?]},
journal={CEUR Workshop Proceedings},
year={2009},
volume={537},
pages={15-26},
note={cited By 0; Conference of 1. Workshop des GI-Arbeitskreises Langlebige Softwaresysteme (L2S2): ""Design for Future - Langlebige Softwaresysteme"", Design4Future 2009 - 1st Workshop of the GI Working Group L2S2: ""Design for Future - Long-living Softw. Syst."", Design4Future 2009 ; Conference Date: 15 October 2009 Through 16 October 2009;  Conference Code:102350},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84893503274&partnerID=40&md5=784aa754dee9da3fd43e492836eb2636},
affiliation={Arbeitsgruppe Softwaretechnik, Fachbereich Mathematik und Informatik, Universitat Bremen, Postfach 33 04 40, 28334 Bremen, Germany},
references={Arisholm, L.C., Briand, E., Hove, S.E., Labiche, Y., The impact of UML documentation on software maintenance: An experimental evaluation (2006) IEEE Computer Society TSE, 32 (6), pp. 365-381. , Juni; Abran, A., Nguyenkim, H., Analysis of maintenance work categories through measurement Software Maintenance 1991 (1991) Proceedings. Conference on, pp. 104-113. , Seiten Oct; Arab, M., Enhancing program comprehension: Formatting and documenting (1992) SIGPLAN Not, 27 (2), pp. 37-46; Jay Arthur, L., (1988) Software Evolution: A Software Maintenance Challenge, 2. , John Wiley & Sons; Blinman, S., Cockburn, A., Program comprehension: Investigating the effects of naming style and documentation (2005) Proc. of AUIC'05, , Seiten 73-78, Darlinghurst, Australia, Australia. Australian Computer Society, Inc; Bennicke, M., Rust, H., Programmverstehen und statische Analysetechniken im Kontext des Reverse Engineering und der Qualitatssicherung (2004) Virtuelles Software Engineering Kompetenzzentrum, , April; Ruven, E., Brooks towards a theory of the comprehension of computer programs (1983) IJMMS, 18 (6), pp. 543-554; Chikofsky, E.J., James, H., Cross reverse engineering design recovery: A taxonomy (1990) IEEE Software, 7, p. 1. , 13-17, Januar; Cox, A., Fisher, M., O'brien, P., Theoretical considerations on navigating codespace with spatial cognition (2005) Proc. of PPIG'05, , Seiten 92-105; Martha, E., Jean Scholtz, C., Wiedenbeck, S., The roles beacons play in comprehension for novice and expert programmers (2002) Proc. PPIG'02, , Seiten 18-21; Dekel, U., Herbsleb, J., Improving api documentation usability with kneowledge pushing (2009) Proc. of ICSE'09; Dekel, U., James, D., Herbsleb reading the documentation of invoked api functions in program Comprehension (2009) Proc. of ICPC'09, , Seiten 168-177, Vancouver, Canada IEEE Computer Society; Fisher, M., Cox, A., Zhao, L., Using sex differences to link spatial cognition and program comprehension (2006) Proc. ICSM'06, , Seiten 289-298, Washington, DC, USA IEEE Computer Society; Fjeldstad, R.K., Hamlen, W.T., Application program maintenance study: Report to our respondents (1979) Proc. of GUIDE, 48. , Philadelphia, PA; Hofer, A., Walter, F., Tichy status of empirical research in software engineering (2006) Empirical Software Engineering Issues, , Seiten 10-19; Hussein, K., Tilevich, E., Ico Bukvic, I., Kim, S., Sonification design guidelines to enhance program comprehension (2009) Proc. ICPC'09, , Seiten 120-129, Vancouver, Canada IEEE Computer Society; Andrew, J., Htet, H.A., Brad, A., Eliciting design requirements for maintenance-Oriented IDEs: A detailed study of corrective and perfective maintenance tasks (2005) Proc. ICSE'05, , Seiten 126-135; Andrew, J., Robert Deline, K., Venolia, G., (2007) Information Needs in Collocated Software Development Teams. Proc. ICSE'07 Seiten 344-353; Jensen Ko, A., Individual differences in program comprehension strategies in an unfamiliar Programming System (2003) IWPC'03; Koschke, R., Plodereder, E., (1996) Ansatze des Programmverstehens, , Seiten 159-176. Deutscher Universitatsverlag/Gabler Vieweg Westdeutscher Verlag. Editor: Franz Lehner; Koenemann, J., Scott, P., Robertson. Expert problem solving strategies for program comprehension (1991) Proc. of SIGCHI'91, , Seiten 125-130, New York, NY, USA ACM; Kemerer, C.F., Slaughter, S., Methodologies for performing empirical studies: Report from wess'97 (1997) EMSE, 2 (2), pp. 109-118. , Juni; Lakhotia, A., Understanding someone else's code: Analysis of experiences (1993) JSS, 23 (3), pp. 269-275; Letovsky, S., (1986) Cognitive Processes in Program Comprehension, , InWorkshop ESP Seiten 58-79, Norwood, NJ, USA Ablex Publishing Corp; Letovsky, S., Plan analysis of programs (1988) Bericht Research Report, 662. , Yale University, Dezember; De Lucia, A., Oliveto, R., Zurolo, F., Di Penta, M., Improving Comprehensibility of Source Code via Traceability Information: A Controlled Experiment (2006) Proc. of ICPC'06, 0, pp. 317-326; Lucca Di, G.A., Di Penta, M., Experimental settings in program comprehension: Challenges and open issues (2006) Proc. of ICPC'06, , Seiten 229-234, Washington, DC, USA IEEE Computer Society; Littman, D.C., Pinto, Je., Letovsky, S., Soloway, E., (1987) Mental Models and Software Maintenance, 4, pp. 341-355. , Workshop ESP, Seiten 80-98, Norwood, NJ, USA, 1986 Ablex Publishing Corp. Reprinted in Journal Systems and Software 7 Dec; Lientz, B.P., Burton Swanson, E., Problems in application software maintenance (1981) Commun ACM, 24 (11), pp. 763-769; Letovsky, S., Soloway, E., Delocalized plans program comprehension (1986) Software IEEE, 3 (3), pp. 41-49. , May; Martin, J., (1983) Software Maintenance the Problem and Its Solution, 6. , Prentice Hall third printing. Auflage; Murphy, G.C., Notkin, D., Reengineering with reflexion models: A case study (1997) IEEE Computer, 30 (8), pp. 161-169. , 29-36 August. Reprinted in Nikkei Computer, 19, January 1998; Mosemann, R., Weidenbeck, S., Navigation and comprehension of programs by novice programmers (2001) Proc. of IWPC'01, , Seite 79, Washington, DC, USA IEEE Computer Society; Murphy, G., Walker, R., Baniassad, E., (1998) Evaluating Emerging Software Development Technologies: Lessons Learned from Assessing Aspect-oriented Programming, , Technical Report TR-98-10, University of Britsh Columbia, Computer Science; Pennington, N., (1987) Comprehension Strategies in Programming, , Workshop ESP Seiten 100-113, Norwood, NJ, USA Ablex Publishing Corp; Parnin, C., Rugaber, S., Resumption strategies for interrupted programming tasks (2009) Proc. of ICPC'09, 0, pp. 80-89; Michael, J.P., A novel software visualisation model to support software comprehension (2004) Proc. of WCRE'04, , Marc Roper und Murray Wood IEEE Computer Society Seiten 70-79, Washington, DC, USA; Stirewalt Kurt, E.R., Di Penta, M., Kraemer, E., (2007) Designing Your Next Empirical Study on Program Comprehension, , ICPC Seiten 281-285 IEEE Computer Society; Prechelt, L., Unger-Lamprecht, B., Philippsen, M., Tichy, W.F., Two controlled experiments assessing the usefulness of design pattern documentation in program maintenance (2002) IEEE Computer Society TSE, 28 (6), pp. 595-606. , Juni; Robillard, M., Coelho, W., Murphy, G., How effective developers investigate source code: An exploratory study (2004) IEEE Computer Society TSE, 30 (12), pp. 889-903; Rosnow, R.L., Rosenthal, R., (2008) Beginning Behavioral Research: A Conceptual Primer, , Pearson/Prentice Hall6th. Auflage; Rugaber, S., Program comprehension for reverse engineering (1992) AAAI Workshop, , Juli; Sillito, J., De Voider, K., Fisher, B., Murphy, G., Managing software change tasks: An exploratory study (2005) ESE'05, , Seiten 10 pp.-Nov; Soloway, E., Ehrlich, K., Empirical studies of programming knowledge (1984) IEEE TSE, 10 (5), pp. 595-609; Stefik, A., Gellenbeck, E., Using spoken text to aid debugging: An emperical study (2009) Proc. of ICPC'09, 0, pp. 110-119; Singer, J., Lethbridge, T., Vinson, N., Anquetil, N., An examination of software engineering work practices (1997) Proc. of CASCON'97, , Seite 21. IBM Press; Shneiderman, B., Mayer, R., Syntactic/semantic interactions in programmer behavior: A model and experimental Results (1979) IJCIS, 8 (3), pp. 219-238; Soloway, E., Pinto, J., Letovsky, S., Littman, D., Lampert, R., Designing documentation to compensate for delocalized plans (1988) Commun ACM, 31 (11), pp. 1259-1267. , November; Storey, M.-A.D., Wong, K., Muller, H.A., How do program understanding tools affect how programmers understand programs? (2000) Science of Computer Programming, 36 (2-3), pp. 183-207; Walter, F.T., Should computer scientists experiment more? (1998) IEEE Computer, 31 (5), pp. 32-40. , Mai; Scott, R.T., Dennis, B.S., (1996) Coming Attractions in Program Understanding, , Bericht, Software Engineering Institute, Pittsburgh, PA 15213 Dezember; Von Mayrhauser, A., Marie Vans, A., (1993) From Program Comprehension to Tool Requirements for An Industrial Environment, , IWPC Seiten 78-86 IEEE Computer Society Press, Juli; Von Mayrhauser, A., Marie Vans, A., Program comprehension during software maintenance and evolution (1995) IEEE Computer, 28 (8), pp. 44-55; Von Mayrhauser, A., Marie Vans, A., Lang, S., Program comprehension and enhancement of software (1998) Proc. of the IFIPWorld Computing Congress, , IEEE, August-September},
correspondence_address1={Arbeitsgruppe Softwaretechnik, Fachbereich Mathematik und Informatik, Universitat Bremen, Postfach 33 04 40, 28334 Bremen, Germany},
address={Karlsruhe},
issn={16130073},
language={German},
abbrev_source_title={CEUR Workshop Proc.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Mende2009,
author={Mende, T. and Koschke, R.},
title={Revisiting the evaluation of defect prediction models},
journal={ACM International Conference Proceeding Series},
year={2009},
doi={10.1145/1540438.1540448},
art_number={1540448},
note={cited By 90; Conference of 5th International Conference on Predictor Models in Software Engineering, PROMISE '09 ; Conference Date: 18 May 2009 Through 19 May 2009;  Conference Code:80714},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-77953762806&doi=10.1145%2f1540438.1540448&partnerID=40&md5=0b9157a2c620717e0d2e4d05680f1728},
affiliation={University of Bremen, Germany},
abstract={Defect Prediction Models aim at identifying error-prone parts of a software system as early as possible. Many such models have been proposed, their evaluation, however, is still an open question, as recent publications show. An important aspect often ignored during evaluation is the effort reduction gained by using such models. Models are usually evaluated per module by performance measures used in information retrieval, such as recall, precision, or the area under the ROC curve (AUC). These measures assume that the costs associated with additional quality assurance activities are the same for each module, which is not reasonable in practice. For example, costs for unit testing and code reviews are roughly proportional to the size of a module. In this paper, we investigate this discrepancy using optimal and trivial models. We describe a trivial model that takes only the module size measured in lines of code into account, and compare it to five classification methods. The trivial model performs surprisingly well when evaluated using AUC. However, when an effort-sensitive performance measure is used, it becomes apparent that the trivial model is in fact the worst. © ACM 2009.},
author_keywords={cost-sensitive performance measures;  defect prediction},
keywords={Area under the ROC curve;  Classification methods;  Code review;  Cost-sensitive;  Defect prediction;  Defect prediction models;  Error prones;  In-line;  Module size;  Performance measure;  Software systems;  Unit testing, Computer software selection and evaluation;  Costs;  Defects;  Forecasting;  Mathematical models;  Quality assurance;  Software engineering;  Total quality management, Models},
references={Arisholm, E., Briand, L.C., Fuglerud, M., Data mining techniques for building fault-proneness models in telecom java software (2007) ISSRE '07: Proceedings of the 18th IEEE International Symposium on Software Reliability Engineering, pp. 215-224. , IEEE Press; Breiman, L., Bagging predictors (1996) Machine Learning, 24 (2), pp. 123-140; Breiman, L., Random forests (2001) Machine Learning, 45 (1), pp. 5-32; Breiman, L., Friedman, J., Olshen, R., Stone, C., (1984) Classification and Regression Trees, , Wadsworth; Demšar, J., Statistical comparisons of classifiers over multiple data sets (2006) Journal of Machine Learning Research, 7, pp. 1-30; Dimitriadou, E., Hornik, K., Leisch, F., Meyer, D., Weingessel, A., (2009) E1071: Misc Functions of the Department of Statistics (E1071), pp. 5-19. , TU Wien, R package version 1; Emam, K.E., Benlarbi, S., Goel, N., Rai, S.N., Comparing case-based reasoning classifiers for predicting high risk software components (2001) Journal of Systems Software, 55 (3), pp. 301-320; Fawcett, T., An introduction to ROC analysis (2006) Pattern Recognition Letters, 27 (8), pp. 861-874; Friedman, M., The use of ranks to avoid the assumption of normality implicit in the analysis of variance (1937) Journal of the American Statistical Association, 32, pp. 675-701; Halstead, M.H., (1977) Elements of Software Science, , Elsevier Science Inc., New York, NY, USA; Jiang, Y., Cukic, B., Ma, Y., Techniques for evaluating fault prediction models (2008) Empirical Software Engineering, 13 (5), pp. 561-595; Jiang, Y., Cukic, B., Menzies, T., Can data transformation help in the detection of fault-prone modules? (2008) DEFECTS '08: Proceedings of the 2008 Workshop on Defects in Large Software Systems, , ACM; Jiang, Y., Cukic, B., Menzies, T., Costs curve evaluation of fault prediction models (2008) ISSRE'08: Proceedings of the 19th International Symposium on Software Reliability Engineering, pp. 197-206. , IEEE Press; Jiang, Y., Cukic, B., Menzies, T., Bartlow, N., Comparing design and code metrics for software quality prediction (2008) PROMISE '08: Proceedings of the 4th International Workshop on Predictor Models in Software Engineering, pp. 11-18. , ACM; Khoshgoftaar, T.M., Allen, E.B., Ordering fault-prone software modules (2003) Software Quality Journal, 11 (1), pp. 19-37; Lessmann, S., Baesens, B., Mues, C., Pietsch, S., Benchmarking classification models for software defect prediction: A proposed framework and novel findings (2008) IEEE Transactions on Software Engineering, 34 (4), pp. 485-496; Liaw, A., Wiener, M., Classification and regression by randomForest (2002) R News, 2 (3), pp. 18-22; Ma, Y., Cukic, B., Adequate and precise evaluation of quality models in software engineering studies (2007) PROMISE '07: Proceedings of the Third International Workshop on Predictor Models in Software Engineering, , IEEE Press; McCabe, T.J., A complexity measure (1976) IEEE Transactions on Software Engineering, 2 (4), pp. 308-320; Mende, T., Koschke, R., Leszak, M., Evaluating defect prediction models for a large, evolving software system (2009) Proceedings of the 13th European Conference on Software Maintenance and Reengineering, pp. 247-250. , IEEE Press; Menzies, T., Dekhtyar, A., Distefano, J., Greenwald, J., Problems with precision: A response to "comments on 'data mining static code attributes to learn defect predictors'" (2007) IEEE Transactions on Software Engineering, 33 (9), pp. 637-640; Menzies, T., Greenwald, J., Frank, A., Data mining static code attributes to learn defect predictors (2007) IEEE Transactions on Software Engineering, 33 (1), pp. 2-13; Ohlsson, N., Alberg, H., Predicting fault-prone software modules in telephone switches (1996) IEEE Transactions on Software Engineering, 22 (12), pp. 886-894; Ostrand, T., Weyuker, E., Bell, R., Predicting the location and number of faults in large software systems (2005) IEEE Transactions on Software Engineering, 31 (4), pp. 340-355; Ostrand, T.J., Weyuker, E.J., Bell, R.M., Automating algorithms for the identification of fault-prone files (2007) ISSTA '07: Proceedings of the 2007 International Symposium on Software Testing and Analysis, pp. 219-227. , New York, NY, USA, ACM; Peters, A., Hothorn, T., (2008) Ipred: Improved Predictors, pp. 8-16. , R package version 0; (2008) A Language and Environment for Statistical Computing, , R Development Core Team. R: R Foundation for Statistical Computing, Vienna, Austria, ISBN 3-900051-07-0; Sing, T., Sander, O., Beerenwinkel, N., Lengauer, T., ROCR: Visualizing classifier performance in R (2005) Bioinformatics, 21 (20), pp. 3940-3941; Tan, P.-N., Steinbach, M., Kumar, V., (2005) Introduction to Data Mining, , Addison Wesley, 1st edition, May; Zhang, H., Zhang, X., Comments on "data mining static code attributes to learn defect predictors" (2007) IEEE Transactions on Software Engineering, 33 (9), pp. 635-637},
correspondence_address1={Mende, T.; University of BremenGermany; email: tmende@informatik.uni-bremen.de},
address={Vancouver, BC},
isbn={9781605586342},
language={English},
abbrev_source_title={ACM Int. Conf. Proc. Ser.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Cornelissen2009684,
author={Cornelissen, B. and Zaidman, A. and Van Deursen, A. and Moonen, L. and Koschke, R.},
title={A systematic survey of program comprehension through dynamic analysis},
journal={IEEE Transactions on Software Engineering},
year={2009},
volume={35},
number={5},
pages={684-702},
doi={10.1109/TSE.2009.28},
art_number={4815280},
note={cited By 243},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-73449109470&doi=10.1109%2fTSE.2009.28&partnerID=40&md5=c805ffb1929b91f7d374e6fdcabf6749},
affiliation={Faculty of Electrical Engineering, Mathematics and Computer Science, Delft University of Technology, Mekelweg 4, 2628CD Delft, Netherlands; Simula Research Laboratory, PO Box 134, 1235 Lysaker, Norway; Arbeitsgruppe Softwaretechnik, Universität Bremen, Postfach 33 04 40, 28334 Bremen, Germany},
abstract={Program comprehension is an important activity in software maintenance, as software must be sufficiently understood before it can be properly modified. The study of a program's execution, known as dynamic analysis, has become a common technique in this respect and has received substantial attention from the research community, particularly over the last decade. These efforts have resulted in a large research body of which currently there exists no comprehensive overview. This paper reports on a systematic literature survey aimed at the identification and structuring of research on program comprehension through dynamic analysis. From a research body consisting of 4,795 articles published in 14 relevant venues between July 1999 and June 2008 and the references therein, we have systematically selected 176 articles and characterized them in terms of four main facets: activity, target, method, and evaluation. The resulting overview offers insight in what constitutes the main contributions of the field, supports the task of identifying gaps and opportunities, and has motivated our discussion of several important research directions that merit additional consideration in the near future. © 2006 IEEE.},
author_keywords={Dynamic analysis;  Program comprehension;  Survey},
keywords={Literature survey;  Program comprehension;  Research communities;  Research directions;  Software maintenance, Computer programming;  Computer software;  Computer software maintenance;  Research;  Surveys, Dynamic analysis},
funding_text 1={Part of this work was conducted at Delft University of Technology in the Reconstructor project, sponsored by NWO/Jacquard.},
references={Corbi, T.A., Program understanding: Challenge for the 1990s (1989) IBM Systems J, 28 (2), pp. 294-306; Fjeldstad, R.K., Hamlen, W.T., Application program maintenance study: Report to our respondents (1979) Proc. GUIDE, 48; Richner, T., Ducasse, S., Recovering high-level views of object-oriented applications from static and dynamic information (1999) Proc. 15th Int'l Conf. Software Maintenance, pp. 13-22; Schmerl, B.R., Aldrich, J., Garlan, D., Kazman, R., Yan, H., Discovering architectures from running systems (2006) IEEE Trans. Software Eng., 32 (7), pp. 454-466. , July; Walker, R.J., Murphy, G.C., Freeman-Benson, B.N., Wright, D., Swanson, D., Isaak, J., Visualizing dynamic software system information through high-level models (1998) Proc. 13th Conf. Object-Oriented Programming Systems, Languages and Applications, pp. 271-283; Biggerstaff, T.J., Mitbander, B.G., Webster, D., The concept assignment problem in program understanding (1993) Proc. 15th Int'l Conf. Software Eng., pp. 482-498; Ball, T., The concept of dynamic analysis (1999) Proc. Seventh European Software Eng. Conf. and ACM SIGSOFT Symp. Foundations of Software Eng., pp. 216-234; Andrews, J., Testing using log file analysis: Tools, methods, and issues (1997) Proc. 13th Int'l Conf. Automated Software Eng., pp. 157-166; Biermann, A.W., On the inference of turing machines from sample computations (1972) Artificial Intelligence, 3 (1-3), pp. 181-198; Kleyn, M.F., Gingrich, P.C., Graphtrace - Understanding object-oriented systems using concurrently animated views (1988) Proc. Third Conf. Object-Oriented Programming Systems, Languages, and Applications, pp. 191-205; De Pauw, W., Helm, R., Kimelman, D., Vlissides, J.M., Visualizing the behavior of object-oriented systems (1993) Proc. Eighth Conf. Object-Oriented Programming Systems, Languages, and Applications, pp. 326-337; De Pauw, W., Kimelman, D., Vlissides, J.M., Modeling object-oriented program execution (1994) Proc. European Object-Oriented Programming Conf., pp. 163-182; De Pauw, W., Lorenz, D., Vlissides, J., Wegman, M., Execution patterns in object-oriented visualization (1998) Proc. Fourth USENIX Conf. Object-Oriented Technologies and Systems, pp. 219-234; Jacobson, I., (1995) Object-Oriented Software Engineering: A Use Case Driven Approach, , Addison-Wesley; Wilde, N., Scully, M.C., Software reconnaissance: Mapping program features to code (1995) J. Software Maintenance: Research and Practice, 7 (1), pp. 49-62; Wilde, N., Buckellew, M., Page, H., Rajlich, V., Pounds, L., A comparison of methods for locating features in legacy software (2003) J. Systems and Software, 65 (2), pp. 105-114; Wilde, N., Buckellew, M., Page, H., Rajlich, V., A case study of feature location in unstructured legacy fortran code (2001) Proc. Fifth European Conf. Software Maintenance and Reeng., pp. 68-76; Wilde, N., Casey, C., Early field experience with the software reconnaissance technique for program comprehension (1996) Proc. Int'l Conf. Software Maintenance, pp. 312-318; Lange, D.B., Nakamura, Y., Interactive visualization of design patterns can help in framework understanding (1995) Proc. 10th Conf. Object-Oriented Programming Systems, Languages, and Applications, pp. 342-357; Lange, D.B., Nakamura, Y., Program explorer: A program visualizer for C++ (1995) Proc. First USENIX Conf. Object-Oriented Technologies and Systems, pp. 39-54; Koskimies, K., Mössenböck, H., Scene: Using scenario diagrams and active text for illustrating object-oriented programs (1996) Proc. 18th Int'l Conf. Software Eng., pp. 366-375; Sefika, M., Sane, A., Campbell, R.H., Architecture-oriented visualization (1996) Proc. 11th Conf. Object-Oriented Programming Systems, Languages, and Applications, pp. 389-405; Jerding, D.F., Rugaber, S., Using visualization for architectural localization and extraction (1997) Proc. Fourth Working Conf. Reverse Eng., pp. 56-65; Jerding, D.F., Stasko, J.T., Ball, T., Visualizing interactions in program executions (1997) Proc. 19th Int'l Conf. Software Eng., pp. 360-370; Jerding, D.F., Stasko, J.T., The information mural: A technique for displaying and navigating large information spaces (1998) IEEE Trans. Visualization and Computer Graphics, 4 (3), pp. 257-271. , July-Sept; Murphy, G.C., Notkin, D., Sullivan, K.J., Software reflexion models: Bridging the gap between design and implementation (2001) IEEE Trans. Software Eng., 27 (4), pp. 364-380. , Apr; Richner, T., Ducasse, S., Using dynamic information for the iterative recovery of collaborations and roles (2002) Proc. 18th Int'l Conf. Software Maintenance, pp. 34-43; De Pauw, W., Jensen, E., Mitchell, N., Sevitsky, G., Vlissides, J.M., Yang, J., Visualizing the execution of java programs (2001) Proc. ACM 2001 Symp. Software Visualization, pp. 151-162; Systä, T., Koskimies, K., Müller, H.A., Shimba: An environment for reverse engineering java software systems (2001) Software, Practice and Experience, 31 (4), pp. 371-394; Briand, L.C., Labiche, Y., Leduc, J., Toward the reverse engineering of UML sequence diagrams for distributed java software (2006) IEEE Trans. Software Eng., 32 (9), pp. 642-663. , Sept; Reiss, S.P., Renieris, M., Encoding program executions (2001) Proc. 23rd Int'l Conf. Software Eng., pp. 221-230; Hamou-Lhadj, A., Lethbridge, T.C., A survey of trace exploration tools and techniques (2004) Proc. 2004 Conf. The Centre for Advanced Studies on Collaborative Research, pp. 42-55; Hamou-Lhadj, A., Lethbridge, T.C., Summarizing the content of large traces to facilitate the understanding of the behaviour of a software system (2006) Proc. 14th Int'l Conf. Program Comprehension, pp. 181-190; Hamou-Lhadj, A., Lethbridge, T.C., Fu, L., Challenges and requirements for an effective trace exploration tool (2004) Proc. 12th Int'l Workshop Program Comprehension, pp. 70-78; Heuzeroth, D., Holl, T., Löwe, W., Combining static and dynamic analyses to detect interaction patterns (2002) Proc. Sixth Int'l Conf. Integrated Design and Process Technology; Heuzeroth, D., Holl, T., Högström, G., Löwe, W., Automatic design pattern detection (2003) Proc. 11th Int'l Workshop Program Comprehension, pp. 94-103; Riva, C., Rodriguez, J.V., Combining static and dynamic views for architecture reconstruction (2002) Proc. Sixth European Conf. Software Maintenance and Reeng., pp. 47-55; Riva, C., Yang, Y., Generation of architectural documentation using XML (2002) Proc. Ninth Working Conf. Reverse Eng., pp. 161-179; Yan, H., Garlan, D., Schmerl, B.R., Aldrich, J., Kazman, R., Discotect: A system for discovering architectures from running systems (2004) Proc. 26th Int'l Conf. Software Eng., pp. 470-479; Koskinen, J., Kettunen, M., Systä, T., Profile-based approach to support comprehension of software behavior (2006) Proc. 14th Int'l Conf. Program Comprehension, pp. 212-224; Cook, J.E., Du, Z., Discovering thread interactions in a concurrent system (2005) J. Systems and Software, 77 (3), pp. 285-297; Quante, J., Koschke, R., Dynamic protocol recovery (2007) Proc. 14th Working Conf. Reverse Eng., pp. 219-228; Lo, D., Khoo, S., Liu, C., Mining temporal rules for software maintenance (2008) J. Software Maintenance and Evolution: Research and Practice, 20 (4), pp. 227-247; Walkinshaw, N., Bogdanov, K., Holcombe, M., Salahuddin, S., Reverse engineering state machines by interactive grammar inference (2008) J. Software Maintenance and Evolution: Research and Practice, 20 (4), pp. 269-290; Greevy, O., Ducasse, S., Gîrba, T., Analyzing feature traces to incorporate the semantics of change in software evolution analysis (2005) Proc. 21st Int'l Conf. Software Maintenance, pp. 347-356; Greevy, O., Ducasse, S., Gîrba, T., Analyzing software evolution through feature views (2006) J. Software Maintenance and Evolution: Research and Practice, 18 (6), pp. 425-456; Kothari, J., Denton, T., Shokoufandeh, A., Mancoridis, S., Reducing program comprehension effort in evolving software by recognizing feature implementation convergence (2007) Proc. 15th Int'l Conf. Program Comprehension, pp. 17-26; Wong, W.E., Gokhale, S.S., Horgan, J.R., Quantifying the closeness between program components and features (2000) J. Systems and Software, 54 (2), pp. 87-98; Eisenbarth, T., Koschke, R., Simon, D., Locating features in source code (2003) IEEE Trans. Software Eng., 29 (3), pp. 210-224. , Mar; Antoniol, G., Guéhéneuc, Y.-G., Feature identification: An epidemiological metaphor (2006) IEEE Trans. Software Eng., 32 (9), pp. 627-641. , Sept; Poshyvanyk, D., Guéhéneuc, Y.-G., Marcus, A., Antoniol, G., Rajlich, V., Feature location using probabilistic ranking of methods based on execution scenarios and information retrieval (2007) IEEE Trans. Software Eng., 33 (6), pp. 420-432. , June; Pacione, M.J., Roper, M., Wood, M., Comparative evaluation of dynamic visualisation tools (2003) Proc. 10th Working Conf. Reverse Eng., pp. 80-89; Greevy, O., (2007) Enriching Reverse Engineering with Feature Analysis, , PhD thesis, Univ. Bern; Reiss, S.P., Visual representations of executing programs (2007) J. Visual Languages and Computing, 18 (2), pp. 126-148; Beecham, S., Baddoo, N., Hall, T., Robinson, H., Sharp, H., Motivation in software engineering: A systematic literature review (2008) Information and Software Technology, 50 (9-10), pp. 860-878; Dybå, T., Dingsøyr, T., Empirical studies of agile software development: A systematic review (2008) Information and Software Technology, 50 (9-10), pp. 833-859; Brereton, P., Kitchenham, B.A., Budgen, D., Turner, M., Khalil, M., Lessons from applying the systematic literature review process within the software engineering domain (2007) J. Systems and Software, 80 (4), pp. 571-583; Sjøberg, D.I.K., Hannay, J.E., Hansen, O., Kampenes, V.B., Karahasanovic, A., Liborg, N.-K., Rekdal, A.C., A survey of controlled experiments in software engineering (2005) IEEE Trans. Software Eng., 31 (9), pp. 733-753. , Sept; Kitchenham, B.A., Procedures for performing systematic reviews (2004) Technical Report TR/SE-0401, , Keele Univ. and Technical Report 0400011T.1, Nat'l ICT Australia; Cornelissen, B., Zaidman, A., Van Deursen, A., Moonen, L., Koschke, R., A Systematic survey of program comprehension through dynamic analysis (2008) Technical Report TUD-SERG-2008-2033, , Delft Univ. of Technology; Liu, D., Marcus, A., Poshyvanyk, D., Rajlich, V., Feature location via information retrieval based filtering of a single scenario execution trace (2007) Proc. 22nd Int'l Conf. Automated Software Eng., pp. 234-243; Zaidman, A., Demeyer, S., Managing trace data volume through a heuristical clustering process based on event execution frequency (2004) Proc. Eighth European Conf. Software Maintenance and Reeng., pp. 329-338; Ernst, M.D., Static and dynamic analysis: Synergy and duality (2003) Proc. First ICSE Int'l Workshop Dynamic Analysis, pp. 25-28; Israr, T., Woodside, M., Franks, G., Interaction tree algorithms to extract effective architecture and layered performance models from traces (2007) J. Systems and Software, 80 (4), pp. 474-492; Benedikt, M., Freire, J., Godefroid, P., Veriweb: Automatically testing dynamic web sites (2002) Proc. 11th Int'l Conf. World Wide Web; Mesbah, A., Bozdag, E., Van Deursen, A., Crawling ajax by inferring user interface state changes (2008) Proc. Eighth Int'l Conf. Web Eng., pp. 122-134; Gold, N., Mohan, A., Knight, C., Munro, M., Understanding service-oriented software (2004) IEEE Software, 21 (2), pp. 71-77. , Mar./Apr; Moe, J., Carr, D.A., Understanding distributed systems via execution trace data (2001) Proc. Ninth Int'l Workshop Program Comprehension, pp. 60-67; Pankratius, V., Schaefer, C., Jannesari, A., Tichy, W.F., Software engineering for multicore systems: An experience report (2008) Proc. First ICSE Int'l Workshop Multicore Software Eng.; Zaidman, A., Demeyer, S., Adams, B., De Schutter, K., Hoffman, G., De Ruyck, B., Regaining lost knowledge through dynamic analysis and aspect orientation (2006) Proc. 10th European Conf. Software Maintenance and Reeng., pp. 91-102; Demeyer, S., Ducasse, S., Nierstrasz, O., (2003) Object-Oriented Reengineering Patterns, , Morgan Kaufmann; Röthlisberger, D., Greevy, O., Nierstrasz, O., Exploiting runtime information in the IDE (2008) Proc. 16th Int'l Conf. Program Comprehension, pp. 63-72; Reiss, S.P., Visualizing java in action (2003) Proc. ACM 2003 Symp. Software Visualization, pp. 57-65; Joshi, S., Orso, A., SCARPE: A technique and tool for selective record and replay of program executions (2007) Proc. 23rd Int'l Conf. Software Maintenance, pp. 234-243; Xu, G., Rountev, A., Tang, Y., Qin, F., Efficient checkpointing of java software using context-sensitive capture and replay (2007) Proc. 15th European Software Eng. Conf. and ACM SIGSOFT Symp. The Foundations of Software Eng., pp. 85-94; Zaidman, A., (2006) Scalability Solutions for Program Comprehension Through Dynamic Analysis, , PhD thesis, Univ. of Antwerp; Bennett, C., Myers, D., Ouellet, D., Storey, M.-A., Salois, M., German, D., Charland, P., A survey and evaluation of tool features for understanding reverse engineered sequence diagrams (2008) J. Software Maintenance and Evolution: Research and Practice, 20 (4), pp. 291-315; Quante, J., Do dynamic object process graphs support program understanding?-A controlled experiment (2008) Proc. 16th Int'l Conf. Program Comprehension, pp. 73-82; Simmons, S., Edwards, D., Wilde, N., Homan, J., Groble, M., Industrial tools for the feature location problem: An exploratory study (2006) J. Software Maintenance and Evolution: Research and Practice, 18 (6), pp. 457-474; Eaddy, M., Aho, A.V., Antoniol, G., Guéhéneuc, Y.-G., CERBERUS: Tracing requirements to source code using information retrieval, dynamic analysis, and program analysis (2008) Proc. 16th Int'l Conf. Program Comprehension, pp. 53-62; Cornelissen, B., Moonen, L., Zaidman, A., An assessment methodology for trace reduction techniques (2008) Proc. 24th Int'l Conf. Software Maintenance, pp. 107-116; Sim, S.E., Easterbrook, S.M., Holt, R.C., Using benchmarking to advance research: A challenge to software engineering (2003) Proc. 25th Int'l Conf. Software Eng., pp. 74-83; Staples, M., Niazi, M., Experiences using systematic review guidelines (2007) J. Systems and Software, 80 (9), pp. 1425-1437; Antoniol, G., Di Penta, M., A distributed architecture for dynamic analyses on user-profile data (2004) Proc. Eighth European Conf. Software Maintenance and Reeng., pp. 319-328; Antoniol, G., Di Penta, M., Zazzara, M., Understanding web applications through dynamic analysis (2004) Proc. 12th Int'l Workshop Program Comprehension, pp. 120-131; Ball, T., Software visualization in the large (1996) Computer, 29 (4), pp. 33-43. , Apr; Bohnet, J., Döllner, J., Visual exploration of function call graphs for feature location in complex software systems (2006) Proc. ACM 2006 Symp. Software Visualization, pp. 95-104; Bojic, D., Velasevic, D.M., A use-case driven method of architecture recovery for program understanding and reuse reengineering (2000) Proc. Fourth European Conf. Software Maintenance and Reeng., pp. 23-32; Chan, A., Holmes, R., Murphy, G.C., Ying, A.T.T., Scaling an object-oriented system execution visualizer through sampling (2003) Proc. 11th Int'l Workshop Program Comprehension, pp. 237-244; Cornelissen, B., Van Deursen, A., Moonen, L., Zaidman, A., Visualizing testsuites to aid in software understanding (2007) Proc. 11th European Conf. Software Maintenance and Reeng., pp. 213-222; Cornelissen, B., Zaidman, A., Holten, D., Moonen, L., Van Deursen, A., Wijk Van, J.J., Execution trace analysis through massive sequence and circular bundle views (2008) J. Systems and Software, 81 (11), pp. 2252-2268; Dalton, A.R., Hallstrom, J.O., A toolkit for visualizing the runtime behavior of TinyOS applications (2008) Proc. 15th Int'l Conf. Program Comprehension, pp. 43-52; Deprez, J., Lakhotia, A., A formalism to automate mapping from program features to code (2000) Proc. Eighth Int'l Workshop Program Comprehension, pp. 69-78; Ducasse, S., Lanza, M., Bertuli, R., High-level polymetric views of condensed run-time information (2004) Proc. Eighth European Conf. Software Maintenance and Reeng., pp. 309-318; Edwards, D., Simmons, S., Wilde, N., An approach to feature location in distributed systems (2006) J. Systems and Software, 79 (1), pp. 457-474; Eisenberg, A.D., De Volder, K., Dynamic feature traces: Finding features in unfamiliar code (2005) Proc. 21st Int'l Conf. Software Maintenance, pp. 337-346; El-Ramly, M., Stroulia, E., Sorenson, P.G., From run-time behavior to usage scenarios: An interaction-pattern mining approach (2002) Proc. Eighth ACM SIGKDD Int'l Conf. Knowledge Discovery and Data Mining, pp. 315-324; Fischer, M., Oberleitner, J., Gall, H., Gschwind, T., System evolution tracking through execution trace analysis (2005) Proc. 13th Int'l Workshop Program Comprehension, pp. 237-246s; Fisher II, M., Elbaum, S.G., Rothermel, G., Dynamic characterization of web application interfaces (2007) Proc. 10th Int'l Conf. Fundamental Approaches to Software Eng., pp. 260-275; Gargiulo, J., Mancoridis, S., Gadget: A tool for extracting the dynamic structure of java programs (2001) Proc. 13th Int'l Conf. Software Eng. and Knowledge Eng., pp. 244-251; Gestwicki, P.V., Jayaraman, B., Methodology and architecture of JIVE (2005) Proc. ACM 2005 Symp. Software Visualization, pp. 95-104; Greevy, O., Lanza, M., Wysseier, C., Visualizing live software systems in 3D (2006) Proc. ACM 2006 Symp. Software Visualization, pp. 47-56; Gschwind, T., Oberleitner, J., Pinzger, M., Using run-time data for program comprehension (2003) Proc. 11th Int'l Workshop Program Comprehension, pp. 245-250; Guéhéneuc, Y.-G., Douence, R., Jussien, N., No java without caffeine: A tool for dynamic analysis of java programs (2002) Proc. 17th Int'l Conf. Automated Software Eng., pp. 117-126; Guéhéneuc, Y.-G., A reverse engineering tool for precise class diagrams (2004) Proc. 2004 Conf. Centre for Advanced Studies on Collaborative Research, pp. 28-41; Hendrickson, S.A., Dashofy, E.M., Taylor, R.N., An architecture-centric approach for tracing, organizing, and understanding events in event-based software architectures (2005) Proc. 13th Int'l Workshop Program Comprehension, pp. 227-236; Huang, H., Zhang, S., Cao, J., Duan, Y., A practical pattern recovery approach based on both structural and behavioral analysis (2005) J. Systems and Software, 75 (1-2), pp. 69-87; Jiang, J., Koskinen, J., Ruokonen, A., Systä, T., Constructing usage scenarios for API redocumentation (2007) Proc. 15th Int'l Conf. Program Comprehension, pp. 259-264; Jiang, M., Groble, M., Simmons, S., Edwards, D., Wilde, N., Software feature understanding in an industrial setting (2006) Proc. 22nd Int'l Conf. Software Maintenance, pp. 66-67; Jiang, Z.M., Hassan, A., Hamann, G., Flora, P., An automated approach for abstracting execution logs to execution events (2008) J. Software Maintenance and Evolution: Research and Practice, 20 (4), pp. 249-267; Kelsen, P., A simple static model for understanding the dynamic behavior of programs (2004) Proc. 12th Int'l Workshop Program Comprehension, pp. 46-51; Kollmann, R., Gogolla, M., Capturing dynamic program behaviour with UML collaboration diagrams (2001) Proc. Fifth European Conf. Software Maintenance and Reeng., pp. 58-67; Korel, B., Rilling, J., Program slicing in understanding of large programs (1998) Proc. Sixth Int'l Workshop Program Comprehension, pp. 145-152; Koschke, R., Quante, J., On dynamic feature location (2005) Proc. 20th Int'l Conf. Automated Software Eng., pp. 86-95; Kuhn, A., Greevy, O., Exploiting the analogy between traces and signal processing (2006) Proc. 22nd Int'l Conf. Software Maintenance, pp. 320-329; Lange, D., Nakamura, Y., Object-oriented program tracing and visualization (1997) Computer, 30 (5), pp. 63-70. , May; Licata, D.R., Harris, C.D., Krishnamurthi, S., The feature signatures of evolving programs (2003) Proc. 18th Int'l Conf. Automated Software Eng., pp. 281-285; Lienhard, A., Greevy, O., Nierstrasz, O., Tracking objects to detect feature dependencies (2007) Proc. 15th Int'l Conf. Program Comprehension, pp. 59-68; Lo, D., Khoo, S., QUARK: Empirical assessment of automaton-based specification miners (2006) Proc. 13th Working Conf. Reverse Eng., pp. 51-60; Lo, D., Khoo, S., SMArTIC: Towards building an accurate, robust and scalable specification miner (2006) Proc. 14th European Software Eng. Conf. and ACM SIGSOFT Symp. The Foundations of Software Eng., pp. 265-275; Lucca Di, G.A., Fasolino, A.R., Tramontana, P., De Carlini, U., Abstracting business level UML diagrams from web applications (2003) Proc. Fifth Int'l Workshop Web Site Evolution, pp. 12-19; Lukoit, K., Wilde, N., Stowell, S., Hennessey, T., Tracegraph: Immediate visual location of software features (2000) Proc. 16th Int'l Conf. Software Maintenance, pp. 33-39; Malloy, B.A., Power, J.F., Exploiting UML dynamic object modeling for the visualization of C++ programs (2005) Proc. ACM 2005 Symp. Software Visualization, pp. 105-114; Martin, L., Giesl, A., Martin, J., Dynamic component program visualization (2002) Proc. Ninth Working Conf. Reverse Eng., pp. 289-298; Moe, J., Sandahl, K., Using execution trace data to improve distributed systems (2002) Conference on Software Maintenance, pp. 640-648; Oechsle, R., Schmitt, T., JAVAVIS: Automatic program visualization with object and sequence diagrams using the java debug interface (JDI) Proc. ACM 2001 Symp. Software Visualization, 2001, pp. 176-190; Orso, A., Jones, J.A., Harrold, M.J., Visualization of program-execution data for deployed software (2003) Proc. ACM 2003 Symp. Software Visualization, pp. 67-76; Pacione, M.J., Roper, M., Wood, M., A novel software visualisation model to support software comprehension (2004) Proc. 11th Working Conf. Reverse Eng., pp. 70-79; De Pauw, W., Krasikov, S., Morar, J.F., Execution patterns for visualizing web services (2006) Proc. ACM 2006 Symp. Software Visualization, pp. 37-45; Pheng, S., Verbrugge, C., Dynamic data structure analysis for java programs (2006) Proc. 14th Int'l Conf. Program Comprehension, pp. 191-201; Qingshan, L., Chu, H., Hu, S., Chen, P., Yun, Z., Architecture recovery and abstraction from the perspective of processes (2005) Proc. 12th Working Conf. Reverse Eng., pp. 57-66; Reiss, S.P., Event-based performance analysis (2003) Proc. 11th Int'l Workshop Program Comprehension, pp. 74-83; Reiss, S.P., Visualizing program execution using user abstractions (2006) Proc. ACM 2006 Symp. Software Visualization, pp. 125-134; Renieris, M., Reiss, S.P., Almost: Exploring program traces (1999) Proc. 1999 Workshop New Paradigms in Information Visualization and Manipulation, pp. 70-77; Rilling, J., Maximizing functional cohesion of comprehension environments by integrating user and task knowledge (2001) Proc. Eighth Working Conf. Reverse Eng., pp. 157-165; Ritsch, H., Sneed, H.M., Reverse engineering programs via dynamic analysis (1993) Proc. First Working Conf. Reverse Eng., pp. 192-201; Riva, C., Reverse architecting: An industrial experience report (2000) Proc. Seventh Working Conf. Reverse Eng., pp. 42-50; Rohatgi, A., Hamou-Lhadj, A., Rilling, J., An approach for mapping features to code based on static and dynamic analysis (2008) Proc. 16th Int'l Conf. Program Comprehension, pp. 236-241; De Roover, C., Michiels, I., Gybels, K., Gybels, K., D'Hondt, T., An approach to high-level behavioral program documentation allowing lightweight verification (2006) Proc. 14th Int'l Conf. Program Comprehension, pp. 202-211; Safyallah, H., Sartipi, K., Dynamic analysis of software systems using execution pattern mining (2006) Proc. 14th Int'l Conf. Program Comprehension, pp. 84-88; Salah, M., Mancoridis, S., Toward an environment for comprehending distributed systems (2003) Proc. 10th Working Conf. Reverse Eng., pp. 238-247; Salah, M., Mancoridis, S., A hierarchy of dynamic software views: From object-interactions to feature-interactions (2004) Proc. 20th Int'l Conf. Software Maintenance, pp. 72-81; Salah, M., Mancoridis, S., Antoniol, G., Di Penta, M., Scenario-driven dynamic analysis for comprehending large software systems (2006) Proc. 10th European Conf. Software Maintenance and Reeng., pp. 71-80; Sartipi, K., Dezhkam, N., An amalgamated dynamic and static architecture reconstruction framework to control component interactions (2007) Proc. 14th Working Conf. Reverse Eng., pp. 259-268; Shevertalov, M., Mancoridis, S., A reverse engineering tool for extracting protocols of networked applications (2007) Proc. 14th Working Conf. Reverse Eng., pp. 229-238; Smit, M., Stroulia, E., Wong, K., Use case redocumentation from gui event traces (2008) Proc. 12th European Conf. Software Maintenance and Reeng., pp. 263-268; Souder, T.S., Mancoridis, S., Salah, M., Form: A framework for creating views of program executions (2001) Proc. 17th Int'l Conf. Software Maintenance, pp. 612-620; Sousa De, F.C., Mendonça, N.C., Uchitel, S., Kramer, J., Detecting implied scenarios from execution traces (2007) Proc. 14th Working Conf. Reverse Eng., pp. 50-59; Stroulia, E., El-Ramly, M., Kong, L., Sorenson, P.G., Matichuk, B., Reverse engineering legacy interfaces: An interaction-driven approach (1999) Proc. Sixth Working Conf. Reverse Eng., pp. 292-302; Tonella, P., Potrich, A., Static and dynamic C++ code analysis for the recovery of the object diagram (2002) Proc. 18th Int'l Conf. Software Maintenance, pp. 54-63; Walker, R.J., Murphy, G.C., Steinbok, J., Robillard, M.P., Efficient mapping of software system traces to architectural views (2000) Proc. 2000 Conf. The Centre for Advanced Studies on Collaborative Research, pp. 12-21; Wang, L., Cordy, J.R., Dean, T.R., Enhancing security using legality assertions (2005) Proc. 12th Working Conf. Reverse Eng., pp. 35-44; Wong, W.E., Gokhale, S.S., Static and dynamic distance metrics for feature-based code analysis (2005) J. Systems and Software, 74 (3), pp. 283-295; Zaidman, A., Demeyer, S., Automatic identification of key classes in a software system using webmining techniques (2008) J. Software Maintenance and Evolution: Research and Practice, 20 (6), pp. 387-417},
correspondence_address1={Cornelissen, B.; Faculty of Electrical Engineering, Mathematics and Computer Science, Delft University of Technology, Mekelweg 4, 2628CD Delft, Netherlands; email: s.g.m.cornelissen@tudelft.nl},
issn={00985589},
coden={IESED},
language={English},
abbrev_source_title={IEEE Trans Software Eng},
document_type={Review},
source={Scopus},
}

@CONFERENCE{Göde2009219,
author={Göde, N. and Koschke, R.},
title={Incremental clone detection},
journal={Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR},
year={2009},
pages={219-228},
doi={10.1109/CSMR.2009.20},
art_number={4812755},
note={cited By 120; Conference of 13th European Conference on Software Maintenance and Reengineering, CSMR 2009 ; Conference Date: 24 March 2009 Through 27 March 2009;  Conference Code:76983},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-67649971019&doi=10.1109%2fCSMR.2009.20&partnerID=40&md5=cdeffc95f56f72b49a82ab97a1ea8bc0},
affiliation={University of Bremen, Germany},
abstract={Finding, understanding and managing software clones | passages of duplicated source code | is of large interest in research and practice. There is an abundance of techniques to detect clones. However, all these techniques are limited to a single revision of a program. When the code changes, the analysis must be run again from scratch even though only small parts may have changed. In this paper, we present an incremental clone detec- tion algorithm, which detects clones based on the results of the previous revision's analysis. Moreover, it creates a mapping between clones of one revision to the next, supplying information about the addition and deletion of clones. Our empirical results demonstrate that the incremental technique requires considerably less time than a non-incremental approach if the changes do not exceed a certain fraction of the source code. An incremental analysis is useful for on-the- y de- tection and evolutionary clone analysis. On-the- y de- tection may be integrated in an IDE and allows to re-run clone detection immediately when a programmer saves his changes or even while he/she is typing. In evolutionary clone analysis, many revisions of a sys- tem need to be analyzed in order to understand how clones evolve.© 2009 IEEE.},
keywords={Clone analysis;  Clone detection;  Code changes;  Empirical results;  Incremental analysis;  Incremental approach;  Incremental techniques;  Source codes;  TEM, Computer software;  Computer software maintenance, Cloning},
references={Amir, A., Farach, M., Galil, Z., Giancarlo, R., Park, K., Dynamic dictionary matching (1993) Journal of Computer and System Sciences, 49 (2), pp. 208-222; Baker, B., Parameterized duplication in strings: Al- gorithms and an application to software maintenance (1997) SIAM Journal on Computing, 26 (5), pp. 1343-1362. , Oct; Baker, B.S., A program for identifying duplicated code (1992) Computer Science and Statistics 24: Proceedings of the 24th Symposium on the Interface, pp. 49-57. , Mar; Baker, B.S., Parameterized Pattern Matching: Algo- rithms and Applications (1996) Journal Computer System Science, 52 (1), pp. 28-42. , Feb; Baker, B.S., Giancarlo, R., Sparse dynamic pro- gramming for longest common subsequence from frag- ents (2002) Journal Algorithms, 42 (2), pp. 231-254. , Feb; Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., Clone Detection Using (1998) International Conference on Software Maintenance, pp. 368-378. , Abstract Syntax Trees, T. M. Koshgoftaar and K. Bennett, editors, IEEE Computer Society Press; Canfora, G., Cerulo, L., Penta, M.D., Identifying hanged source code lines from version repositories (2007) Mining Software Repositories, p. 14. , IEEE CS Press, May; Duala-Ekoko, E., Robillard, M., Tracking code clones in evolving software (2007) International Conference on Software Engineering, pp. 158-167. , ACM Press; Ducasse, S., Rieger, M., Demeyer, S., A Language ndependent Approach for Detecting Duplicated Code (1999) International Conference on Software Maintenance, pp. 109-118; Falke, R., Koschke, R., Frenzel, P., Empirical evalu- ation of clone detection using syntax Suffix trees (2008) Em pirical Software Engineering, , accepted for publi-cation; Ferragina, P., Grossi, R., Montagero, M., A note on updating Suffix tree labels (1997) Proceedings of the Third Italian Conference on Algorithms and Complexity, pp. 181-192. , London, UK, Springer-Verlag; Gusfield, D., Landau, G.M., Schieber, B., An eficient algorithm for the all pairs Suffix-prefix problem (1992) Information Processing Letters, 41 (4), pp. 181-185; Johnson, J.H., Identifying redundancy in source code using fingerprints (1993) Conference of the Centre for Advanced Studies on Collaborative research, pp. 171-183. , IBM Press; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A Multi-Linguistic Token-based Code Clone Detection System for Large Scale Source Code (2002) IEEE Transac-tions on Software Engineering, 28 (7), pp. 654-670; Kim, M., Sazawal, V., Notkin, D., Murphy, G.C., An empirical study of code clone genealogies (2005) Eu-ropean Software Engineering Conference and Foundations of Software Engineering (ESEC/FSE, pp. 187-196; Komondoor, R., Horwitz, S., Using slicing to identify duplication in source code (2001) Proc. Int. Symposium on Static Analysis, pp. 40-56. , July; Kontogiannis, K., DeMori, R., Bernstein, M., Galler, M., Merlo, E., Pattern matching for design concept localization (1995) Working Conference on Reverse Engineering, pp. 96-103. , IEEE CS Press, July; Koschke, R., Survey of research on software clones (2007) Duplication, Redundancy, and Similarity in Software, , Dagstuhl Seminar Proceedings, Dagstuhl, Germany, Dagstuhl 06301; Koschke, R., Frontiers on software clone management (2008) International Conference on Software Maintenance, , IEEE CS Press; Koschke, R., Identifying and Removing Software Clones, pp. 15-39. , Springer Verlag, 2008. Editors: Serge Demeyer und Tom Mens; Koschke, R., Falke, R., Frenzel, P., Clone detection using abstract syntax suffx trees (2006) Working Confer- ence on Reverse Engineering, pp. 253-262. , IEEE CS Press; Krinke, J., Identifying Similar Code with Program De- pendence Graphs (2001) Working Conference on Reverse Engineering, pp. 301-309; Krinke, J., A study of consistent and inconsistent changes to code clones (2007) Working Conference on Reverse Engineering, , IEEE CS Press; Krinke, J., Is cloned code more stable than non-cloned code? (2008) Workshop Source Code Analysis and Manipulation, pp. 57-66. , IEEE CS Press; Manber, U., Myers, G., Suffix arrays: A new method for on-line string searches (1991) SIAM Journal on Computing, 22 (5), pp. 935-948. , Oct; Marcus, A., Maletic, J., Identification of high-level concept clones in source code (2001) International Confer-ence on Automated Software Engineering, pp. 107-114; Mayrand, J., Leblanc, C., Merlo, E., Experiment on the automatic detection of function clones in a software system using metrics (1996) International Conference on Software Maintenance, pp. 244-253; McCreight, E., A space-economical Suffix tree construc-tion algorithm (1976) Journal of the ACM, 32 (2), pp. 262-272; Roy, C.K., Cordy, J.R., (2007) A survey on software clone detection research, , Technical Report No. 2007-541, School of Computing, Queen's University at Kingston, Ontario, Canada; Ukkonen, E., On-line construction of Suffix trees (1995) Al- gorithmica, 14 (3), pp. 249-260},
correspondence_address1={Göde, N.; University of BremenGermany; email: nils@informatik.uni-bremen.de},
sponsors={Reengineering Forum, REF},
address={Kaiserslautern},
issn={15345351},
isbn={9780769535890},
language={English},
abbrev_source_title={Proc. Eur. Conf. Software Maint. Reeng.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koschke2009269,
author={Koschke, R. and Jarzabek, S. and Cordy, J. and Inoue, K.},
title={Third internationalworkshop on software clones (IWSC)},
journal={Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR},
year={2009},
pages={269-270},
doi={10.1109/CSMR.2009.45},
art_number={4812766},
note={cited By 0; Conference of 13th European Conference on Software Maintenance and Reengineering, CSMR 2009 ; Conference Date: 24 March 2009 Through 27 March 2009;  Conference Code:76983},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-67649946374&doi=10.1109%2fCSMR.2009.45&partnerID=40&md5=20e498e4b75c802f41bc32976011ef20},
affiliation={University of Bremen, Germany; National University of Singapore, Singapore; Queen's University, Canada; Osaka University, Japan},
references={R. Koschke. Survey of research on software clones. In R. Koschke, E. Merlo, and A. Walenstein, editors, Duplication, Redundancy, and Similarity in Software, number 06301 in Dagstuhl Seminar Proceedings, agstuhl, Germany, 2007. Dagstuhl; Koschke, R., Frontiers in software clone management (2008) Frontiers in Software Maintenance, Proceedings of the International Conference on Software Maintenance, , IEEE Computer Society Press; Koschke, R., Software Evolution, chapter Identifying and Removing Software Clones, pp. 15-39. , Springer Verlag, 2008. Editors: Serge Demeyer and Tom Mens; (2007) Duplication, Redundancy, and Similarity in Software, , and, editors, Dagstuhl Seminar Proceedings, Dagstuhl, Germany, Dagstuhl 06301; C. Roy and J. Cordy. A survey on software clone detection research. Technical Report 541, Queen's University, 2007; Walenstein, A., Lakhotia, A., Koschke, R., Second international workshop on detection of software clones: Workshop report (2004) ACM SIGSOFT Software Engineering Notes, 29 (2). , 1-5, Mar},
correspondence_address1={Koschke, R.; University of BremenGermany; email: koschke@tzi.de},
sponsors={Reengineering Forum, REF},
address={Kaiserslautern},
issn={15345351},
isbn={9780769535890},
language={English},
abbrev_source_title={Proc. Eur. Conf. Software Maint. Reeng.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Mende2009247,
author={Mende, T. and Koschke, R. and Leszak, M.},
title={Evaluating defect prediction models for a large evolving software system},
journal={Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR},
year={2009},
pages={247-250},
doi={10.1109/CSMR.2009.55},
art_number={4812760},
note={cited By 13; Conference of 13th European Conference on Software Maintenance and Reengineering, CSMR 2009 ; Conference Date: 24 March 2009 Through 27 March 2009;  Conference Code:76983},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-67649886457&doi=10.1109%2fCSMR.2009.55&partnerID=40&md5=8cc0104edda5a9e1e04ebfc8cd7c58bf},
affiliation={University of Bremen, Germany; Alcatel-Lucent AG, Nürnberg, Germany},
abstract={A plethora of defect prediction models has been pro- posed and empirically evaluated, often using standard classi cation performance measures. In this paper, we explore defect prediction models for a large, multi-release software system from the telecom-munications domain. A history of roughly 3 years is analyzed to extract process and static code metrics that are used to build several defect prediction models with Random Forests. The performance of the resulting models is compa- rable to previously published work. Furthermore, we develop a new evaluation measure based on the comparison to an optimal model. © 2009 IEEE.},
keywords={Defect prediction models;  Evaluation measures;  Optimal model;  Performance measure;  Random forests;  Software systems;  Static codes;  TeleCOM, Computer software maintenance;  Defects;  Mathematical models, Computer software selection and evaluation},
references={Arisholm, E., Briand, L.C., Fuglerud, M., Data mining techniques for building fault-proneness models in telecom java software (2007) ISSRE; Breiman, L., Random forests (2001) Machine Learning, , 45(1):5{32; Khoshgoftaar, T.M., Allen, E.B., Classi-cation of fault-prone software modules: Prior probabilities, costs, and model evaluation (1998) Empirical Software Engineering, , 3(3):275{298; Leszak, M., Software defect analysis of a multi-release telecommunications system (2005) PROFES, pages 98{114; T. Menzies, A. Dekhtyar, J. Distefano, and J. Green- wald. Problems with precision: A response to com- ments on 'data mining static code attributes to learn efect predictors'. TSE, 33(9):637{640, 2007; T. Menzies, J. Greenwald, and A. Frank. Data mining static code attributes to learn defect predictors. TSE, 33(1):2{13, 2007; T. Ostrand, E. Weyuker, and R. Bell. Predicting the location and number of faults in large software systems. TSE, 31(4):340{355, 2005; Ostrand, T.J., Weyuker, E.J., How to measure success of fault prediction models (2007) SOQUA, pages 5{30, , New York, NY, USA, ACM; Tan, P.-N., Steinbach, M., Kumar, V., (2005) Introduction to Data Mining, , AddisonWesley, 1st edition, May},
correspondence_address1={Mende, T.; University of BremenGermany; email: ftmende@informatik.uni-bremen.de},
sponsors={Reengineering Forum, REF},
address={Kaiserslautern},
issn={15345351},
isbn={9780769535890},
language={English},
abbrev_source_title={Proc. Eur. Conf. Software Maint. Reeng.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Koschke2009140,
author={Koschke, R.},
title={Architecture reconstruction: Tutorial on reverse engineering to the architectural level},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2009},
volume={5413},
pages={140-173},
doi={10.1007/978-3-540-95888-8_6},
note={cited By 20; Conference of International Summer School on Software Engineering, ISSSE 2006-2008 ;  Conference Code:80140},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-67049158226&doi=10.1007%2f978-3-540-95888-8_6&partnerID=40&md5=71c506a495b08998434e1e833e1c9354},
affiliation={Universität Bremen, Fachbereich Mathematik und Informatik, Arbeitsgruppe Softwaretechnik, Germany},
abstract={Software architectures are described by different views which depend upon the concerns of the respective stakeholders. Far too often, software architectures are not documented sufficiently. In such cases, an architecture description must be reconstructed when changes to the system are to be made. This article summarizes the current state of the art of techniques and methods for software architecture reconstruction and relates them to the viewpoints that have been proposed in architecture design. The article identifies research opportunities based on the comparison. © Springer-Verlag Berlin Heidelberg 2009.},
author_keywords={Architecture reconstruction;  Bibliography;  Reverse engineering;  Software architecture},
keywords={Architectural levels;  Architecture description;  Architecture designs;  Architecture reconstruction;  Research opportunities;  State of the art, Architecture;  Bibliographies;  Computer software;  Reengineering;  Restoration;  Reverse engineering, Software architecture},
references={van Deursen, A., Hofmeister, C., Koschke, R., Moonen, L., Riva, C., Symphony: View-driven software architecture reconstruction (2004) IEEE/IFIP Working Conference on Software Architecture, pp. 122-132. , IEEE Computer Society Press, Los Alamitos; IEEE recommended practice for architectural description of software-intensive systems - std. 1471-2000 (2000), IEEE P1471; Parnas, D.L., On a 'buzzword': Hierarchical structure (1974) Proc. IFIP Congress, , North Holland Publishing Company, Amsterdam; Zachman, J.A., A framework for information systems architecture (1987) IBM Systems Journal, 26 (3); Sowa, J.F., Zachman, J.A., Extending and formalising the framework for information systems architecture (1992) IBM Systems Journal, 31 (3), pp. 590-616; Zachman, J.A., A framework for information systems architecture (1999) IBM Systems Journal, 38 (2-3), pp. 454-470; Perry, D.E., Wolf, A.L., Foundations for the study of software (1992) ACM SIG- SOFT, 17 (4), pp. 40-52; Kruchten, P., The 4+1 view model of architecture (1995) IEEE Software, 12 (6), pp. 42-50; Soni, D., Nord, R.L., Hofmeister, C., Software architecture in industrial applications (1995) International Conference on Software Engineering, pp. 196-206. , ACM Press, New York; Hofmeister, C., Nord, R., Soni, D., Applied Software Architecture (2000) Object Technology Series, , Addison-Wesley, Reading; Clements, P., Bachmann, F., Bass, L., Garlan, D., Ivers, J., Little, R., Nord, R., Stafford, J., (2002) Documenting Software Architecture, , Addison-Wesley, Boston; Shaw, M., Garlan, D., (1996) Software Architecture: Perspectives on an Emerging Discipline, , Prentice Hall, Englwood Cliffs; Holt, R.C., Structural manipulation of software architecture using tarski relational algebra (1998) Working Conference on Reverse Engineering, pp. 210-219. , Blaha, M, Verhoef, C, eds, IEEE Computer Society Press, Los Alamitos; Postma, A., A method for module architecture verification and its application on a large component-based system (2003) Information and Software Technology, 45, pp. 171-194; Feijs, L., Krikhaar, R., van Ommering, R., A relational approach to support software architecture analysis (1998) Software - Practice and Experience, 28 (4), pp. 371-400; Riva, C., Architecture reconstruction in practice (2002) IEEE/IFIP Working Conference on Software Architecture, , IEEE Computer Society Press, Los Alamitos; Mens, K., (2000), Automating architectural conformance checking by means of logic meta programming. Phd thesis, Departement Informatica, Vrije Universiteit Brussel; Murphy, G.C., Notkin, D., Reengineering with reflexion models: A case study (1997) IEEE Computer, 30 (8), pp. 29-36; Bassil, S., Keller, R.K., Software visualization tools: Survey and analysis (2001) International Workshop on Program Comprehension, pp. 7-17. , IEEE Computer Society Press, Los Alamitos; Knight, C., Munro, M., Mediating diverse visualisations for comprehension (2001) International Workshop on Program Comprehension, pp. 18-25. , IEEE Computer Society Press, Los Alamitos; Wiggins, M., An overview ofprogram visualization tools and systems (1998) 36th Annual Southeast Regional Conference, pp. 194-200. , ACM Press, New York; Koschke, R., Software visualization in software maintenance, reverse engineering, and reengineering: A research survey (2003) Journal on Software Maintenance and Evolution, 15 (2), pp. 87-109; Kazman, R., Carriere, S., View extraction and view fusion in architectural understanding (1998) International Conference on Software Reuse; Chase, M.P., Harris, D., Yeh, A., Manipulating recovered software architecture views (1997) International Conference on Software Engineering, pp. 184-194. , ACM Press, New York; Hillard II, R.F., Rice, T.B., Schwarm, S.C., The architectural metaphor as foundation for system engineering (1995) Annual Symposium of the International Council on Systems Engineering; Ross, D.T., Removing the limitations of natural languages (with the principles behind the rsa language) (1980) Proceedings of the Software Engineering Workshop, , Academic Press, London; Anderson, K.M., Taylor, R.N., Whitehead Jr., E.J., Chimera: Hypertext for heterogeneous software environments (1994) Proceedings of the European conference on Hypermedia technology, , ACM Press, New York; Devanbu, P., Chen, R., Gansner, E., Muller, H., Martin, A., Chime: Customizable hyperlink insertion and maintenance engine for software engineering environments (1999) International Conference on Software Engineering, , ACM Press, New York; Pollet, D., Ducasse, S., Poyet, L., Alloui, I., Cimpan, S., Verjus, H., Towards a process-oriented software architecture reconstruction taxonomy (2007) European Conference on Software Maintenance and Reengineering, pp. 137-148. , IEEE Computer Society Press, Los Alamitos; Ivkovic, I., Godfrey, M., Enhancing domain-specific software architecture recovery (2003) International Workshop on Program Comprehension, pp. 266-270. , may, IEEE Computer Society Press, Los Alamitos; Liu, K., Alderson, A., Qureshi, Z., Requirements recovery from legacy systems by analyzing and modelling behavior (1999) International Conference on Software Maintenance, , IEEE Computer Society Press, Los Alamitos; Riva, C., Yang, Y., Generation of architectural documentation using XML (2002) Working Conference on Reverse Engineering, pp. 161-169. , IEEE Computer Society Press, Los Alamitos; Riva, C., Architecture reconstruction in practice (2002) IEEE/IFIP Working Conference on Software Architecture, pp. 159-173. , IEEE Computer Society Press, Los Alamitos; Bril, R.J., Postma, A., Krikhaar, R.L., Embedding architectural support in industry (2003) International Conference on Software Maintenance, pp. 348-357. , IEEE Computer Society Press, Los Alamitos; Stoermer, C., O'Brien, L., Verhoef, C., Practice patterns for architecture reconstruction (2002) Working Conference on Reverse Engineering, pp. 151-160. , IEEE Computer Society Press, Los Alamitos; Stoermer, C., O'Brien, L., Verhoef, C., Moving towards quality attribute driven software architecture reconstruction (2003) Working Conference on Reverse Engineering, pp. 46-56. , IEEE Computer Society Press, Los Alamitos; Stoermer, C., O'Brien, L., MAP - mining architectures for product line evaluations (2001) IEEE/IFIP Working Conference on Software Architecture, pp. 35-44. , IEEE Computer Society Press, Los Alamitos; Ding, L., Medvidovic, N., Focus: A light-weight, incremental approach to software architecture recovery and evolution (2001) IEEE/IFIP Working Conference on Software Architecture, pp. 191-200. , IEEE Computer Society Press, Los Alamitos; Andritsos, P., Tzerpos, V., Software clustering based on information loss minimization (2003) Working Conference on Reverse Engineering, pp. 334-343. , IEEE Computer Society Press, Los Alamitos; Anquetil, N., Lethbridge, T., Extracting concepts from file names: A new file clustering criterion (1998) International Conference on Software Engineering, pp. 84-93. , ACM Press, New York; Baniassad, E.L.A., Murphy, G.C., Conceptual module querying for software reengineering (1998) International Conference on Software Engineering, pp. 64-73. , ACM Press, New York; Bauer, M., Trifu, M., Architecture-aware adaptive clustering of oo systems (2004) European Conference on Software Maintenance and Reengineering, pp. 3-12. , IEEE Computer Society Press, Los Alamitos; Bojic, D., Velasevic, D., A use-case driven method of architecture recovery for program understanding and reuse reengineering (2000) European Conference on Software Maintenance and Reengineering, , IEEE Computer Society Press, Los Alamitos; Chiricota, Y., Jourdan, F., Melancon, G., Software components capture using graph clustering (2003) International Workshop on Program Comprehension, pp. 217-226. , IEEE Computer Society Press, Los Alamitos; van Deursen, A., Kuipers, T., Identifying objects using cluster and concept analysis (1999) International Conference on Software Engineering, pp. 246-255. , IEEE Computer Society Press, Los Alamitos; Embley, D.W., Woodfield, S.N., Assessing the quality of abstract data types written in Ada (1988) International Conference on Software Engineering, pp. 144-153. , ACM Press, New York; Girard, J.F., Koschke, R., Finding components in a hierarchy of modules: A step towards architectural understanding (1997) International Conference on Software Maintenance, , IEEE Computer Society Press, Los Alamitos; Girard, J.F., Koschke, R., Schied, G., Comparison of abstract data type and abstract state encapsulation detection techniques for architectural understanding (1997) Working Conference on Reverse Engineering, , IEEE Computer Society Press, Los Alamitos; Koschke, R., Eisenbarth, T., A framework for experimental evaluation of clustering techniques (2000) International Workshop on Program Comprehension, , IEEE Computer Society Press, Los Alamitos; Krikhaar, R., Reverse architecting approach for complex systems (1997) International Conference on Software Maintenance, , IEEE Computer Society Press, Los Alamitos; Lakhotia, A., Gravley, J., Toward experimental evaluation of subsystem classification recovery techniques (1995) Working Conference on Reverse Engineering, pp. 262-271. , IEEE Computer Society Press, Los Alamitos; Lindig, C., Snelting, G., Assessing modular structure of legacy code based on mathematical concept analysis (1997) International Conference on Software Engineering, pp. 349-359. , IEEE Computer Society Press, Los Alamitos; Lung, C.H., Software architecture recovery and restructuring through clustering techniques (1998) Proceedings of the third international workshop on Software architecture, pp. 101-104. , ACM Press, New York; Tzerpos, V., Holt, R.C., Mojo: A distance metric for software clustering (1999) Working Conference on Reverse Engineering, pp. 187-196. , IEEE Computer Society Press, Los Alamitos; Mahdavi, K., Harman, M., Hierons, R.M., A multiple hill climbing approach to software module clustering (2003) International Conference on Software Maintenance, pp. 315-324. , IEEE Computer Society Press, Los Alamitos; Mancoridis, S., Holt, R.C., Recovering the structure of software systems using tube graph interconnection clustering (1996) International Conference on Software Maintenance, , IEEE Computer Society Press, Los Alamitos; Mancoridis, S., Mitchell, B., Rorres, C., Chen, Y., Gansner, E., Using automatic clustering to produce high-level system organizations of source code (1998) International Workshop on Program Comprehension, , IEEE Computer Society Press, Los Alamitos; Maqbool, O., Babri, H.A., The weighted combined algorithm: A linkage algorithm for software clustering (2004) European Conference on Software Maintenance and Reengineering, pp. 15-24. , IEEE Computer Society Press, Los Alamitos; Mitchell, B.S., Mancoridis, S., Craft: A framework for evaluating software clustering results in the absence of benchmark decompositions (2001) Working Conference on Reverse Engineering, pp. 93-102. , IEEE Computer Society Press, Los Alamitos; Müller, H.A., Klashinsky, K., Rigi - a system for programming-in-the-large (1985) International Conference on Software Engineering, pp. 80-86. , ACM Press, New York; Müller, H.A., Tilley, S.R., Orgun, M.A., Corrie, B.D., Madhavji, N.H., A reverse engineering environment based on spatial and visual software interconnection models (1992) Proceedings of the Fifth ACM SIGSOFT Symposium on Software development environments, pp. 88-98. , ACM Press, New York; de Oca, C.M., Carver, D.L., A visual representation model for software subsystem decomposition (1998) Working Conference on Reverse Engineering, , IEEE Computer Society Press, Los Alamitos; Rayside, D., Reuss, S., Hedges, E., Kontogiannis, K., The effect of call graph construction algorithms for object-oriented programs on automatic clustering (2000) International Workshop on Program Comprehension, , IEEE Computer Society Press, Los Alamitos; Saeed, M., Maqbool, O., Babri, H., Hassan, S., Sarwar, S., Software clustering techniques and the use of combined algorithm (2003) European Conference on Software Maintenance and Reengineering, pp. 301-310. , IEEE Computer Society Press, Los Alamitos; Sartipi, K., Kontogiannis, K., Mavaddat, F., Architectural design recovery using data mining techniques (2000) European Conference on Software Maintenance and Reengineering, , IEEE Computer Society Press, Los Alamitos; Sartipi, K., Kontogiannis, K., A graph pattern matching approach to software architecture recovery (2001) International Conference on Software Maintenance, pp. 408-417. , IEEE Computer Society Press, Los Alamitos; Sartipi, K., Kontogiannis, K., On modeling software architecture recovery as graph matching (2003) International Conference on Software Maintenance, pp. 224-234. , IEEE Computer Society Press, Los Alamitos; Sartipi, K., Kontogiannis, K., Mavaddat, F., A pattern matching framework for software architecture recovery and restructuring (2000) International Workshop on Program Comprehension, , IEEE Computer Society Press, Los Alamitos; Sartipi, K., Alborz: A query-based tool for software architecture recovery (2001) International Workshop on Program Comprehension, pp. 115-117. , IEEE Computer Society Press, Los Alamitos; Schwanke, R.W., An intelligent tool for re-engineering software modularity (1992) International Conference on Software Engineering, , ACM Press, New York; Shokoufandeh, A., Mancoridis, S., Maycock, M., Applying spectral methods to software clustering (2002) Working Conference on Reverse Engineering, pp. 3-12. , IEEE Computer Society Press, Los Alamitos; Siff, M., Reps, T., Identifying modules via concept analysis (1997) International Conference on Software Maintenance, pp. 170-179. , IEEE Computer Society Press, Los Alamitos; Siff, M., Reps, T., Identifying modules via concept analysis (1999) IEEE Computer Society Transactions on Software Engineering, 25 (6), pp. 749-768; Tonella, P., Concept analysis for module restructuring (2001) IEEE Computer Society Transactions on Software Engineering, 27 (4), pp. 351-363; Tzerpos, V., Holt, R.C., On the stability of software clustering algorithms (2000) International Workshop on Program Comprehension, , IEEE Computer Society Press, Los Alamitos; Tzerpos, V., The orphan adoption problem in architecture maintenance (1997) Working Conference on Reverse Engineering, , IEEE Computer Society Press, Los Alamitos; Wen, Z., Tzerpos, V., An optimal algorithm for mojo distance (2003) International Workshop on Program Comprehension, pp. 227-236. , IEEE Computer Society Press, Los Alamitos; Abreu, F., Pereira, G., Sousa, P., A coupling-guided cluster analysis approach to reengineer the modularity of object-oriented systems (2000) European Conference on Software Maintenance and Reengineering, , IEEE Computer Society Press, Los Alamitos; Gall, H., Klösch, R., Finding objects in procedural programs: An alternative approach (1995) Working Conference on Reverse Engineering, pp. 208-217. , IEEE Computer Society Press, Los Alamitos; Han, M., Hofmeister, C., Nord, R.L., Reconstructing software architecture for J2EE web applications (2003) Working Conference on Reverse Engineering, pp. 67-76. , IEEE Computer Society Press, Los Alamitos; Mendonca, N.C., Kramer, J., Developing an approach for the recovery of distributed software architectures (1998) International Workshop on Program Comprehension, , IEEE Computer Society Press, Los Alamitos; Dekel, U., Gil, Y., Revealing class structure with concept lattices (2003) Working Conference on Reverse Engineering, pp. 353-362. , IEEE Computer Society Press, Los Alamitos; Snelting, G., Tip, F., Reengineering class hierarchies using concept analysis (1998) Proceedings of the ACM SIGSOFT sixth international symposium on Foundations of software engineering, pp. 99-110. , ACM Press, New York; Egyed, A., Automated abstraction of class diagrams (2002) ACM Transactions on Software Engineering and Methodology, 11 (4), pp. 449-491; Jackson, D., Waingold, A., Lightweight extraction of object models from bytecode (1999) International Conference on Software Engineering, pp. 194-202. , ACM Press, New York; Jackson, D., Waingold, A., Lightweight extraction of object models from bytecode (2001) IEEE Computer Society Transactions on Software Engineering, 27 (2), pp. 159-169; Milanova, A., Rountev, A., Ryder, B., Constructing precise object relation diagrams (2002) International Conference on Software Maintenance, pp. 586-595. , IEEE Computer Society Press, Los Alamitos; Richner, T., Ducasse, S., Using dynamic information for the iterative recovery of collaborations and roles (2002) International Conference on Software Maintenance, pp. 34-43. , IEEE Computer Society Press, Los Alamitos; Richner, T., Ducasse, S., Recovering high-level views of object-oriented applications from static and dynamic information (1999) International Conference on Software Maintenance, , IEEE Computer Society Press, Los Alamitos; Riva, C., Rodriguez, J.V., Combining static and dynamic views for architecture reconstruction (2002) European Conference on Software Maintenance and Reengi- neering, pp. 47-56. , IEEE Computer Society Press, Los Alamitos; Subramaniam, G.V., Byrne, E.J., Deriving an object model from legacy fortran code (1996) International Conference on Software Maintenance, , IEEE Computer Society Press, Los Alamitos; Tonella, P., Potrich, A., Reverse engineering of the interaction diagrams from C++ code (2003) International Conference on Software Maintenance, pp. 159-168. , IEEE Computer Society Press, Los Alamitos; Yeh, D., Kuo, W.Y., Reverse engineering aggregation relationship based on propagation of operations (2002) European Conference on Software Maintenance and Reengineering, pp. 223-231. , IEEE Computer Society Press, Los Alamitos; Mancoridis, S., Toward a generic framework for computing subsystem interfaces (1996) Joint Proceedings of the Second International Software Architecture Workshop (ISAW-2) and International Workshop on Multiple Perspectives in Software Development (Viewpoints 1996) on SIGSOFT 1996 Workshops, pp. 106-110. , ACM Press, New York; Whaley, J., Martin, M.C., Lam, M.S.: Automatic extraction of object-oriented component interfaces. In: Proceedings of the International Symposium on Software Testing and Analysis (July 2002); Viljamaa, J., Reverse engineering framework reuse interfaces (2003) Proceedings of the 9th European Software Engineering Conference held jointly with 10th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 217-226. , ACM Press, New York; Antoniol, G., Fiutem, R., Cristoforetti, L., Design pattern recovery in object- oriented software (1998) International Workshop on Program Comprehension, , IEEE Computer Society Press, Los Alamitos; Asencio, A., Cardman, S., Harris, D., Laderman, E., Relating expectations to automatically recovered design patterns (2002) Working Conference on Reverse Engineering, pp. 87-96. , IEEE Computer Society Press, Los Alamitos; Balanyi, Z., Ferenc, R., Mining design patterns from C++ source code (2003) International Conference on Software Maintenance, pp. 305-314. , IEEE Computer Society Press, Los Alamitos; Heuzeroth, D., Holl, T., Högström, G., Löwe, W., Automatic design pattern detection (2003) International Workshop on Program Comprehension, pp. 94-103. , IEEE Computer Society Press, Los Alamitos; Keller, R.K., Schauer, R., Robitaille, S., Page, P., Pattern-based reverse- engineering of design components (1999) International Conference on Software Engineering, pp. 226-235. , ACM Press, New York; Kramer, C., Prechelt, L., Design recovery by automated search for structural design patterns in object-oriented software (1996) Working Conference on Reverse Engineering, , IEEE Computer Society Press, Los Alamitos; Michail, A., Data mining library reuse patterns using generalized association rules (2000) International Conference on Software Engineering, pp. 167-176. , ACM Press, New York; Niere, J., Schäfer, W., Wadsack, J.P., Wendehals, L., Welsh, J., Towards pattern-based design recovery (2002) International Conference on Software Engineering, pp. 338-348. , ACM Press, New York; Niere, J., Wadsack, J.P., Wendehals, L., Handling large search space in pattern- based reverse engineering (2003) International Workshop on Program Comprehension, pp. 274-283. , IEEE Computer Society Press, Los Alamitos; Seemann, J., von Gudenberg, J.W., Pattern-based design recovery of java software (1998) Proceedings of the ACM SIGSOFT sixth international symposium on Foundations of software engineering, pp. 10-16. , ACM Press, New York; Tonella, P., Antoniol, G., Object oriented design pattern inference (1999) International Conference on Software Maintenance, , IEEE Computer Society Press, Los Alamitos; Tonella, P., Antoniol, G., Inference of object-oriented design patterns (2001) Journal of Software Maintenance and Evolution: Research and Practice, 13 (5), pp. 309-330; Aldrich, J., Chambers, C., Notkin, D., Archjava: Connecting software architecture to implementation (2002) International Conference on Software Engineering, pp. 187-196. , ACM Press, New York; Gannod, G.C., Murthy, S., Verification of recovered software architectures (2003) International Workshop on Program Comprehension, pp. 258-267. , IEEE Computer Society Press, Los Alamitos; Koschke, R., Simon, D., Hierarchical reflexion models (2003) Working Conference on Reverse Engineering, pp. 36-45. , IEEE Computer Society Press, Los Alamitos; Murphy, G.C., Notkin, D., Sullivan, K., Software reflexion models: Bridging the gap between source and high-level models (1995) Proceedings of the Third ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 18-28. , ACM Press, New York; Murphy, G.C., Notkin, D., Sullivan, K.J., Software reflexion models: Bridging the gap between design and implementation (2001) IEEE Computer Society Transactions on Software Engineering, 27 (4). , April; Rötschke, T., Krikhaar, R., Architecture analysis tools to support evolution of large industrial systems (2002) International Conference on Software Maintenance, pp. 182-191. , IEEE Computer Society Press, Los Alamitos; Tvedt, R., Costa, P., Lindvall, M., Does the code match the design? a process for architecture evaluation (2002) International Conference on Software Maintenance, pp. 393-403. , IEEE Computer Society Press, Los Alamitos; Chan, K., Liang, Z.C.L., Michail, A., Design recovery of interactive graphical applications (2003) International Conference on Software Engineering, pp. 114-124. , ACM Press, New York; Chen, K., Rajlich, V., Case study of feature location using dependence graph (2000) International Workshop on Program Comprehension, , IEEE Computer Society Press, Los Alamitos; Deprez, J.C., Lakhotia, A., A formalism to automate mapping from program features to code (2000) International Workshop on Program Comprehension, , IEEE Computer Society Press, Los Alamitos; Egyed, A., A scenario-driven approach to traceability (2001) International Conference on Software Engineering, pp. 123-132. , ACM Press, New York; Eisenbarth, T., Koschke, R., Simon, D., Derivation of feature component maps by means of concept analysis (2001) European Conference on Software Maintenance and Reengineering, pp. 176-180. , IEEE Computer Society Press, Los Alamitos; Eisenbarth, T., Koschke, R., Simon, D., Aiding program comprehension by static and dynamic feature analysis (2001) International Conference on Software Maintenance, pp. 602-611. , IEEE Computer Society Press, Los Alamitos; Eisenbarth, T., Koschke, R., Simon, D., Incremental location ofcombined features for large-scale programs (2002) International Conference on Software Maintenance, pp. 273-282. , IEEE Computer Society Press, Los Alamitos; Eisenbarth, T., Koschke, R., Simon, D., Feature-driven program understanding using concept analysis of execution traces (2001) International Workshop on Program Comprehension, pp. 300-309. , IEEE Computer Society Press, Los Alamitos; Eisenbarth, T., Koschke, R., Simon, D., Locating features in source code (2003) IEEE Computer Society Transactions on Software Engineering, 29 (3); Lukoit, K., Wilde, N., Stowell, S., Hennessey, T., Tracegraph: Immediate visual location of software features (2000) International Conference on Software Maintenance, , IEEE Computer Society Press, Los Alamitos; Marcus, A., Maletic, J.I., Recovering documentation-to-source-code traceability links using latent semantic indexing (2003) International Conference on Software Engineering, pp. 125-134. , IEEE Computer Society Press, Los Alamitos; Murphy, G.C., Lai, A., Walker, R.J., Robillard, M.P., Separating features in source code: An exploratory study (2001) International Conference on Software Engineering, pp. 275-284. , ACM Press, New York; Pashov, I., Riebisch, M., Philippow, I., Supporting architectural restructuring by analyzing feature models (2004) European Conference on Software Maintenance and Reengineering, pp. 25-34. , IEEE Computer Society Press, Los Alamitos; Wilde, N., Scully, M., Software reconnaissance: Mapping from features to code (1995) Journal on Software Maintenance and Evolution, 7, pp. 49-62; Wilde, N., Buckellew, M., Page, H., Rajlich, V., A case study of feature location in unstructured legacy fortran code (2001) European Conference on Software Maintenance and Reengineering, pp. 68-77. , IEEE Computer Society Press, Los Alamitos; Zhao, W., Zhang, L., Liu, Y., Sun, J., Yang, F., Sniafl: Towards a static non- interactive approach to feature location (2004) International Conference on Software Engineering, pp. 293-303. , IEEE Computer Society Press, Los Alamitos; Lucca, G.A.D., Fasolino, A.R., Carlini, U.D., Recovering use case models from object-oriented code: A thread-based approach (2000) Working Conference on Reverse Engineering, , IEEE Computer Society Press, Los Alamitos; El-Ramly, M., Stroulia, E., Sorenson, P., Mining system-user interaction traces for use case models (2002) International Workshop on Program Comprehension, pp. 21-30. , IEEE Computer Society Press, Los Alamitos; Krone, M., Snelting, G., On the inference of configuration structures from source code (1994) International Conference on Software Engineering, pp. 49-57. , ACM Press, New York; Snelting, G., Reengineering of configurations based on mathematical concept analysis (1996) ACM Transactions on Software Engineering and Methodology, 5 (2), pp. 146-189; Eisenbarth, T., Koschke, R., Vogel, G., (2005) Static object trace extraction for programs with pointers, , Journals of Systems and Software; Eisenbarth, T., Koschke, R., Vogel, G., Static trace extraction (2002) Working Conference on Reverse Engineering, , IEEE Computer Society Press, Los Alamitos; Ivkovic, I., Godfrey, M.W., Architecture recovery of dynamically linked applications: A case study (2002) International Workshop on Program Comprehension, pp. 178-184. , IEEE Computer Society Press, Los Alamitos; Marburger, A., Herzberg, D., E-cares research project: Understanding complex legacy telecommunication systems (2001) European Conference on Software Maintenance and Reengineering, pp. 139-147. , IEEE Computer Society Press, Los Alami-tos; Moe, J., Carr, D.A., Understanding distributed systems via execution trace data (2001) International Workshop on Program Comprehension, pp. 60-69. , IEEE Computer Society Press, Los Alamitos; Chase, M.P., Christey, S.M., Harris, D.R., Yeh, A.S., Recovering software architecture from multiple source code analyses (1998) Program Analysis for Software Technology, pp. 43-50. , ACM Press, New York; Chase, M.P., Christey, S.M., Harris, D.R., Yeh, A.S., Managing recovered function and structure of legacy software components (1998) Working Conference on Reverse Engineering, , IEEE Computer Society Press, Los Alamitos; Fiutem, R., Tonella, P., Antoniol, G., Merlo, E., A cliche-based environment to support architectural reverse engineering (1996) International Conference on Software Maintenance, , IEEE Computer Society Press, Los Alamitos; Harris, R., Reubenstein, H.B., Yeh, A.S., Reverse engineering to the architectural level (1995) International Conference on Software Engineering, pp. 186-195. , ACM Press, New York; Harris, D., Reubenstein, H., Yeh, A., Recognizers for extracting architectural features from source code (1996) Working Conference on Reverse Engineering, pp. 252-261. , IEEE Computer Society Press, Los Alamitos; Holtzblatt, L., Piazza, R., Reubenstein, H., Roberts, S., Harris, D., Design recovery for distributed systems (1997) IEEE Computer Society Transactions on Software Engineering, 23 (7), pp. 461-472; Pinzger, M., Gall, H., Pattern-supported architecture recovery (2002) International Workshop on Program Comprehension, pp. 53-62. , IEEE Computer Society Press, Los Alamitos; Tonella, P., Fiutem, R., Antoniol, G., Merlo, E., Augmenting pattern-based architectural recovery with flow analysis: Mosaic - a case study (1996) Working Conference on Reverse Engineering, , IEEE Computer Society Press, Los Alamitos; De Pauw, W., Jensen, E., Mitchell, N., Sevitsky, G., Vlissides, J., Yang, J.: Visualizing the execution of java programs. In: Diehl, S. (ed.) Dagstuhl Seminar 2001. LNCS, 2269, pp. 151-162. Springer, Heidelberg (2002); Briand, L., Labiche, Y., Miao, Y., Towards the reverse engineering of uml sequence diagrams (2003) Working Conference on Reverse Engineering, pp. 57-66. , IEEE Computer Society Press, Los Alamitos; Jerding, D.F., Stasko, J.T., Ball, T., Visualizing interactions in program executions (1997) International Conference on Software Engineering, pp. 360-370. , IEEE Computer Society Press, Los Alamitos; Jerding, D., Rugaber, S., Using visualization for architectural localization and extraction (1997) Working Conference on Reverse Engineering, , IEEE Computer Society Press, Los Alamitos; Kollmann, R., Gogolla, M., Capturing dynamic program behaviour with UML collaboration diagrams (2001) European Conference on Software Maintenance and Reengineering, pp. 58-67. , IEEE Computer Society Press, Los Alamitos; Krikhaar, R., Feijs, L., de Jong, R., Medema, J., Architecture comprehension tools for a PBX system (1999) European Conference on Software Maintenance and Reengineering, , IEEE Computer Society Press, Los Alamitos; Systä, T., Koskimies, K., Müller, H., Shimba - an environment for reverse engineering java software systems (2001) Software - Practice and Experience, 31 (4), pp. 371-394; Systä, T., Understanding the behavior of java programs (2000) Working Conference on Reverse Engineering, pp. 214-223. , IEEE Computer Society Press, Los Alamitos; Systä, T., On the Relationships between Static and Dynamic Models in Reverse Engineering Java Software (1999) Proceedings of the 6th Working Conference on Reverse Engineering, pp. 304-313. , Atlanta, GA, USA, pp, IEEE Computer Society Press, Los Alamitos; Souder, T., Mancoridis, S., Salah, M., Form: A framework for creating views of program executions (2001) International Conference on Software Maintenance, pp. 612-621. , IEEE Computer Society Press, Los Alamitos; Yan, H., Garlan, D., Schmerl, B., Rich, J.A., Kazman, R., Discotect: A system for discovering architectures from running systems (2004) International Conference on Software Engineering, pp. 470-479. , ACM Press, New York; Wu, J., Hassan, A.E., Holt, R.C., Using graph patterns to extract scenarios (2002) International Workshop on Program Comprehension, pp. 239-248. , IEEE Computer Society Press, Los Alamitos; Biggerstaff, T.J., Mitbander, B.G., Webster, D., The concept assignment problem in program understanding (1993) International Conference on Software Engineering, pp. 482-498. , ACM Press, New York; Gall, H., Jazayeri, M., Klaosch, R., Lugmayr, W., Trausmuth, G., Architecture recovery in ares (1996) Joint Proceedings of the Second International Software Architecture Workshop (ISAW-2) and International Workshop on Multiple Perspectives in Software Development (Viewpoints 1996) on SIGSOFT 1996 Workshops, pp. 111-115. , ACM Press, New York; Bowman, I.T., Holt, R.C., Reconstructing ownership architectures to help understand software systems (1999) International Workshop on Program Comprehension, , IEEE Computer Society Press, Los Alamitos; Tu, Q., Godfrey, M.W., The build-time software architecture view (2001) International Conference on Software Maintenance, pp. 398-407. , IEEE Computer Society Press, Los Alamitos; Chase, M.P., Harris, D.R., Roberts, S.N., Yeh, A.S., Analysis and presentation of recovered software architectures (1996) Working Conference on Reverse Engineering, , IEEE Computer Society Press, Los Alamitos; Issarny, V., Saridakis, T., Zarras, A., Multi-view description of software architectures (1998) ISAW 1998, Proceedings of the Third International Workshop on Software Architecture, pp. 81-84; Kazman, R., Carriere, S.J., View extraction and view fusion in architectural understanding (1998) Proceedings of the Fifth Internation Conference on Software Reuse, , IEEE Computer Society Press, Los Alamitos; Waters, R., Abowd, G.D., Architectural synthesis: Integrating multiple architectural perspectives (1999) Working Conference on Reverse Engineering, , IEEE Computer Society Press, Los Alamitos; Yeh, A.S., Harris, D.R., Chase, M.P., Manipulating recovered software architecture views (1997) International Conference on Software Engineering, pp. 184-194. , ACM Press, New York; Canfora, G., Cimitile, A., Munro, M., Taylor, C.J., Extracting abstract data types from C programs: A case study (1993) International Conference on Software Maintenance, pp. 200-209. , IEEE Computer Society Press, Los Alamitos; Canfora, G., Cimitile, A., Munro, M., An improved algorithm for identifying objects in code (1996) Journal of Software Practice and Experience, 26 (1), pp. 25-48; Canfora, G., Cimitile, A., Lucia, A.D., Lucca, G.A.D., A case study of applying an eclectic approach to identify objects in code (1999) International Workshop on Program Comprehension, pp. 136-143. , IEEE Computer Society Press, Los Alamitos; Choi, S., Scacchi, W., Extracting and restructuring the design of large systems (1990) IEEE Software, 7 (1), pp. 66-71; Belady, L.A., Evangelisti, C.J., System partitioning and its measure (1982) Journal of Systems and Software, 2 (1), pp. 23-29; Graudejus, H., (1998) Implementing a concept analysis tool for identifying abstract data types in C code, , Diplomarbeit, University of Kaiserslautern, Germany; Hutchens, D.H., Basili, V.R., System structure analysis: Clustering with data bindings (1985) IEEE Computer Society Transactions on Software Engineering, 11 (8), pp. 749-757; Liu, S.S., Wilde, N., Identifying objects in a conventional procedural language: An example of data design recovery (1990) International Conference on Software Maintenance, pp. 266-271. , IEEE Computer Society Press, Los Alamitos; Livadas, P., Johnson, T., A new approach to finding objects in programs (1994) Journal on Software Maintenance and Evolution, 6, pp. 249-260; Ogando, R.M., Yau, S.S., Wilde, N., An object finder for program structure understanding in software maintenance (1994) Journal on Software Maintenance and Evolution, 6 (5), pp. 261-283; Patel, S., Chu, W., Baxter, R., A measure for composite module cohesion (1992) International Conference on Software Engineering, pp. 38-48. , ACM Press, New York; Sahraoui, H., Melo, W., Lounis, H., Dumont, F., Applying concept formation methods to object identfication in procedural code (1997) International Conference on Automated Software Engineering, pp. 210-218. , IEEE Computer Society Press, Los Alamitos; Valasareddi, R.R., Carver, D.L., A graph-based object identification process for procedural programs (1998) Working Conference on Reverse Engineering, pp. 50-58. , IEEE Computer Society Press, Los Alamitos; Weidl, J, Gall, H, Binding object models to source code: An approach to object- oriented re-architecturing. In: Proc. of the 22nd Computer Software and Applications Conference. IEEE Computer Society Press, Los Alamitos 1998; Yeh, A.S., Harris, D., Reubenstein, H., Recovering abstract data types and object instances from a conventional procedural language (1995) Working Conference on Reverse Engineering, pp. 227-236. , IEEE Computer Society Press, Los Alamitos; Cimitile, A., Visaggio, G., Software salvaging and the call dominance tree (1995) Journal of Systems and Software, 28, pp. 117-127; Chwanke, R.W., Hanson, S.J., Using neural networks to modularize software (1994) Machine Learning, 15, pp. 136-168; Girard, J.F., Koschke, R., Schied, G., A metric-based approach to detect abstract data types and state encapsulations (1997) International Conference on Automated Software Engineering, , IEEE Computer Society Press, Los Alamitos; Girard, J.F., Koschke, R., Schied, G., A metric-based approach to detect abstract data types and state encapsulations (1999) Journal on Automated Software Engineering, 6 (4); Koschke, R., (1999) Atomic, , http://www.iste.uni-stuttgart.de/ps/rainer/thesis, Architectural Component Recovery for Program Understanding and Evolution. Ph.d. thesis, University of Stuttgart October; Girard, J.F., Koschke, R., A comparison of abstract data type and objects recovery techniques (2000) Journal Science of Computer Programming, 6 (2-3), pp. 149-181; Whaley, J., Martin, M.C., Lam, M.S.: Automatic extraction of object-oriented component interfaces. In: Proceedings of the International Symposium on Software Testing and Analysis (July 2002); Murphy, G.C., Notkin, D., Reengineering with reflexion models: A case study (1997) IEEE Computer, 30 (8), pp. 29-36; Christl, A., Koschke, R., Storey, M.A., Equipping the reflexion method with automated clustering (2005) Working Conference on Reverse Engineering, pp. 89-98. , IEEE Computer Society Press, Los Alamitos; Christl, A., Koschke, R., Storey, M.A., (2007) Automated clustering to support the reflexion method, 49 (3), pp. 255-274; Frenzel, P., Koschke, R., Breu, A.P.J., Angstmann, K., Extending the reflection method for consolidating software variants into product lines (2007) Working Conference on Reverse Engineering, pp. 160-169. , IEEE Computer Society Press, Los Alamitos; Kuhn, A., Greevy, O., Exploiting the analogy between traces and signal processing (2006) International Conference on Software Maintenance, , IEEE Computer Society Press, Los Alamitos; Greevy, O., (2007) Enriching Reverse Engineering through Feature Analysis, , Ph.d. thesis, University of Berne, Switzerland, Software Composition Group May; Koschke, R., Quante, J., On dynamic feature location (2005) International Conference on Automated Software Engineering, pp. 86-95. , ACM Press, New York},
correspondence_address1={Koschke, R.; Universität Bremen, Fachbereich Mathematik und Informatik, Arbeitsgruppe SoftwaretechnikGermany; email: koschke@informatik.uni-bremen.de},
address={Salerno},
issn={03029743},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Roy2009470,
author={Roy, C.K. and Cordy, J.R. and Koschke, R.},
title={Comparison and evaluation of code clone detection techniques and tools: A qualitative approach},
journal={Science of Computer Programming},
year={2009},
volume={74},
number={7},
pages={470-495},
doi={10.1016/j.scico.2009.02.007},
note={cited By 546},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-64549135034&doi=10.1016%2fj.scico.2009.02.007&partnerID=40&md5=9c5981f8e61d78542ccf4af64a97ae69},
affiliation={School of Computing, Queen's University, Canada; University of Bremen, Germany},
abstract={Over the last decade many techniques and tools for software clone detection have been proposed. In this paper, we provide a qualitative comparison and evaluation of the current state-of-the-art in clone detection techniques and tools, and organize the large amount of information into a coherent conceptual framework. We begin with background concepts, a generic clone detection process and an overall taxonomy of current techniques and tools. We then classify, compare and evaluate the techniques and tools in two different dimensions. First, we classify and compare approaches based on a number of facets, each of which has a set of (possibly overlapping) attributes. Second, we qualitatively evaluate the classified techniques and tools with respect to a taxonomy of editing scenarios designed to model the creation of Type-1, Type-2, Type-3 and Type-4 clones. Finally, we provide examples of how one might use the results of this study to choose the most appropriate clone detection tool or technique in the context of a particular set of goals and constraints. The primary contributions of this paper are: (1) a schema for classifying clone detection techniques and tools and a classification of current clone detectors based on this schema, and (2) a taxonomy of editing scenarios that produce different clone types and a qualitative evaluation of current clone detectors based on this taxonomy. © 2009 Elsevier B.V.},
author_keywords={Clone detection;  Comparison;  Scenario-based evaluation;  Software clone},
keywords={Amount of informations;  Clone detection;  Clone detection techniques;  Code clone detections;  Comparison;  Conceptual frameworks;  Current techniques;  Primary contributions;  Qualitative approaches;  Qualitative evaluations;  Scenario-based evaluation;  Software clone;  Software clone detections, Cloning;  Computer software selection and evaluation;  Information use;  Taxonomies, Quality control},
funding_details={IBM CanadaIBM Canada},
funding_details={Natural Sciences and Engineering Research Council of CanadaNatural Sciences and Engineering Research Council of Canada, NSERC},
funding_text 1={We thank the anonymous reviewers for their valuable comments and suggestions in improving this paper. We also thank the tool authors who provided useful answers to our queries, and the colleagues who assisted in tuning and clarifying this paper. This work is supported by the Natural Sciences and Engineering Research Council of Canada and by an IBM international faculty award.},
references={G. Antoniol, G. Casazza, M. Di Penta, E. Merlo, Modeling clones evolution through time series, in: Proceedings of the 17th IEEE International Conference on Software Maintenance, ICSM 2001, 2001, pp. 273-280; Antoniol, G., Villano, U., Merlo, E., Penta, M.D., Analyzing cloning evolution in the linux kernel (2002) Information and Software Technology, 44 (13), pp. 755-765; L. Aversano, L. Cerulo, M. Di Penta, How clones are maintained: An empirical study, in: Proceedings of the 11th European Conference on Software Maintenance and Reengineering, CSMR 2007, 2007, pp. 81-90; Baker, B., Finding clones with dup: Analysis of an experiment (2007) IEEE Transactions on Software Engineering, 33 (9), pp. 608-621; Baker, B., Manber, U., Deducing similarities in Java sources from bytecodes (1998) Proceedings of the USENIX Annual Technical Conference, pp. 179-190; Baker, B., A program for identifying duplicated code (1992) Proceedings of Computing Science and Statistics: 24th Symposium on the Interface, 24, pp. 49-57; Baker, B., Parameterized pattern matching: Algorithms and applications (1996) Journal Computer System Science, 52 (1), pp. 28-42; B. Baker, On finding duplication and near-duplication in large software systems, in: Proceedings of the 2nd Working Conference on Reverse Engineering, WCRE 1995, 1995, pp. 86-95; Baker, B., Giancarlo, R., Sparse dynamic programming for longest common subsequence from fragments (2002) Journal Algorithms, 42 (2), pp. 231-254; Balazinska, M., Merlo, E., Dagenais, M., Lague, B., Kontogiannis, K., Measuring clone based reengineering opportunities (1999) Proceedings of the IEEE Symposium on Software Metrics, METRICS, pp. 292-303; M. Balint, T. Girba, R. Marinescu, How developers copy, in: Proceedings of the 14th IEEE International Conference on Program Comprehension, ICPC 2006, 2006, pp. 56-68; Basit, H., Pugliesi, S., Smyth, W., Turpin, A., Jarzabek, S., Efficient token based clone detection with flexible tokenization (2007) Proceedings of the 6th European Software Engineering Conference and Foundations of Software Engineering, ESEC/FSE, pp. 513-515; I.D. Baxter, C. Pidgeon, M. Mehlich, DMS: Program transformations for practical scalable software evolution, in: Proceedings of the 26th International Conference on Software Engineering, ICSE 2004, 2004, pp. 625-634; Project Bauhaus. Last, , http://www.bauhaus-stuttgart.de, Accessed November 2008. URL; I. Baxter, A. Yahin, L. Moura, M. Anna, Clone detection using abstract syntax trees, in: Proceedings of the 14th International Conference on Software Maintenance, ICSM 1998, 1998, pp. 368-377; Bellon, S., (2002) Vergleich von techniken zur erkennung duplizierten quellcodes, , Diploma Thesis, University of Stuttgart; Bellon, S., Koschke, R., (2007) Tool comparison experiment, , http://www.bauhaus-stuttgart.de/clones, Detection of software clone:, December; Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) Transactions on Software Engineering, 33 (9), pp. 577-591; Bruntink, M., Deursen, A., Engelen, R., Tourwe, T., On the use of clone detection for identifying crosscutting concern code (2005) Transactions on Software Engineering, 31 (10), pp. 804-818; Bulychev, P., Minea, M., Duplicate code detection using anti-unification (2008) Spring Young Researchers Colloquium on Software Engineering, SYRCoSE, p. 4; Bulychev, P., CloneDigger Results, , http://clonedigger.sourceforge.net, Last Accessed February 2009; E. Burd, J. Bailey, Evaluating clone detection tools for use during preventative maintenance, in: Proceedings of the 2nd IEEE International Workshop on Source Code Analysis and Manipulation, SCAM 2002, 2002, pp. 36-43; Calefato, F., Lanubile, F., Mallardo, T., Function clone detection in web applications: A semiautomated approach (2004) Journal of Web Engineering, 3 (1), pp. 3-21; G. Casazza, G. Antoniol, U. Villano, E. Merlo, M. Penta, Identifying clones in the linux kernel, in: Proceedings of the 1st IEEE International Workshop on Source Code Analysis and Manipulation, SCAM 2001, 2001, pp. 90-97; Church, K., Helfman, J., Dotplot: A program for exploring self-similarity in millions of lines for text and code (1993) Journal of American Statistical Association, 2 (2), pp. 153-174; Cooper, K., McIntosh, N., Enhanced code compression for embedded risc processors Proceedings of the ACM SIGPLAN 1999 Conference on Programming Language Design and Implementation, SIGPLAN, PLDI 1999, pp. 1999-2149,139; Cordy, J.R., The TXL source transformation language (2006) Science of Computer Programming, 61 (3), pp. 190-210; Cordy, J.R., Dean, T.R., Synytskyy, N., Practical language-independent detection of near-miss clones (2004) Proceedings of the 14th IBM Centre for Advanced Studies Conference, CASCON, pp. 29-40; PMD's CPD. Last, , http://pmd.sourceforge.net/cpd.html, Accessed November 2008. URL; Dagenais, M., Merlo, E., Laguë, B., Proulx, D., Clones occurrence in large object oriented software packages (1998) Proceedings of the 8th IBM Centre for Advanced Studies Conference, CASCON, pp. 192-200; Davey, N., Barson, P., Field, S., Frank, R., The development of a software clone detector (1995) International Journal of Applied Software Technology, 1 (3-4), pp. 219-236; Debray, S.K., Evans, W., Muth, R., De Sutter, B., Compiler techniques for code compaction (2000) ACM Transactions on Programming Languages and Systems, 22 (2), pp. 378-415; F. Deissenboeck, B. Hummel, E. Juergens, B. Schaetz, S. Wagner, S. Teuchert, J. Girard, Clone detection in automotive model-based development, in: Proceedings of the 30th International Conference on Software Engineering, ICSE 2008, 2008, pp. 603-612; De Sutter, B., De Bus, B., De Bosschere, K., Sifting out the mud: Low level C++ code reuse (2002) Proceedings of the 17th ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA, pp. 275-291; A. De Lucia, R. Francese, G. Scanniello, G. Tortora, Understanding cloned patterns in web applications, in: Proceedings of the 13th International Workshop on Program Comprehension, IWPC 2005, 2005, pp. 333-336; G.A. Di Lucca, M. Di Penta, A.R. Fasolino, P. Granato, Clone analysis in the web era: An approach to identify cloned web pages, in: Proceedings of the 7th IEEE Workshop on Empirical Studies of Software Maintenance, WESS 2009, 2001, pp. 107-113; Tool Clone Detective (Part of ConQAT). Last, , http://conqat.in.tum.de/index.php/Main_Page, Accessed November 2008. URL; G. Di Lucca, M. Penta, A. Fasolino, An approach to identify duplicated web pages, in: Proceedings of the 26th International Computer Software and Applications Conference, COMPSAC 2002, 2002, pp. 481-486; Tool Dupman. Last, , http://sourceforge.net/projects/dupman, Accessed November 2008. URL; Ducasse, S., Nierstrasz, O., Rieger, M., On the effectiveness of clone detection by string matching (2006) International Journal on Software Maintenance and Evolution: Research and Practice, 18 (1), pp. 37-58; S. Ducasse, M. Rieger, S. Demeyer, A language independent approach for detecting duplicated code, in: Proceedings of the 15th International Conference on Software Maintenance, ICSM 1999, 1999, pp. 109-118; W. Evans, C. Fraser, M. Fei, Clone detection via structural abstraction, in: Proceedings of the 14th Working Conference on Reverse Engineering, WCRE 2007, 2007, pp. 150-159; Falke, R., Koschke, R., Frenzel, P., Empirical evaluation of clone detection using syntax suffix trees (2008) Empirical Software Engineering, 13, pp. 601-643; Fowler, M., (2000) Refactoring: Improving the Design of Existing Code, , Addison-Wesley; Fraser, C., Myers, E., Wendt, A., Analyzing and compressing assembly code (1984) Proceedings of the ACM SIGPLAN'84 Symposium on Compiler Construction, pp. 117-121; M. Gabel, L. Jiang, Z. Su, Scalable detection of semantic clones, in: Proceedings of the 30th International Conference on Software Engineering, ICSE 2008, 2008, pp. 321-330; Gitchell, D., Tran, N., Sim: A utility for detecting similarity in computer programs (1999) SIGCSE Bulletin, 31 (1), pp. 266-270; Göde, N., (2008) Incremental clone detection, , Diploma Thesis, Department of Mathematics and Computer Science, University of Bremen, Germany; J. Guo, Y. Zou, Detecting clones in business applications, in: Proceedings of the 15th Working Conference on Reverse Engineering, WCRE 2008, 2008, pp. 91-100; Higo, Y., Ueda, Y., Kamiya, T., Kusumoto, S., Inoue, K., On software maintenance process improvement based on code clone analysis (2002) Proceedings of the 4th International Conference on Product Focused Software Process Improvement, PROFES, pp. 185-197; Jablonski, P., Hou, D., CReN: A tool for tracking copy-and-paste code clones and renaming identifiers consistently in the IDE (2007) Proceedings of Eclipse Technology Exchange Workshop at OOPSLA, pp. 16-20; L. Jiang, G. Misherghi, Z. Su, S. Glondu, DECKARD: Scalable and accurate tree-based detection of code clones, in: Proceedings of the 29th International Conference on Software Engineering, ICSE 2007, 2007, pp. 96-105; Johnson, J., Identifying redundancy in source code using fingerprints (1993) Proceedings of the 1993 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON, pp. 171-183; Johnson, J., Visualizing textual redundancy in legacy source (1994) Proceedings of the 1994 Conference of the Centre for Advanced Studies on Collaborative research, CASCON, pp. 171-183; J. Johnson, Substring matching for clone detection and change tracking, in: Proceedings of the 10th International Conference on Software Maintenance, ICSM 1994, 1994, pp. 120-126; E. Juergens, F. Deissenboeck, B. Hummel, S. Wagner, Do code clones matter?, in: Proceedings of the 31st International Conference on Software Engineering, ICSE 2009, 2009, p. 11 (in press); Juillerat, N., Hirsbrunner, B., An algorithm for detecting and removing clones in java code (2006) Proceedings of the 3rd Workshop on Software Evolution through Transformations: Embracing the Change, SeTra, pp. 63-74; Kamiya, T., The Official CCFinderX Website, , http://www.ccfinder.net/ccfinderx.html, Last Accessed November 2008. URL; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multilinguistic token-based code clone detection system for large scale source code (2002) IEEE Transactions on Software Engineering, 28 (7), pp. 654-670; Kapser, C., Godfrey, M., Aiding comprehension of cloning through categorization (2004) Proceedings of the 7th International Workshop on Principles of Software Evolution, IWPSE, pp. 85-94; Kapser, C., Godfrey, M.W., Cloning considered harmful considered harmful: Patterns of cloning in software (2008) Empirical Software Engineering, 13 (6), pp. 645-692; Kienle, H.M., Müller, H.A., Weber, A., In the web of generated clones (2003) Proceedings of 2nd International Workshop on Detection of Software Clones, IWDSC, p. 2; Kim, M., Bergman, L., Lau, T., Notkin, D., An ethnographic study of copy and paste programming practices in OOPL (2004) Proceedings of 3rd International ACM-IEEE Symposium on Empirical Software Engineering, ISESE, pp. 83-92; Kim, M., Murphy, G., An empirical study of code clone genealogies Proceedings of the 10th European Software Engineering Conference Held Jointly with 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering, ESEC/SIGSOFT, FSE 2005, pp. 2005-2196,187; R. Komondoor, S. Horwitz, Using slicing to identify duplication in source code, in: Proceedings of the 8th International Symposium on Static Analysis, SAS 2001, 2001, pp. 40-56; Kontogiannis, K., DeMori, R., Merlo, E., Galler, M., Bernstein, M., Pattern matching for clone and concept detection (1996) Journal of Automated Software Engineering, 3 (1-2), pp. 77-108; K. Kontogiannis, Evaluation experiments on the detection of programming patterns using software metrics, in: Proceedings of the 3rd Working Conference on Reverse Engineering, WCRE 1997, 1997, pp. 44-54; S. Rao Kosaraju, Faster algorithms for the construction of parameterized suffix trees, in: Proceedings of the 36th Annual Symposium on Foundations of Computer Science, FOCS 1995, 1995, pp. 631-638; R. Koschke, Frontiers on software clone management, in: Proceedings of the Frontiers of Software Maintenance, 24th IEEE International Conference in Software Maintenance, ICSM 2008, 2008, pp. 119-128; Koschke, R., Identifying and removing software clones (2008) Software Evolution, pp. 15-39. , De- meyer S., and Mens T. (Eds), Springer Verlag; R. Koschke, J.-F. Girard, M. Wrthner, An intermediate representation for reverse engineering analyzes, in: Proceedings of the 5th Working Conference on Reverse Engineering, WCRE 1998, 1998, pp. 241-250; R. Koschke, R. Falke, P. Frenzel, Clone detection using abstract syntax suffix trees, in: Proceedings of the 13th Working Conference on Reverse Engineering, WCRE 2006, 2006, pp. 253-262; Koschke, R., Survey of research on software clones (2006) Proceedings of Dagstuhl Seminar 06301: Duplication, Redundancy, and Similarity in Software, p. 24; N. Kraft, B. Bonds, R. Smith, Cross-language clone detection, in: Proceedings of the 20th International Conference on Software Engineering and Knowledge Engineering, SEKE 2008, 2008, p. 6; J. Krinke, Identifying similar code with program dependence graphs, in: Proceedings of the 8th Working Conference on Reverse Engineering, WCRE 2001, 2001, pp. 301-309; Landwerth, I., Clone Detective, , http://www.codeplex.com/CloneDetectiveVS, Last Accessed November 2008. URL; F. Lanubile, T. Mallardo, Finding function clones in web applications, in: Proceedings of the 7th European Conference on Software Maintenance and Reengineering, CSMR 2003, 2003, pp. 379-386; Lee, S., Jeong, I., High performance code clone detection system for large scale source code (2005) Proceedings of the Object Oriented Programming Systems Languages and Applications Companion to the 20th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA Companion, pp. 140-141. , SDD; Leitão, A., Detection of redundant code using R2 D2 (2004) Software Quality Journal, 12 (4), pp. 361-382; Li, H., Thompson, S., Clone detection and removal for erlang/OTP within a refactoring environment (2009) ACM/SIGPLAN Workshop Partial Evaluation and Semantics-Based Program Manipulation, Proceedings of the 2009 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation, pp. 169-178; C. Liu, C. Chen, J. Han, P. Yu, GPLAG: Detection of software plagiarism by program dependence graph analysis, in: Proceedings of the 12th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, KDD 2006, 2006, pp. 872-881; Liu, H., Ma, Z., Zhang, L., Shao, W., Detecting duplications in sequence diagrams based on suffix trees (2006) Proceedings of the 13th Asia Pacific Software Engineering Conference, APSEC, pp. 269-276; S. Livieri, Y. Higo, M. Matsushita, K. Inoue, Very-large scale code clone analysis and visualization of open source programs using distributed CCFinder, in: Proceedings of 29th International Conference on Software Engineering, ICSE 2007, 2007, pp. 106-115; Li, Z., Lu, S., Myagmar, S., Zhou, Y., CP-Miner: Finding copy-paste and related bugs in large-scale software code (2006) IEEE Transactions on Software Engineering, 32 (3), pp. 176-192; Manber, U., Finding similar files in a large file system (1994) Proceedings of the Winter 1994 Usenix Technical Conference, pp. 1-10; A. Marcus, J. Maletic, Identification of high-level concept clones in source code, in: Proceedings of the 16th IEEE International Conference on Automated Software Engineering, ASE 2001, 2001, pp. 107-114; J. Mayrand, C. Leblanc, E. Merlo, Experiment on the automatic detection of function clones in a software system using metrics, in: Proceedings of the 12th International Conference on Software Maintenance, ICSM 1996, 1996, pp. 244-253; McCreight, E., A Space-economical suffix tree construction algorithm (1976) Journal of the ACM, 32 (2), pp. 262-272; E. Merlo, M. Dagenais, P. Bachand, J.S. Sormani, S. Gradara, G. Antoniol, Investigating large software system evolution: The linux kernel, in: Proceedings of the 26th International Computer Software and Applications Conference, COMPSAC 2002, 2002, pp. 421-426; E. Merlo, G. Antoniol, M. Penta, V. Rollo, Linear complexity object-oriented similarity for clone detection and software evolution analyses, in: Proceedings of the 20th International Conference Conference on Software Maintenance, ICSM 2004, 2004, pp. 412-416; L. Moonen, Generating robust parsers using island grammars, in: Proceedings of the 8th Working Conference on Reverse Engineering, WCRE 2001, 2001, pp. 13-22; Nasehi, S., Sotudeh, G., Gomrokchi, M., Source code enhancement using reduction of duplicated code Proceedings of the 25th conference on IASTED International Multi-Conference: Software Engineering, SE 2007, pp. 2007-2197,192. , IASTED; J. Patenaude, E. Merlo, M. Dagenais, B. Lague, Extending software quality assessment techniques to java systems, in: Proceedings of the 7th International Workshop on Program Comprehension, IWPC 1999, 1999, pp. 49-56; D. Rajapakse, S. Jarzabek, Using server pages to unify clones in web applications: A trade-off analysis, in: Proceedings of the 29th International Conference of Software Engineering, ICSE 2007, 2007, pp. 116-126; F. Ricca, P. Tonella, Using clustering to support the migration from static to dynamic web pages, in: Proceedings of the 11th International Workshop on Program Comprehension, IWPC 2003, 2003, pp. 207-216; Rieger, M., (2005) Effective clone detection without language barriers, , Ph.D. Thesis, University of Bern, Switzerland; C.K. Roy, J.R. Cordy, Near-Miss function clones in open source software: An empirical study, Journal of Software Maintenance and Evolution: Research and Practice (2009) 23 (special issue on WCRE'08) (submitted for publication); C.K. Roy, J.R. Cordy, A mutation / injection-based automatic framework for evaluating clone detection tools, in: Proceedings of the 4th International Workshop on Mutation Analysis, Mutation 2009, 2009, p. 10 (in press); C.K. Roy, J.R. Cordy, An empirical study of function clones in open source software systems, in: Proceedings of the 15th Working Conference on Reverse Engineering, WCRE 2008, 2008, pp. 81-90; C.K. Roy, J.R. Cordy, WCRE'08 Clones. Last Accessed November 2008. http://www.cs.queensu.ca/home/stl/download/NICADOutput/; Roy, C.K., Cordy, J.R., Towards a mutation-based automatic framework for evaluating clone detectiontools (2008) Proceedings of the Canadian Conference on Computer Science and Software Engineering, C3S2E, pp. 137-140; Roy, C.K., Cordy, J.R., A survey on software clone detection research, Queen's Technical Report (2007), 541, p. 115; C.K. Roy, J.R. Cordy, Scenario-based comparison of clone detection techniques, in: Proceedings of the 16th IEEE International Conference on Program Comprehension, ICPC 2008, 2008, pp. 153-162; C.K. Roy, J.R. Cordy, NICAD: Accurate detection of near-miss intentional clones using flexible pretty-printing and code normalization, in: Proceedings of the 16th IEEE International Conference on Program Comprehension, ICPC 2008, 2008, pp. 172-181; Rysselberghe, F., Demeyer, S., Evaluating clone detection techniques (2003) Proceedings of the International Workshop on Evolution of Large Scale Industrial Applications, ELISA, p. 12; F. Rysselberghe, S. Demeyer, Evaluating clone detection techniques from a refactoring perspective, in: Proceedings of the 9th IEEE International Conference Automated Software Engineering, ASE 2004, 2004, pp. 336-339; Tool Simian. Last, , http://www.redhillconsulting.com.au/products/simian, Accessed November 2008. URL; Tool SimScan. Last, , http://www.blue-edge.bg/simscan, Accessed November 2008. URL; T. Sager, A. Bernstein, M. Pinzger, C. Keifer, Detecting similar Java classes using tree algorithms, in: Proceedings of the 2006 International Workshop on Mining Software Repositories, MSR 2006, 2006, pp. 65-71; N. Synytskyy, J.R. Cordy, T.R. Dean, Resolution of static clones in dynamic web page, in: Proceedings of the 5th IEEE International Workshop on Web Site Evolution, WSE 2003, 2003, pp. 49-58; Tairas, R., Gray, J., Phoenix-based clone detection using suffix trees (2006) Proceedings of the 44th Annual Southeast Regional Conference, ACM-SE, pp. 679-684; Ueda, Y., Kamiya, T., Kusumoto, S., Inoue, K., On detection of gapped code clones using gap locations (2002) Proceedings 9th Asia-Pacific Software Engineering Conference, APSEC, pp. 327-336; V. Wahler, D. Seipel, J. Gudenberg, G. Fischer, Clone detection in source code by frequent itemset techniques, in: Proceedings of the 4th IEEE International Workshop Source Code Analysis and Manipulation, SCAM 2004, 2004, pp. 128-135; Wettel, R., Marinescu, R., Archeology of code duplication: Recovering duplication chains from small duplication fragments (2005) Proceedings of the 7th International Symposium on Symbolic and Numeric Algorithms for Scientific Computing, SYNASC, p. 8; Yamashina, T., Uwano, H., Fushida, K., Kamei, Y., Nagura, M., Kawaguchi, S., Iida, H., A real-time code clone detection tool for software maintenance (2008), SHINOBI:, Technical Report: NAIST-IS-TR2007011, Graduate School of Information Science, Nara Institute of Science and Technology; Yang, W., Identifying syntactic differences between two programs (1991) Software Practice and Experience, 21 (7), pp. 739-755},
correspondence_address1={Roy, C.K.; School of Computing, Queen's UniversityCanada; email: croy@cs.queensu.ca},
issn={01676423},
coden={SCPGD},
language={English},
abbrev_source_title={Sci Comput Program},
document_type={Article},
source={Scopus},
}

@ARTICLE{Mende2009143,
author={Mende, T. and Koschke, R. and Beckwermert, F.},
title={An evaluation of code similarity identification for the grow-and-prune model},
journal={Journal of Software Maintenance and Evolution},
year={2009},
volume={21},
number={2},
pages={143-169},
doi={10.1002/smr.402},
note={cited By 44},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-63849324240&doi=10.1002%2fsmr.402&partnerID=40&md5=343d252fbf1d0f9bafc73ffdcebc4020},
affiliation={University of Bremen, Fachbereich 3, Postfach 33 04 40, 28334 Bremen, Germany},
abstract={In case new functionality is required, which is similar to the existing one, developers often copy the code that implements the existing functionality and adjust the copy to the new requirements. The result of the copying is code growth. If developers face maintenance problems, because of the need to make changes multiple times for the original and all its copies, they may decide to merge the original and its copies again; that is, they prune the code. This approach was named the grow-and-prune model by Faust and Verhoef. This paper describes tool support for the grow-and-prune model in the evolution of software by identifying similar functions that may be merged. These functions are identified in two steps. First, token-based clone detection is used to detect pairs of functions sharing code. Second, Levenshtein distance (LD) measures the textual similarity among these functions. Sufficient similarity at function level is then lifted to the architectural level. The approach is evaluated by a case study for the Linux kernel. We give examples of instances of the grow-and-prune model for Linux. Then, we evaluate our technique quantitatively by measuring recall and precision with respect to an oracle. To obtain the oracle, we asked nine different developers to decide whether they believe certain functions are similar and should be merged. The evaluation shows that the recall and precision of our technique are about 75%. Calculating LD on token values rather than characters is superior. The two metrics strongly correlate but the tokenbased calculation reduces runtime by a factor of 4.6. Clone detection is an effective filter to reduce the number of calculations of the relatively expensive LD. Copyright © 2009 John Wiley & Sons, Ltd.},
author_keywords={Clones;  Code similarity;  Software maintenance;  Software reusability},
keywords={Architectural levels;  Clone detections;  Clones;  Code growths;  Code similarity;  Levenshtein distances;  Linux kernels;  Maintenance problems;  Recall and precision;  Run-time;  Software maintenance;  Software reusability;  Token-based clone detections;  Tool supports, Cloning;  Computer software maintenance;  Computer software selection and evaluation;  Function evaluation;  Ladder networks;  Mergers and acquisitions;  Reusability, Computer software reusability},
references={Faust, D., Verhoef, C., Software product line migration and deployment (2003) Journal of Software Practice and Experiences, 33 (10), pp. 933-955; Kapser, C., Godfrey, M.W., Clones considered harmful considered harmful (2006) Working Conference on Reverse Engineering, pp. 19-28. , IEEE Press: New York; Kim, M., Bergman, L., Lau, T., Nolkin, D., An ethnographic study of copy and paste programming practices in OOPL (2004) International Symposium on Empirical Software Engineering, pp. 83-92. , IEEE Press: New York; Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) IEEE Transactions on Software Engineering, 33, pp. 577-591; Mende, T., Beckwermert, F., Koschke, R., Meier, G., Supporting the grow-and-prune model in software product lines evolution using clone detection (2008) European Conference on Software Maintenance and Reengineering, pp. 163-172. , IEEE Press: New York; Levenshtein, V.I., Binary codes capable of correcting deletions, insertions, and reversals Technical Report 8, Soviet Physics Doklady, 1966; Baker, B.S., On finding duplication and near-duplication in large software systems (1995) Working Conference on Reverse Engineering, pp. 86-95. , IEEE Press: New York; Koschke, R., Falke, R., Frenzel, P., Clone detection using abstract syntax suffix trees (2006) Working Conference on Reverse Engineering, pp. 253-262; Falke, R., Koschke, R., Frenzel, P., Empirical evaluation of clone detection using syntax suffix trees (2008) Empirical Software Engineering, 13 (6), pp. 601-643; Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., Clone detection using (1998) International Conference on Software Maintenance, pp. 368-378. , abstract syntax trees, IEEE Press: New York; Antoniol, G., Villano, U., Merlo, E., Penta, M., Analyzing cloning evolution in the linux kernel (2002) Information and Software Technology, 44 (13), pp. 755-765; Jiang, L., Su, Z., Chiu, E., Context-based detection of clone-related bugs (2007) Joint Meeting of the European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE), pp. 55-64. , ACM Press: New York; Jiang, Z., Hassan, A., A framework for studying clones in large software systems (2007) Workshop Source Code Analysis and Manipulation, , IEEE Press: New York; Jiang, L., Misherghi, G., Su, Z., Glondu, S., Deckard: Scalable sand accurate tree-based detection of code clones (2007) International Conference on Software Engineering, pp. 96-105. , ACM Press: New York; Casazza, G., Antoniol, G., Villano, U., Merlo, E., Penta, M.D., Identifying clones in the linux kernel (2001) Workshop Source Code Analysis and Manipulation, pp. 90-97. , IEEE Press: New York; Godfrey, M., Tu, Q., Growth, evolution and structural change in open source software (2001) Workshop on Principles of Software Evolution, pp. 103-106. , ACM Press: New York; Merlo E, Dagenais M, Bachand P, Sormani J, Gradara S, Antoniol G. Investigating large software system evolution: The linux kernel. International Computer Software and Applications Conference. IEEE Press: New York, 2002; 421-426; Kapser C, Godfrey MW. Toward a taxonomy of clones in source code: A case study. Proceedings of the Conference on Evolution of Large Scale Industrial Software Architectures (ELISA '03), September 2003; 67-78. Available at: ftp://ftp.umh.ac.be/pub/ftp-infofs/2003/ELISAproceedings.pdf [26 January 2009]; Li, Z., Lu, S., Myagmar, S., Zhou, Y., Copy-paste and related bugs in large-scale software code (2006) IEEE Transactions on Software Engineering, 32 (3), pp. 176-192; Bortz, J., Lienert, G., Boehnke, K., (2000) Verteilungsfreie Methoden in der Biostatistik, , Springer: Berlin; McGraw, K.O., Wong, S.P., Forming inferences about some intraclass correlation coefficients (1996) Psychological Methods, 1 (1), pp. 30-46; Tan, P.N., Steinbach, M., Kumar, V., (2005) Introduction to Data Mining, , 1st edn, Addison-Wesley: Reading MA; R Development Core Team. R: A Language and Environment for Statistical Computing, R Foundation for Statistical Computing, Vienna, Austria 2008. Available at: URL http://www.R-project.org, ISBN 3-900051-07-0 |26 January 2009]; http://cran.r-project.org/web/packages/irr, Gamer M, Lemon J, Fellows I. irr: Various coefficients of interrater reliability and agreement. R Package Version 0.70, 2007. Available at: URL:, 26 January 2009; Riva, C., Del Rosso, C., Experiences with software product family evolution (2003) Workshop on Principles of Software Evolution, pp. 161-169. , IEEE Press: New York; Clements, P., Northrop, L.M., (2001) Software Product Lines: Practices and Patterns, , Professional Addison-Wesley: Reading MA; Bayer, J., Flege, O., Knauber, P., Laqua, R., Muthig, D., Schmid, K., Widen, T., DeBaud, J.M., PuLSE: A methodology to develop software product lines (1999) Proceedings of the 1999 Symposium on Software Reusability, pp. 122-131. , ACM Press: New York; Bayer, J., Girard, J.F., Würthner, M., DeBaud, J.M., Apel, M., Transitioning legacy assets to a product line architecture (1999) Proceedings of the 7th European Software Engineering Conference Held Jointly with the 7th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 446-463. , Springer: Berlin; Kolb, R., Muthig, D., Patzke, T., Yamauchi, K., Refactoring a legacy component for reuse in a software product line: A case study (2006) Journal of Software Maintenance and Evolution: Research and Practice, 18 (2), pp. 109-132; Kolb, R., Muthig, D., Patzke, T., Yamauchi, K., A case study in refactoring a legacy component for reuse in a product line (2005) International Conference on Software Maintenance, pp. 369-378. , IEEE Press: New York; Yoshimura, K., Ganesan, D., Muthig, D., Defining a strategy to introduce a software product line using existing embedded systems (2006) EMSOFT '06: Proceedings of the 6th ACM & IEEE International Conference on Embedded Software, pp. 63-72. , ACM Press: New York NY, U.S.A; Baxter ID, Churchett D. Using clone detection to manage a product line. ICSR7 Workshop, Industrial Experience with Product Line Approaches, 2002. Position Paper; Frenzel, P., Koschke, R., Breu, A., Angstmann, K., Extending the reflection method for consolidating software variants into product lines (2007) Working Conference on Reverse Engineering, , IEEE Press: New York; Riva, C., (2004) View-based software architecture reconstruction, , PhD Dissertation, Vienna University of Technology, Vienna, Austtia, October; Johnson, J.H., Substring matching for clone detection and change tracking (1994) International Conference on Software Maintenance, pp. 120-126. , IEEE Press: New York; Ducasse, S., Rieger, M., Demeyer, S., A language independent approach for detecting duplicated code (1999) International Conference on Software Maintenance, pp. 109-118. , IEEE Press: New York; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multi-linguistic token-based code clone detection system for large scale source code (2002) IEEE Transactions on Software Engineering, 28 (7), pp. 654-670; Mayrand, J., Leblanc, C., Merlo, E., Experiment on the automatic detection of function clones in a software system using metrics (1996) International Conference on Software Maintenance, pp. 244-253. , IEEE Press: New York; Komondoor, R., Horwitz, S., Using slicing to identify duplication in source code (2001) International Symposium on Static Analysis, pp. 40-56. , Springer: Berlin; Krinke, J., Identifying similar code with program dependence graphs (2001) Working Conference on Reverse Engineering, pp. 301-309. , IEEE Press: New York; Balazinska, M., Merlo, E., Dagenais, M., Lague, B., Kontogiannis, K., Advanced clone-analysis to support object-oriented system refactoring (2000) Working Conference on Reverse Engineering, pp. 98-107. , IEEE Press: New York; Di Lucca G, Di Penta M, Fasolino A. An approach to identify duplicated web pages. International Computer Software and Applications Conference. IEEE Press: New York, 2002; 481-486; Duala-Ekoko, E., Robillard, M., Tracking code clones in evolving software (2007) International Conference on Software Engineering, pp. 158-167. , IEEE Press: New York; Kapser, C.J., Godfrey, M.W., Supporting the analysis of clones in software systems: A case study (2006) Journal of Software Maintenance and Evolution: Research and Practice, 18 (2), pp. 61-82; Koschke R. Survey of research on software clones. Duplication, Redundancy, and Similarity in Software, Koschke R, Merlo E, Walenstein A (eds.), Dagstuhl Seminar Proceedings, 06301, 2007. Availabe at: http://drops.dagstuhl.de/ opus/volltexte/2007/970 [date of citation: 27 June 2008]; Koschke, R., Software evolution (2008) Identifying and Removing Software Clones, pp. 15-39. , Demeyer S, Mens T eds, Springer: Berlin; Koschke, R., Frontiers in software clone management (2008) International Conference on Software Maintenance, , IEEE Press: New York; Roy, C.K., Cordy, J.R., A survey on software clone detection research (2007), Technical Report No. 2007-541, School of Computing, Queen's University at Kingston, Ont, Canada; Karhinen, A., Sandrini, M., Tuominen, J., An approach to manage variance in legacy systems (1999) European Conference on Software Maintenance and Reengineering, pp. 190-193. , IEEE Press: New York; Yamamoto, T., Matsushita, M., Kamiya, T., Inoue, K., Measuring similarity of large software systems based on source code correspondence (2005) PROFES, pp. 530-544. , Springer: Berlin; Fanta, R., Rajlich, V., Removing clones from the code (1999) Journal of Software Maintenance and Evolution: Research and Practice, 11 (4), pp. 223-243; Komondoor, R., Horwitz, S., Eliminating duplication in source code via procedure extraction (2002), Technical Report 1461, UW-Madison Department of Computer Sciences, December; Balazinska, M., Merlo, E., Dagenais, M., Lague, B., Kontogiannis, K., Partial redesign of java software systems based on clone analysis (1999) Working Conference on Reverse Engineering, pp. 326-336. , IEEE Press: New York; Jarzabek, S., Li, S., Unifying clones with a generative programming technique: A case study (2006) Journal of Software Maintenance and Evolution: Research and Practice, 18 (4), pp. 267-292; Xing, Z., Stroulia, E., Understanding phases and styles of object-oriented systems' evolution (2004) International Conference on Software Maintenance, pp. 242-251. , IEEE Press: New York; Zou, L., Godfrey, M., Detecting mergin g and splitting using origin analysis (2003) Working Conference on Reverse Engineering, pp. 146-154. , IEEE Press: New York},
correspondence_address1={Koschke, R.; University of Bremen, Fachbereich 3, Postfach 33 04 40, 28334 Bremen, Germany; email: koschke@informatik.uni-bremen.de},
issn={1532060X},
coden={JSMEC},
language={English},
abbrev_source_title={J. Software Maint. Evol.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Koschke2009331,
author={Koschke, R. and Frenzel, P. and Breu, A.P.J. and Angstmann, K.},
title={Extending the reflexion method for consolidating software variants into product lines},
journal={Software Quality Journal},
year={2009},
volume={17},
number={4},
pages={331-366},
doi={10.1007/s11219-009-9077-8},
note={cited By 48},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-70349499350&doi=10.1007%2fs11219-009-9077-8&partnerID=40&md5=92a902f31b38473721d6abf6366ca688},
affiliation={University of Bremen, Bremen, Germany; Robert Bosch GmbH, Stuttgart, Germany},
abstract={Software variants emerge from ad-hoc copying in-the-large with adaptations to a specific context. As the number of variants increases, maintaining such software variants becomes more and more difficult and expensive. In contrast to such ad-hoc reuse, software product lines offer organized ways of reuse, taking advantage of similarities of different products. To re-gain control, software variants may be consolidated as organized software product lines. In this paper, we describe a method and supporting tools to compare software variants at the architectural level extending the reflexion method to software variants. Murphy's reflexion method allows one to reconstruct the module view, a static architectural view describing the static components, their interfaces and dependencies and their grouping as layers and subsystems. The method consists of the specification of the module view and the mapping of implementation components onto the module view. An automatic analysis determines differences between the module view and its implementation. We extend the reflexion method from single systems to software variants. Because software variants share a very large amount of code, we can expect components of one variant to re-occur in the other variant either identically or at least similarly. We use similarity metrics to determine this type of correspondence among implementation components between two variants. Because the similarity metrics are expensive to compute, we use clone detection techniques to reduce the number of candidate pairs of implementation components for which the similarity is computed. The correspondence is then used to transfer as much as possible of the mapping for the analyzed variants to the next variant to be analyzed. Furthermore, we describe how to unify the individual product architectures into a software product line architecture. © 2009 Springer Science+Business Media, LLC.},
author_keywords={Architecture reconstruction;  Reverse engineering;  Software product lines;  Software variants},
keywords={Reverse engineering, Architectural levels;  Architectural views;  Architecture reconstruction;  Clone detection techniques;  Product architecture;  Software Product Line;  Software product line architecture;  Software variants, Computer software},
references={Abreu, F., Pereira, G., & Sousa, P. (2000). A coupling-guided cluster analysis approach to reengineer the modularity of object-oriented systems. In European conference on software maintenance and reengineering. IEEE Computer Society Press; Anquetil, N., & Lethbridge, T. (1998). Extracting concepts from file names: a new file clustering criterion. In International conference on software engineering (pp. 84-93). ACM Press; Baker, B. S. (1995). On finding duplication and near-duplication in large software systems. In L. Wills, P. Newcomb, & E. Chikofsky (Eds.), Second working conference on reverse engineering (pp. 86-95). Los Alamitos, CA: IEEE Computer Society Press; Balazinska, E., Merlo, M., Dagenais, B., Lague, M., & Kontogiannis, K. (2000). Advanced clone-analysis to support object-oriented system refactoring. In Working conference on reverse engineering (pp. 98-107). IEEE Computer Society Press; http://doi.acm.org/10.1145/303008.303063, Bayer, J., Flege, O., Knauber, P., Laqua, R., Muthig, D., Schmid, K., Widen, T., & DeBaud, J. M. (1999a). Pulse: Amethodology to develop software product lines. In Proceedings of the 1999 symposium on software reusability (pp 122-131). ACM Press; http://doi.acm.org/10.1145/318773.319262, Bayer, J., Girard, J. F., Würthner, M., DeBaud, J. M., & Apel, M. (1999b). Transitioning legacy assets to a product line architecture. In Proceedings of the 7th European software engineering conference held jointly with the 7th ACM SIGSOFT international symposium on foundations of software engineering (pp. 446-463). Springer; Belady, L.A., Evangelisti, C.J., System partitioning and its measure (1982) Journal of Systems and Software, 2 (1), pp. 23-29; Bergey, J., O'Brien, L., & Smith, D. (2002). Using options analysis for reengineering (OAR) for mining components for a product line. In Proceedings of second software product line conference. Lecture Notes in Computer Science (Vol. 2379, pp. 316-327). Springer; Bojic, D., & Velasevic, D. (2000). A use-case driven method of architecture recovery for program understanding and reuse reengineering. In European conference on software maintenance and reengineering. IEEE Computer Society Press; Canfora, G., Cimitile, A., Lucia, A. D., & Lucca, G. A. D. (1999). A case study of applying an eclectic approach to identify objects in code. In International workshop on program comprehension (pp. 136-143). IEEE Computer Society Press; Canfora, G., Cimitile, A., Munro, M., An improved algorithm for identifying objects in code (1996) Journal of Software Practice and Experience, 26 (1), pp. 25-48; Canfora, G., Cimitile, A., Munro, M., & Taylor, C. J. (1993). Extracting abstract data types from C programs: A case study. In International conference on software maintenance (pp. 200-209). IEEE Computer Society Press; Choi, S., Scacchi, W., Extracting and restructuring the design of large systems (1990) IEEE Software, 7 (1), pp. 66-71; Christl, A., Koschke, R., & Storey, M. A. (2005). Equipping the reflexion method with automated clustering. In Working conference on reverse engineering (pp. 89-98). IEEE Computer Society Press; Christl, A., Koschke, R., Storey, M.A., Automated clustering to support the reflexion method (2007) Journal Information and Software Technology, 49, pp. 255-274; Cimitile, A., Visaggio, G., Software salvaging and the call dominance tree (1995) Journal of Systems and Software, 28, pp. 117-127; Clements, P., Bachmann, F., Bass, L., Garlan, D., Ivers, J., Little, R., Nord, R., Stafford, J., (2002) Documenting Software Architecture, , Boston: Addison-Wesley; Clements, P., Kazman, R., & Klein, M. (2001). Evaluating software architectures: Methods and case studies. SEI series in software engineering series, Addison-Wesley, Professional; Clements, P., & Northrop, L. M. (2001). Software product lines: Practices and patterns. Addison-Wesley, Professional; de Oca, C. M., & Carver, D. L. (1998). A visual representation model for software subsystem decomposition. In Working conference on reverse engineering. IEEE Computer Society Press; Eisenbarth, T., Koschke, R., & Simon, D. (2003). Locating features in source code. IEEE Computer Society Transactions on Software Engineering, 29(3); Faust. D., & Verhoef, C. (2003). Software product line migration and deployment. Journal of Software Practice and Experiences, 33(10), 933-955. doi:10.1002/spe.530; Feijs, L., Krikhaar, R., van Ommering, R., A relational approach to support software architecture analysis (1998) Journal of Software Practice and Experiences, 28 (4), pp. 371-400; Frenzel, P., Koschke, R., Breu, A. P. J., & Angstmann, K. (2007). Extending the reflection method for consolidating software variants into product lines. In Working conference on reverse engineering (pp. 160-169). IEEE Computer Society Press; Gall, H., & Klösch, R. (1995). Finding objects in procedural programs: An alternative approach. In Working conference on reverse engineering (pp. 208-217). IEEE Computer Society Press; Garey, M. R., Johnson, D. S., & Stockmeyer, L. (1974). Some simplified np-complete problems. In Proceedings of the sixth annual ACM symposium on theory of computing (pp. 47-63); Girard, J. F., & Koschke, R. (1997). Finding components in a hierarchy of modules: A step towards architectural understanding. In International conference on software maintenance. IEEE Computer Society Press; Girard, J. F., Koschke, R., & Schied, G. (1997). A metric-based approach to detect abstract data types and state encapsulations. In International conference on automated software engineering. IEEE Computer Society Press; Girard, J. F., Koschke, R., & Schied, G. (1999). A metric-based approach to detect abstract data types and state encapsulations. Journal of Automated Software Engineering, 6(4); Gomaa, H. (2005). Designing software product lines with UML-from use cases to pattern-based software architectures. Addison-Wesley; Graudejus, H., (1998) Implementing a Concept Analysis Tool for Identifying Abstract Data Types in C Code, , Diplomarbeit, University of Kaiserslautern: Germany; Guo, G. Y., Atlee, J. M., & Kazman, R. (1999). A software architecture reconstruction method. In WICSA1: Proceedings of the TC2 first working IFIP conference on software architecture (WICSA1) (pp. 15-34). Deventer: Kluwer, B.V; Hofmeister, C., Nord, R., & Soni, D. (2000). Applied software architecture. Object Technology Series. Addison Wesley; Holt, R. C. (1998). Structural manipulation of software architecture using tarski relational algebra. In M. Blaha & C. Verhoef (Eds.). Working conference on reverse engineering (pp. 210-219). IEEE Computer Society Press; Hutchens, D.H., Basili, V.R., System structure analysis: Clustering with data bindings (1985) IEEE Computer Society Transactions on Software Engineering, 11 (8), pp. 749-757; Kazman, R., Abowd, G., Bass, L., Clements, P. (1996). Scenario-based analysis of software architecture (pp. 47-55). IEEE Software; Kolb, R., Muthig, D., Patzke, T., & Yamauchi, K. (2005). A case study in refactoring a legacy component for reuse in a product line. In International conference on software maintenance (pp. 369-378). IEEE Computer Society Press. doi:10.1002/smr.329; Kolb, R., Muthig, D., Patzke, T., Yamauchi, K., Refactoring a legacy component for reuse in a software product line: A case study (2006) Journal of Software Maintenance and Evolution: Research and Practice, 16 (2), pp. 109-132. , doi:10.1002/smr.329; http://www.iste.uni-stuttgart.de/ps/rainer/thesis, Koschke, R. (1999). Atomic architectural component recovery for program understanding and evolution. Ph.D. thesis, University of Stuttgart; Koschke, R. (2005). Rekonstruktion von Software-Architekturen: Blickwinkel, Sichten, Ansichten und Aussichten. Informatik-Forschung und Entwicklung. Springer 19(3); http://drops.dagstuhl.de/opus/volltexte/2007/962, Koschke, R. (2007). Survey of research on software clones. In R. Koschke, E. Merlo, & A. Walenstein (Eds.), Duplication, redundancy, and similarity in software, Internationales Begegnungsund Forschungszentrum fuer Informatik (IBFI), Schloss Dagstuhl, Germany, no. 06301 in Dagstuhl Seminar Proceedings, [date of citation: 2008-06-02]; Koschke, R. (2008a). Frontiers in software clone management. In Frontiers in software maintenance, proceedings of the international conference on software maintenance. IEEE Computer Society Press; Koschke, R. (2008b). Identifying and removing software clones. In S. Demeyer & T. Mens (Eds.), Sofware evolution (pp. 15-39). Springer; Koschke, R. (2008c). Architecture reconstruction. In International summer school on software engineering. Springer; Koschke, R., & Simon, D. (2003). Hierarchical reflexion models. In Working conference on reverse engineering (pp. 36-45). IEEE Computer Society Press; Kruchten, P., The 4 + 1 view model of architecture (1995) IEEE Software, 12 (6), pp. 42-50; Lindig, C., & Snelting, G. (1997). Assessing modular structure of legacy code based on mathematical concept analysis. In International conference on software engineering (pp. 349-359). IEEE Computer Society Press; Liu, S. S., & Wilde, N. (1990). Identifying objects in a conventional procedural language: An example of data design recovery. In International conference on software maintenance (pp. 266-271). IEEE Computer Society Press; Livadas, P., Johnson, T., A new approach to finding objects in programs (1994) Journal of Software Maintenance and Evolution: Research and Practice, 6, pp. 249-260; Maccari, A., & Riva, C. (2001). Architectural evolution of legacy product families. In Proceedings of the fourth international workshop on product family engineering (PFE-4) (pp. 63-68); Mahdavi, K., Harman, M., & Hierons, R. M. (2003). A multiple hill climbing approach to software module clustering. In International conference on software maintenance (pp. 315-324). IEEE Computer Society Press; Mancoridis, S., Mitchell, B. S., Chen, Y. F., & Gansner, E. R. (1999). Bunch: A clustering tool for the recovery and maintenance of software system structures. In International conference on software maintenance (pp. 50-59); Mancoridis, S., Mitchell, B., Rorres, C., Chen, Y., & Gansner, E. (1998). Using automatic clustering to produce high-level system organizations of source code. In International workshop on program comprehension. IEEE Computer Society Press; Maqbool, O., & Babri, H. A. (2004). The weighted combined algorithm: A linkage algorithm for software clustering. In European conference on software maintenance and reengineering (pp. 15-24). IEEE Computer Society Press; Mende, T., Beckwermert, F., Koschke, R., & Meier, G. (2008). Supporting the grow-and-prune model in software product lines evolution using clone detection. In European conference on software maintenance and eeengineering. IEEE Computer Society Press; Mende, T., Koschke, R., & Beckwermert, F. (2009). An evaluation of code similarity identification for the grow-and-prune model. Journal of Software Maintenance and Evolution: Research and Practice. doi:10.1002/smr.402; Mens, K. (2000). Automating architectural conformance checking by means of logic meta programming. Ph.D. thesis, Departement Informatica, Vrije Universiteit Brussel; Müller, H. A., & Klashinsky, K. (1985). Rigi-a system for programming-in-the-large. In International conference on software engineering (pp. 80-86). ACM Press; Müller, H. A., Tilley, S. R., Orgun, M. A., Corrie, B. D., & Madhavji, N. H. (1992). A reverse engineering environment based on spatial and visual software interconnection models. In Proceedings of the fifth ACM SIGSOFT symposium on software development environments (pp. 88-98). ACM Press; Murphy, G. C., & Notkin, D. (1997). Reengineering with reflexion models: A case study. IEEE Computer, 30(8), 29-36. (Reprinted in Nikkei Computer, January 19, 1998, pp. 161-169); Murphy, G.C., Notkin, D., Sullivan, K.J., Software reflexion models: Bridging the gap between design and implementation (2001) IEEE Computer Society Transactions on Software Engineering, 27 (4), pp. 364-380; Murphy, G. C., Notkin, D., & Sullivan, K. J. (2001b). Software reflexion models: Bridging the gap between design and implementation. IEEE Computer Society Transactions on Software Engineering, 27(4); Ogando, R.M., Yau, S.S., Wilde, N., An object finder for program structure understanding in software maintenance (1994) Journal of Software Maintenance and Evolution: Research and Practice, 6 (5), pp. 261-283; Patel, S., Chu, W., & Baxter, R. (1992). A measure for composite module cohesion. In International conference on software engineering (pp. 38-48). ACM Press; Pollet, D., Ducasse, S., Poyet, L., Alloui, I., Cîmpan, S., & Verjus, H. (2007). Towards a process-oriented software architecture reconstruction taxonomy. In European conference on software maintenance and reengineering (pp. 137-148). IEEE Computer Society Press; Postma, A., A method for module architecture verification and its application on a large component-based system (2003) Information and Software Technology, 45, pp. 171-194; Riva, C. (2002). Architecture reconstruction in practice. In IEEE/IFIP working conference on software architecture. IEEE Computer Society Press; Riva, C. (2004). View-based software architecture reconstruction. Ph.D. dissertation, Vienna University of Technology, Vienna, Austria; Roy, C., & Cordy, J. (2007). A survey on software clone detection research. Technical Report 541, Queen's University; Saeed, M., Maqbool, O., Babri, H., Hassan, S., & Sarwar, S. (2003). Software clustering techniques and the use of combined algorithm. In European conference on software maintenance and reengineering (pp. 301-310). IEEE Computer Society Press; Sahraoui, H., Melo, W., Lounis, H., & Dumont, F. (1997). Applying concept formation methods to object identfication in procedural code. In International conference on automated software engineering (pp. 210-218). IEEE Computer Society Press; Sartipi, K. (2001). Alborz: A query-based tool for software architecture recovery. In International workshop on program comprehension (pp. 115-117). IEEE Computer Society Press; Sartipi, K., & Kontogiannis, K. (2001). A graph pattern matching approach to software architecture recovery. In International conference on software maintenance (pp. 408-417). IEEE Computer Society Press; Sartipi, K., & Kontogiannis, K. (2003). On modeling software architecture recovery as graph matching. In International conference on software maintenance (pp. 224-234). IEEE Computer Society Press; Sartipi, K., Kontogiannis, K., & Mavaddat, F. (2000a). Architectural design recovery using data mining techniques. In European conference on software maintenance and reengineering. IEEE Computer Society Press; Sartipi, K., Kontogiannis, K., & Mavaddat, F. (2000b). A pattern matching framework for software architecture recovery and restructuring. In International workshop on program comprehension. IEEE Computer Society Press; Schwanke, R. W. (1992). An intelligent tool for re-engineering software modularity. In International conference on software engineering. ACM Press; Schwanke, R. W., & Hanson, S. J. (1994). Using neural networks to modularize software. Machine Learning, 15, 136-168; Shokoufandeh, A., Mancoridis, S., & Maycock, M. (2002). Applying spectral methods to software clustering. In Working conference on reverse engineering (pp. 3-12). IEEE Computer Society Press; Siff, M., & Reps, T. (1997). Identifying modules via concept analysis. In International conference on software maintenance (pp. 170-179). IEEE Computer Society Press; Siff, M., Reps, T., Identifying modules via concept analysis (1999) IEEE Computer Society Transactions on Software Engineering, 25 (6), pp. 749-768; Stoermer, C., & O'Brien, L. (2001). MAP-mining architectures for product line evaluations. In IEEE/IFIP working conference on software architecture (pp. 35-44). IEEE Computer Society Press; Tonella, P., Concept analysis for module restructuring (2001) IEEE Computer Society Transactions on Software Engineering, 27 (4), pp. 351-363; Tzerpos, V. (1997). The orphan adoption problem in architecture maintenance. In Working conference on reverse engineering. IEEE Computer Society Press; Valasareddi, R. R., & Carver, D. L. (1998). A graph-based object identification process for procedural programs. In Working conference on reverse engineering (pp. 50-58). IEEE Computer Society Press; van der Linden, F., Software product families in europe. the Esaps and Cafe project (2002) IEEE Software, 19 (4), pp. 41-49; van Deursen, A., & Kuipers, T. (1999). Identifying objects using cluster and concept analysis. In International conference on software engineering (pp. 246-255). IEEE Computer Society Press; Weidl, J., & Gall, H. (1998). Binding object models to source code: An approach to object-oriented re-architecturing. In Proceedings of the of the 22nd computer software and applications conference. IEEE Computer Society Press; Wiggert, T. A. (1998). Using clustering algorithms in legacy systems remodularization. In Working conference on reverse engineering (pp. 33-43). IEEE Computer Society Press; Xing, Z., & Stroulia, E. (2004). Understanding phases and styles of object-oriented systems' evolution. In International conference on software maintenance(pp. 242-251). IEEE Computer Society Press; Yeh, A. S., Harris, D. R., & Reubenstein, H. B. (1995). Recovering abstract data types and object instances from a conventional procedural language. In Working conference on reverse engineering (pp. 227-236). IEEE Computer Society Press; Zou, L., & Godfrey, M. (2003). Detecting merging and splitting using origin analysis. In Working conference on reverse engineering (pp 146-154). IEEE Computer Society Press},
correspondence_address1={Koschke, R.; University of Bremen, Bremen, Germany; email: koschke@informatik.uni-bremen.de},
publisher={Kluwer Academic Publishers},
issn={09639314},
language={English},
abbrev_source_title={Softw. Qual. J.},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Koschke2008119,
author={Koschke, R.},
title={Frontiers of software clone management},
journal={Proceedings of the 2008 Frontiers of Software Maintenance, FoSM 2008},
year={2008},
pages={119-128},
doi={10.1109/FOSM.2008.4659255},
art_number={4659255},
note={cited By 35; Conference of 16th Frontiers of Software Maintenance, FoSM 2008 ; Conference Date: 30 September 2008 Through 2 October 2008;  Conference Code:74518},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-57849145257&doi=10.1109%2fFOSM.2008.4659255&partnerID=40&md5=d1a70355109dcf97788c7f47b3b46760},
affiliation={University of Bremen, Germany},
abstract={Ad-hoc reuse through copy-and-paste occurs frequently in practice affecting the evolvability of software. This paper summarizes the state of the art in software clone management (detection, tracking, presentation, assessing, removal, changing) and the empirical knowledge we have gained so far. In the course of the summary, the paper identifies further research potential. © 2008 IEEE.},
keywords={Cloning;  Computer software reusability;  Copying;  Maintenance, Clone managements;  Empirical knowledges;  Evolvability;  Research potentials;  State of the arts, Computer software maintenance},
references={Al-Ekram, R., Kapser, C., Holt, R., Godfrey, M., Cloning by accident: An empirical study of source code cloning across software systems (2005) International Symposium on Empirical Software Engineering; G. Antoniol, G. Casazza, M. D. Penta, and E. Merlo. Modeling clones evolution through time series. In International Conference on Software Maintenance, pages 273-280. IEEE CS Press, 2001; Antoniol, G., Villano, U., Merlo, E., Penta, M., Analyzing cloning evolution in the linux kernel (2002) Information and Software Technology, 44 (13), pp. 755-765; Aversano, L., Cerulo, L., Penta, M.D., How clones are maintained: An empirical study (2007) European Conference on Software Maintenance and Reengineering, , IEEE CS Press; Bailey, J., Burd, E., Evaluating clone detection tools for use during preventative maintenance (2002) Workshop Source Code Analysis and Manipulation, pp. 36-43. , IEEE CS Press; Baker, B., Parameterized duplication in strings: Algorithms and an application to software maintenance (1997) SIAM Journal on Computing, 26 (5), pp. 1343-1362. , Oct; Baker, B.S., On finding duplication and near-duplication in large software systems (1995) Second Working Conference on Reverse Engineering, pp. 86-95. , L. Wills, P. Newcomb, and E. Chikofsky, editors, Los Alamitos, California, July, IEEE CS Press; Baker, B.S., Parameterized Pattern Matching: Algorithms and Applications (1996) Journal Computer System Science, 52 (1), pp. 28-42. , Feb; Bakota, T., Ferenc, R., Gyimothy, T., Clone smells in software evolution (2007) International Conference on Software Maintenance, pp. 24-33. , IEEE CS Press, Oct; Balazinska, M., Merlo, E., Dagenais, M., Lague, B., Kontogiannis, K., Measuring clone based reengineering opportunities (1999) IEEE Symposium on Software Metrics, pp. 292-303. , IEEE CS Press, Nov; Balazinska, M., Merlo, E., Dagenais, M., Lague, B., Kontogiannis, K., Partial redesign of java software systems based on clone analysis (1999) Working Conference on Reverse Engineering, pp. 326-336. , IEEE CS Press; Balazinska, M., Merlo, E., Dagenais, M., Lague, B., Kontogiannis, K., Advanced clone-analysis to support object-oriented system refactoring (2000) Working Conference on Reverse Engineering, pp. 98-107. , IEEE CS Press, Oct; Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., Clone Detection Using (1998) International Conference on Software Maintenance, pp. 368-378. , Abstract Syntax Trees, T. M. Koshgoftaar and K. Bennett, editors, IEEE Computer Society Press; Bellon, S., (2002) Vergleich von Techniken zur Erkennung duplizierten Quellcodes, , Diploma thesis, no. 1998, University of Stuttgart Germany, Institute for Software Technology, Sept; Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) IEEE Transactions on Software Engineering, pp. 577-591. , Sept; Bruntink, M., van Deursen, A., Tourwe, T., van Engelen, R., An evaluation of clone detection techniques for cross-cutting concerns (2004) International Conference on Software Maintenance, pp. 200-209; Bruntink, M., van Engelen, R., Tourwe, T., On the use of clone detection for identifying crosscutting concern code (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 804-818; Chou, A., Yang, J., Chelf, B., Hallem, S., Engler, D.R., An empirical study of operating system errors (2001) Symposium on Operating Systems Principles, pp. 73-88; Church, K.W., Helfman, J.I., Dotplot: A program for exploring self-similarity in millions of lines for text and code (1993) Journal of American Statistical Association, Institute for Mathematical Statistics and Interface Foundations of North America, 2 (2), pp. 153-174. , June; Cooper, K., McIntosh, N., Enhanced code compression for embedded risc processors (1999) Proc. ACM Conf. on Programming Language Design and Implementation, pp. 139-149. , ACM Press, May; Cordy, J., Comprehending reality: Practical challenges to software maintenance automation (2003) International Workshop on Program Comprehension, pp. 196-206. , IEEE CS Press; Cordy, J.R., Dean, T.R., Synytskyy, N., Practical language-independent detection of near-miss clones (2004) Conference of the Centre for Advanced Studies on Collaborative research, pp. 1-12. , IBM Press; Deissenboeck, F., Hummel, B., Juergens, E., Schaetz, B., Wagner, S., Teuchert, S., Girard, J.-F., Clone detection in automotive model-based development (2008) International Conference on Software Engineering, , ACM Press; G. Di Lucca, M. Di Penta, and A. Fasolino. An approach to identify duplicated web pages. In International Computer Software and Applications Conference, pages 481-486, 2002; Ducasse, S., Rieger, M., Demeyer, S., A Language Independent Approach for Detecting Duplicated Code (1999) International Conference on Software Maintenance, pp. 109-118; Falke, R., Koschke, R., Frenzel, P., Empirical evaluation of clone detection using syntax suffix trees (2008) Empirical Software Engineering, , accepted for publication; Fanta, R., Rajlich, V., Removing clones from the code (1999) Journal on Software Maintenance and Evolution, 11 (4), pp. 223-243. , July/Aug; Ferrante, J., Ottenstein, K., Warren, J., The program dependence graph and its use in optimization (1987) ACM Trans. on Prog. Lang. and Sys, 9 (3). , 319-349, July; Flammia, G., On the internet, software should be milked, not brewed (1996) IEEE Expert, 11 (6), pp. 87-88. , Dec; Frederick, J., Brooks, P., No silver bullet: Essence and accidents of software engineering (1987) Computer, 20 (4), pp. 10-19. , Apr; Frenzel, P., Koschke, R., Breu, A.P.J., Angstmann, K., Extending the reflection method for consolidating software variants into product lines (2007) Working Conference on Reverse Engineering, pp. 160-169. , IEEE CS Press, Oct; Giesecke, S., Clone-based Reengineering für Java auf der Eclipse-Plattform (2003) Diplomarbeit, Carl von Ossietzky Universität Oldenburg, , Department für Informatik, Abteilung Software Engineering, Germany; Gitchell, D., Tran, N., Sim: A utility for detecting similarity in computer programs (1999) SIGCSE '99: The proceedings of the thirtieth SIGCSE technical symposium on Computer science education, pp. 266-270. , ACM Press; Godfrey, M., Tu, Q., Evolution in open source software: A case study (2000) International Conference on Software Maintenance, pp. 131-142. , IEEE CS Press; Godfrey, M., Tu, Q., Growth, evolution and structural change in open source software (2001) Workshop on Principles of Software Evolution, , Sept; Grier, S., A tool that detects plagiarism in Pascal programs (1981) SIGSCE Bulletin, 13 (1), pp. 15-20; Higo, Y., Ueda, Y., Kamiya, T., Kusumoto, S., Inoue, K., On software maintenance process improvement based on code clone analysis (2002) Lecture Notes In Computer Science, 2559, pp. 185-197. , International Conference on Product Focused Software Process Improvement, of, Springer; Jankowitz, H.T., Detecting plagiarism in student Pascal programs (1988) Computer Journal, 1 (31), pp. 1-8; Jarzabek, S., Li, S., Unifying clones with a generative programming technique: A case study (2006) Journal on Software Maintenance and Evolution, 18 (4), pp. 267-292; Jiang, L., Misherghi, G., Su, Z., Glondu, S., Deckard: Scalable and accurate tree-based detection of code clones (2007) International Conference on Software Engineering, pp. 96-105. , ACM Press; Johnson, J.H., Identifying redundancy in source code using fingerprints (1993) Conference of the Centre for Advanced Studies on Collaborative research, pp. 171-183. , IBM Press; Johnson, J.H., Substring matching for clone detection and change tracking (1994) International Conference on Software Maintenance, pp. 120-126. , IEEE CS Press; Johnson, J.H., Visualizing textual redundancy in legacy source (1994) Conference of the Centre for Advanced Studies on Collaborative research, pp. 32-41. , IBM Press; Jrgens, E., Hummel, B., Deissenbck, F., Feilkas, M., Static bug detection through analysis of inconsistent clones (2008) Testmethoden fur Software, , TESO; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A Multi-Linguistic Token-based Code Clone Detection System for Large Scale Source Code (2002) IEEE Transactions on Software Engineering, 28 (7), pp. 654-670; Kapser, C., Anderson, P., Godfrey, M., Koschke, R., Rieger, M., van Rysselberghe, F., Weigerber, P., Subjectivity in clone judgment: Can we ever agree? (2006) Dagstuhl Seminar "Duplication, Redundancy, and Similarity in Software" Proceedings 06301, , R. Koschke, E. Merlo, and A. Walenstein, editors, Schlo Dagstuhl; Kapser, C., Godfrey, M., A taxonomy of clones in source code: The reengineers most wanted list (2003) Working Conference on Reverse Engineering, , IEEE CS Press, Position Paper; Kapser, C., Godfrey, M.W., Toward a taxonomy of clones in source code: A case study (2003) Evolution of Large Scale Industrial Software Architectures, pp. 67-78; Kapser, C., Godfrey, M.W., clones considered harmful considered harmful (2006) Working Conference on Reverse Engineering, pp. 19-28; Kapser, C.J., Godfrey, M.W., Supporting the analysis of clones in software systems: Research articles (2006) Journal of Software Maintenance and Evolution, 18 (2), pp. 61-82; Kim, M., Bergman, L., Lau, T., Notkin, D., An ethnographic study of copy and paste programming practices in OOPL (2004) International Symposium on Empirical Software Engineering, pp. 83-92. , IEEE CS Press; Kim, M., Sazawal, V., Notkin, D., Murphy, G.C., An empirical study of code clone genealogies (2005) European Software Engineering Conference and Foundations of Software Engineering (ESEC/FSE, pp. 187-196; Komondoor, R., Horwitz, S., Using slicing to identify duplication in source code (2001) Proc. Int. Symposium on Static Analysis, pp. 40-56. , July; Komondoor, R., Horwitz, S., Eliminating duplication in source code via procedure extraction (2002), Technical report 1461, UW-Madison Dept. of Computer Sciences, Dec; Kontogiannis, K., DeMori, R., Bernstein, M., Galler, M., Merlo, E., Pattern matching for design concept localization (1995) Working Conference on Reverse Engineering, pp. 96-103. , IEEE CS Press, July; Kontogiannis, K., Mori, R.D., Merlo, E., Galler, M., Bernstein, M., Pattern matching for clone and concept detection (1996) Journal of Automated Software Engineering, 3 (1-2), pp. 79-108. , June; R. Koschke. Survey of research on software clones. In R. Koschke, E. Merlo, and A. Walenstein, editors, Duplication, Redundancy, and Similarity in Software, number 06301 in Dagstuhl Seminar Proceedings, Dagstuhl, Germany, 2007. Dagstuhl; Koschke, R., Identifying and Removing Software Clones, pp. 15-39. , Springer Verlag, 2008. Editors: Serge Demeyer und Tom Mens; Koschke, R., Falke, R., Frenzel, P., Clone detection using abstract syntax suffix trees (2006) Working Conference on Reverse Engineering, pp. 253-262. , IEEE CS Press; Krinke, J., Identifying Similar Code with Program Dependence Graphs (2001) Working Conference on Reverse Engineering, pp. 301-309; Krinke, J., A study of consistent and inconsistent changes to code clones (2007) Working Conference on Reverse Engineering, , IEEE CS Press; Lague, B., Proulx, D., Mayrand, J., Merlo, E., Hudepohl, J., Assessing the benefits of incorporating function clone detection in a development process (1997) International Conference on Software Maintenance, pp. 314-321; Lanubile, F., Mallardo, T., Finding function clones in web applications (2003) European Conference on Software Maintenance and Reengineering, pp. 379-386; Leitao, A.M., Detection of redundant code using r2d2 (2003) Workshop Source Code Analysis and Manipulation, pp. 183-192. , IEEE CS Press; Li, Z., Lu, S., Myagmar, S., Zhou, Y., Cp-miner: A tool for finding copy-paste and related bugs in operating system code (2004) Operating System Design and Implementation, pp. 289-302; Li, Z., Lu, S., Myagmar, S., Zhou, Y., Copy-paste and related bugs in large-scale software code (2006) IEEE Transactions on Software Engineering, 32 (3), pp. 176-192. , Mar; A. Lozano, M. Wermelinger, and B. Nuseibeh. Evaluating the harmfulness of cloning: A change based experiment. In Mining Software Repositories, ICSE Workshop. ACM Press, May 2007; Madhavji, N.H., Compare: A collusion detector for Pascal (1985) Techniques et Sciences Informatiques, 4 (6), pp. 489-497; Manber, U., Finding similar files in a large file system (1994) Proceedings of the Winter Usenix Technical Conference, pp. 1-10; Marcus, A., Maletic, J., Identification of high-level concept clones in source code (2001) International Conference on Automated Software Engineering, pp. 107-114; Mayrand, J., Leblanc, C., Merlo, E., Experiment on the automatic detection of function clones in a software system using metrics (1996) International Conference on Software Maintenance, pp. 244-253; McCreight, E., A space-economical suffix tree construction algorithm (1976) Journal of the ACM, 32 (2), pp. 262-272; Mende, T., Beckwermert, F., Koschke, R., Meier, G., Supporting the grow-and-prune model in software product lines evolution using clone detection (2008) European Conference on Software Maintenance and Reengineering, pp. 163-172. , IEEE CS Press; Monden, A., Nakae, D., Kamiya, T., Sato, S., Matsumoto, K., Software quality analysis by code clones in industrial legacy software (2002) IEEE Symposium on Software Metrics, pp. 87-94; Moonen, L., Generating robust parsers using island grammars (2001) Proceedings of the Working Conference on Reverse Engineering, pp. 13-22. , IEEE CS Press, Oct; Prechelt, L., Malpohl, G., Philippsen, M., Jplag: Finding plagiarisms among a set of programs (2000), Technical report, University of Karlsruhe, Department of Informatics; Rieger, M., (2005) Effective Clone Detection Without Language Barriers, , Dissertation, University of Bern, Switzerland; Rieger, M., Ducasse, S., Lanza, M., Insights into system-wide code duplication (2004) Working Conference on Reverse Engineering, pp. 100-109. , IEEE CS Press; Roy, C.K., Cordy, J.R., (2007) A survey on software clone detection research, , Technical Report No. 2007-541, School of Computing, Queen's University at Kingston, Ontario, Canada; Roy, C.K., Cordy, J.R., Nicad: Accurate detection of near-miss intentional clones using flexible pretty-printing and code normalization (2008) International Conference on Program Comprehension, , IEEE CS Press; Roy, C.K., Cordy, J.R., Scenario-based comparison of clone detection techniques (2008) International Conference on Program Comprehension, , IEEE CS Press; Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proceedings of the SIGMOD, pp. 76-85; Synytskyy, N., Cordy, J.R., Dean, T., Resolution of static clones in dynamic web (2003) Workshop on Website Evolution, pp. 49-56; Tairas, R., Gray, J., Baxter, I., Visualization of clone detection results (2006) Proceedings of the 2006 OOPSLA workshop on eclipse technology eXchange, pp. 50-54; Toomim, M., Begel, A., Graham, S., Managing duplicated code with linked editing (2004) IEEE Symposium on Visual Languages: Human Centric Computing, pp. 173-180. , IEEE CS Press; Tu, Q., Godfrey, M.W., An integrated approach for studying architectural evolution (2002) International Workshop on Program Comprehension, pp. 127-136. , IEEE CS Press, June; Ueda, Y., Kamiya, T., Kusumoto, S., Inoue, K., Gemini: Maintenance support environment based on code clone analysis (2002) IEEE Symposium on Software Metrics, pp. 67-76. , IEEE CS Press; Van Rysselberghe, F., Demeyer, S., Reconstruction of successful software evolution using clone detection (2003) International Workshop on Principles of Software Evolution, pp. 126-130; Van Rysselberghe, F., Demeyer, S., Evaluating clone detection techniques from a refactoring perspective (2004) International Conference on Automated Software Engineering, pp. 336-339; C. D. via Structural Abstraction. William s. evans and christopher w. fraser and fei ma. In Working Conference on Reverse Engineering, pages 150-159. IEEE CS Press, 2007; Wahler, V., Seipel, D., von Gudenberg, J.W., Fischer, G., Clone detection in source code by frequent itemset techniques (2004) Workshop Source Code Analysis and Manipulation, pp. 128-135; A. Walenstein. Code clones: Reconsidering terminology. In R. Koschke, E. Merlo, and A. Walenstein, editors, Duplication, Redundancy, and Similarity in Software, number 06301 in Dagstuhl Seminar Proceedings, Dagstuhl, Germany, 2007. Internationales Begegnungs- und Forschungszentrum für Informatik (IBFI), Schloss Dagstuhl, Germany; A. Walenstein, M. El-Ramly, J. R. Cordy, W. S. Evans, K. Mahdavi, M. Pizka, G. Ramalingam, and J. W. von Gudenberg. Similarity in programs. In R. Koschke, E. Merlo, and A. Walenstein, editors, Duplication, Redundancy, and Similarity in Software, number 06301 in Dagstuhl Seminar Proceedings, Dagstuhl, Germany, 2007. Internationales Begegnungs- und Forschungszentrum für Informatik (IBFI), Schloss Dagstuhl, Germany; Walenstein, A., Jyoti, N., Li, J., Yang, Y., Lakhotia, A., Problems creating task-relevant clone detection reference data (2003) Working Conference on Reverse Engineering, pp. 285-294. , IEEE CS Press; Wattenberg, M., Arc diagrams: Visualizing structure in strings (2002) Proceedings InfoVis, pp. 10-17. , IEEE CS Press; Xing, Z., Stroulia, E., Refactoring detection based on UMLDiff change-facts queries (2003) Working Conference on Reverse Engineering, pp. 263-274. , IEEE CS Press; Xing, Z., Stroulia, E., Analyzing the evolutionary history of the logical design of object-oriented software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 850-868. , Oct; Yang, W., Identifying syntactic differences between two programs (1991) Software-Practice and Experience, 21 (7), pp. 739-755. , July; Zou, L., Godfrey, M., Detecting merging and splitting using origin analysis (2003) Working Conference on Reverse Engineering, pp. 146-154. , IEEE CS Press},
correspondence_address1={Koschke, R.; University of BremenGermany; email: koschke@informatik.uni-bremen.de},
address={Beijing},
isbn={9781424426553},
language={English},
abbrev_source_title={Proc. Front. Softw. Maint., FoSM},
document_type={Conference Paper},
source={Scopus},
}

@BOOK{Koschke200815,
author={Koschke, R.},
title={Identifying and removing software clones},
journal={Software Evolution},
year={2008},
pages={15-36},
doi={10.1007/978-3-540-76440-3_2},
note={cited By 39},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-64549113062&doi=10.1007%2f978-3-540-76440-3_2&partnerID=40&md5=cacf2dab7d6f4d20db985de7ae59190d},
affiliation={Fachbereich 03, Universität Bremen, Postfach 33 04 40, 28334 Bremen, Germany},
abstract={Ad-hoc reuse through copy-and-paste occurs frequently in practice affecting the evolvability of software. Researchers have investigated ways to locate and remove duplicated code. Empirical studies have explored the root causes and effects of duplicated code and the evolution of duplicated code. This chapter summarizes the state of the art in detecting, managing, and removing software redundancy. It describes consequences, pros and cons of copying and pasting code. © 2008 Springer-Verlag.},
references={Trademark of Semantic Designs, Inc; http://www.axivion.com},
correspondence_address1={Koschke, R.; Fachbereich 03, Universität Bremen, Postfach 33 04 40, 28334 Bremen, Germany; email: koschke@informatik.uni-bremen.de},
publisher={Springer Berlin Heidelberg},
isbn={9783540764397},
language={English},
abbrev_source_title={Softw. Evol.},
document_type={Book Chapter},
source={Scopus},
}

@CONFERENCE{Berger2008631,
author={Berger, B.J. and Koschke, R.},
title={Reduction of program size with the help of clone detection [Reduzierung der programmgröße mit Hilfe von Klonerkennung]},
journal={INFORMATIK 2008 - Beherrschbare Systeme - Dank Informatik, Beitrage der 38. Jahrestagung der Gesellschaft fur Informatik e.V. (GI)},
year={2008},
volume={2},
pages={631-636},
note={cited By 0; Conference of 38th Jahrestagung der Gesellschaft fur Informatik e.V. (GI): Beherrschbare Systeme - Dank Informatik, INFORMATIK 2008 38th Annual Conference of the German Informatics Society (GI): Manageable Systems - Thanks to Computer Science, INFORMATIK 2008 ; Conference Date: 8 September 2008 Through 13 September 2008;  Conference Code:95689},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84877331721&partnerID=40&md5=a298a18e6e5a8801460a0964de842146},
affiliation={Axivion GmbH, Germany; Arbeitsgruppe Softwaretechnik, FB 3 Informatik, Universität Bremen, Germany},
references={Baker, B.S., On finding duplication and near-duplication in large software systems (1995) Working Conference on Reverse Engineering, , IEEE CS Press; Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) IEEE Transactions on Software Engineering, 33 (9), pp. 577-591. , September; Ducasse, S., Rieger, M., Demeyer, S., A language independent approach for detecting duplicated code (1999) ICSM; Falke, R., Koschke, R., Frenzel, P., Empirical evaluation of clone detection using syntax suffix trees (2008) Empiricial Software Engineering, , accepted for publication; Fowler, M., (2000) Refactoring: Improving the Design of Existing Code, , Addison-Wesley; Kontogiannis, K., DeMori, R., Bernstein, M., Galler, M., Merlo, E., Pattern matching for design concept localization (1995) Working Conference on Reverse Engineering, , IEEE Computer Society Press; Koschke, R., Falke, R., Frenzel, P., Clone detection using abstract syntax suffix trees (2006) Working Conference on Reverse Engineering, , Seiten 253-262. IEEE CS Press; Lague, B., Proulx, D., Mayrand, J., Merlo, E.M., Hudepohl, J., Assessing the benefits of incorporating function clone detection in a development process (1997) International Conference on Software Maintenance, , Seiten 314-321},
correspondence_address1={Berger, B.J.; Axivion GmbHGermany; email: berger@axivion.com},
address={Munich},
isbn={9783885792284},
language={German},
abbrev_source_title={INFORMATIK - Beherrschbare Syst. - Dank Inform., Beitrage Jahrestag. Ges. Inform. e.V. (GI)},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koschke20086,
author={Koschke, R. and Telea, A. and Hundhausen, C.},
title={SOFTVIS 2008 - Proceedings of the 4th ACM Symposium on Software Visualization: Preface},
journal={SOFTVIS 2008 - Proceedings of the 4th ACM Symposium on Software Visualization},
year={2008},
pages={6},
note={cited By 0; Conference of 4th ACM Symposium on Software Visualization, SOFTVIS 2008 ; Conference Date: 16 September 2008 Through 17 September 2008;  Conference Code:75979},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-63149148762&partnerID=40&md5=b504bd7cbcf061f27fe9b7f5be03a084},
address={Herrsching am Ammersee},
isbn={9781605581125},
language={English},
abbrev_source_title={SOFTVIS - Proce. ACM Symp. Softw. Visualization},
document_type={Editorial},
source={Scopus},
}

@ARTICLE{Falke2008601,
author={Falke, R. and Frenzel, P. and Koschke, R.},
title={Empirical evaluation of clone detection using syntax suffix trees},
journal={Empirical Software Engineering},
year={2008},
volume={13},
number={6},
pages={601-643},
doi={10.1007/s10664-008-9073-9},
note={cited By 45},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-56749179725&doi=10.1007%2fs10664-008-9073-9&partnerID=40&md5=f3968c4c1acb9b10d823b0f17908b72b},
affiliation={University of Bremen, Bremen, Germany},
abstract={Reusing software through copying and pasting is a continuous plague in software development despite the fact that it creates serious maintenance problems. Various techniques have been proposed to find duplicated redundant code (also known as software clones). A recent study has compared these techniques and shown that token-based clone detection based on suffix trees is fast but yields clone candidates that are often not syntactic units. Current techniques based on abstract syntax trees-on the other hand-find syntactic clones but are considerably less efficient. This paper describes how we can make use of suffix trees to find syntactic clones in abstract syntax trees. This new approach is able to find syntactic clones in linear time and space. The paper reports the results of a large case study in which we empirically compare the new technique to other techniques using the Bellon benchmark for clone detectors. The Bellon benchmark consists of clone pairs validated by humans for eight software systems written in C or Java from different application domains. The new contributions of this paper over the conference paper are the additional analysis of Java programs, the exploration of an alternative path that uses parse trees instead of abstract syntax trees, and the investigation of the impact on recall and precision when clone analyses insist on consistent parameter renaming. © 2008 Springer Science+Business Media, LLC.},
author_keywords={Duplication;  Program analysis;  Redundancy;  Software clone detection;  Software evolution;  Software maintenance},
keywords={Abstracting;  Benchmarking;  Cloning;  Computer programming languages;  Computer software maintenance;  Java programming language;  Maintenance;  Syntactics;  Trees (mathematics);  XML, Duplication;  Program analysis;  Software clone detection;  Software evolution;  Software maintenance, Computer software},
references={Antoniol, G., Casazza, G., Penta, M.D., Merlo, E., Modeling clones evolution through time series (2001) International Conference on Software Maintenance, pp. 273-280. , IEEE CS Press; Antoniol, G., Villano, U., Merlo, E., Penta, M., Analyzing cloning evolution in the linux kernel (2002) Inf Softw Technol, 44, pp. 755-765. , 13; Bailey, J., Burd, E., Evaluating clone detection tools for use during preventative maintenance (2002) SCAM; Baker, B.S., A program for identifying duplicated code (1992) Computer Science and Statistics 24: Proceedings of the 24th Symposium on the Interface; Baker, B.S., On finding duplication and near-duplication in large software systems (1995) Working Conference on Reverse Engineering, , IEEE CS Press; Baker, B.S., Parameterized pattern matching: Algorithms and applications (1996) JCSS; Baker, B.S., Finding clones with Dup: Analysis of an experiment (2007) IEEE Trans Softw Eng, 33, pp. 608-621. , 9. (September); Baker, B.S., Giancarlo, R., Sparse dynamic programming for longest common subsequence from fragments (2002) J Algorithms, 42, pp. 231-254. , 2; Balazinska, M., Merlo, E., Dagenais, M., Lague, B., Kontogiannis, K., Measuring clone based reengineering opportunities (1999) IEEE Symposium on Software Metrics, pp. 292-303. , IEEE CS Press, November; Balazinska, M., Merlo, E., Dagenais, M., Lague, B., Kontogiannis, K., Advanced clone-analysis to support object-oriented system refactoring (2000) Working Conference on Reverse Engineering, pp. 98-107. , IEEE CS Press October; Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., Clone detection using abstract syntax trees (1998) ICSM; Bellon, S., (2002) Vergleich von Techniken zur Erkennung duplizierten Quellcodes, , Master's thesis, University of Stuttgart, Germany; Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) IEEE Trans Softw Eng, 33, pp. 577-591. , 9. (September); Bentley, J.L., Ottmann, T.A., Algorithms for reporting and counting geometric intersections (1979) IEEE Trans Comput, 28, pp. 643-647; Bruntink, M., Van Deursen, A., Tourwe, T., Van Engelen, R., An evaluation of clone detection techniques for crosscutting concerns (2004) International Conference on Software Maintenance, pp. 200-209; Bruntink, M., Van Engelen, R., Tourwe, T., On the use of clone detection for identifying crosscutting concern code (2005) IEEE Trans Softw Eng, 31, pp. 804-818. , 10; Chou, A., Yang, J., Chelf, B., Hallem, S., Engler, D.R., An empirical study of operating system errors (2001) Symposium on Operating Systems Principles, pp. 73-88; Cordy, J.R., Comprehending reality-practical barriers to industrial adoption of software maintenance automation (2003) International Workshop on Program Comprehension, IEEE CS Press; Cordy, J.R., Dean, T.R., Synytskyy, N., Practical language-independent detection of near-miss clones (2004) CASCON, IBM Press; Di Lucca, G., Di Penta, M., Fasolino, A., An approach to identify duplicated web pages (2002) COMPSAC; Ducasse, S., Rieger, M., Demeyer, S., A language independent approach for detecting duplicated code (1999) ICSM; Fowler, M., (1999) Refactoring: Improving the Design of Existing Code, , Addison Wesley Boston, MA, USA; Gitchell, D., Tran, N., Sim: A utility for detecting similarity in computer programs (1999) SIGCSE, ACM Press; Godfrey, M., Tu, Q., Growth, evolution and structural change in open source software (2001) Workshop on Principles of Software Evolution, , September; Higo, Y., Ueda, Y., Kamiya, T., Kusumoto, S., Inoue, K., On software maintenance process improvement based on code clone analysis (2002) International Conference on Product Focused Software Process Improvement. Lecture Notes in Computer Science, 2559. , Springer; Johnson, J.H., Identifying redundancy in source code using fingerprints (1993) CASCON, IBM Press; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multi-linguistic token-based code clone detection system for large scale source code (2002) IEEE Trans Softw Eng, 28, pp. 654-670. , 7; Kapser, C., Godfrey, M., A taxonomy of clones in source code: The reengineers most wanted list (2003) Working Conference on Reverse Engineering, , IEEE CS Press; Kapser, C., Godfrey, M.W., Toward a taxonomy of clones in source code: A case study (2003) Evolution of Large Scale Industrial Software Architectures; Kapser, C., Godfrey, M., Improved tool support for the investigation of duplication in software (2005) Proceedings of the 21st IEEE International Conference on Software Maintenance; Kapser, C., Godfrey, M.W., Clones considered harmful" considered harmful (2006) Working Conference on Reverse Engineering; Kim, M., Bergman, L., Lau, T., Notkin, D., An ethnographic study of copy and paste programming practices in OOPL (2004) International Symposium on Empirical Software Engineering. IEEE CS Press, pp. 83-92; Kim, M., Sazawal, V., Notkin, D., Murphy, G.C., An empirical study of code clone genealogies (2005) European Software Engineering Conference and Foundations of Software Engineering (ESEC/FSE); Komondoor, R., Horwitz, S., Using slicing to identify duplication in source code (2001) Proc. Int. Symposium on Static Analysis; Kontogiannis, K., Mori, R.D., Merlo, E., Galler, M., Bernstein, M., Pattern matching for clone and concept detection (1996) Autom Softw Eng, 3, pp. 79-108. , 1/2; Koschke, R., Girard, J.F., Würthner, M., Intermediate representations for reverse engineering (1998) Working Conference on Reverse Engineering. IEEE CS Press, pp. 241-250; Koschke, R., Falke, R., Frenzel, P., Clone detection using abstract syntax suffix trees (2006) Working Conference on Reverse Engineering. IEEE CS Press, pp. 253-262; Krinke, J., Identifying similar code with program dependence graphs (2001) WCRE; Lague, B., Proulx, D., Mayrand, J., Merlo, E., Hudepohl, J., Assessing the benefits of incorporating function clone detection in a development process (1997) International Conference on Software Maintenance, pp. 314-321; Laguë, B., Proulx, D., Mayrand, J., Merlo, E.M., Hudepohl, J., Assessing the benefits of incorporating function clone detection in a development process (1997) ICSM; Lanubile, F., Mallardo, T., Finding function clones in web applications (2003) Conference on Software Maintenance and Reengineering; Leitao, A.M., Detection of redundant code using R2D2 (2003) Workshop Source Code Analysis and Manipulation. IEEE CS Press; Li, Z., Lu, S., Myagmar, S., Zhou, Y., Cp-miner: A tool for finding copy-paste and related bugs in operating system code (2004) Operating System Design and Implementation, pp. 289-302; Li, Z., Lu, S., Myagmar, S., Zhou, Y., Copy-paste and related bugs in large-scale software code (2006) IEEE Trans Softw Eng, 32, pp. 176-192. , 3. (March); Manber, U., Myers, G., Suffix arrays: A new method for on-line string searches (1991) SIAM J Comput, 22, pp. 935-948. , 5. (October); Marcus, A., Maletic, J., Identification of high-level concept clones in source code (2001) Conference on Automated Software Engineering; Mayrand, J., Leblanc, C., Merlo, E.M., Experiment on the automatic detection of function clones in a software system using metrics (1996) ICSM. IEEE Computer Society Press; McCreight, E., A space-economical suffix tree construction algorithm (1976) J ACM, 32, pp. 262-272. , 2; Monden, A., Nakae, D., Kamiya, T., Sato, S., Matsumoto, K., Software quality analysis by code clones in industrial legacy software (2002) IEEE Symposium on Software Metrics, pp. 87-94; Prechelt, L., Malpohl, G., Philippsen, M., Jplag: Finding plagiarisms among a set of programs (2000) Technical Report, University of Karlsruhe, Department of Informatics; Rieger, M., Effective clone detection without language barriers (2005) Dissertation, University of Bern, Switzerland; Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proceedings of the SIGMOD, pp. 76-85; Shannon, C.E., A mathematical theory of communication (1984) Bell Syst Tech J, 27, pp. 623-656. , 379-423; Ukkonen, E., On-line construction of suffix trees (1995) Algorithmica, 14, pp. 249-260. , 3; Van Rysselberghe, F., Demeyer, S., Evaluating clone detection techniques from a refactoring perspective (2004) Conference on Automated Software Engineering; Walter, V., Seipel, D., Von Gudenberg, J.W., Fischer, G., Clone detection in source code by frequent itemset techniques (2004) Workshop Source Code Analysis and Manipulation; Yang, W., Identifying syntactic differences between two programs (1991) Software Pract Ex, 21, pp. 739-755. , 7},
correspondence_address1={Koschke, R.; University of Bremen, Bremen, Germany; email: koschke@informatik.uni-bremen.de},
issn={13823256},
coden={ESENF},
language={English},
abbrev_source_title={Empir Software Eng},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Mende2008163,
author={Mende, T. and Beckwermert, F. and Koschke, R. and Meier, G.},
title={Supporting the grow-and-prune model in software product lines evolution using clone detection},
journal={Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR},
year={2008},
pages={163-172},
doi={10.1109/CSMR.2008.4493311},
art_number={4493311},
note={cited By 55; Conference of CSMR 2008 - 12th European Conference on Software Maintenance and Reengineering ; Conference Date: 1 April 2008 Through 4 April 2008;  Conference Code:73135},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-50249120730&doi=10.1109%2fCSMR.2008.4493311&partnerID=40&md5=c6fed8a7c198d658c5c0141db72a99d6},
affiliation={University of Bremen, Germany; Testo AG, Lenzkirch, Germany},
abstract={Software Product Lines (SPL) can be used to create and maintain different variants of software-intensive systems by explicitly managing variability. Often, SPLs are organized as an SPL core, common to all products, upon which product-specific components are built. Following the so called grow-ana-prune model, SPLs may be evolved by copy&paste at large scale. New products are created from existing ones and existing products are enhanced with functionalities specific to other products by copying and pasting code between product-specific code. To regain control of this unmanaged growth, such code may be pruned, that is, identified and refactored into core components upon success. This paper describes tool support for the grow-andprune model in the evolution of software product lines by identifying similar functions which can be moved to the core. These functions are identified in two steps. First, token-based clone detection is used to detect pairs of functions sharing code. Second, Levenshtein distance measures the textual similarity among these functions. Sufficient similarity at function level is then lifted to the architectural level. The approach is evaluated by three case studies, one using an open source email client to simulate the initial creation of an SPL, and two monitoring existing industrial product lines from the embedded domain. © 2008 IEEE.},
author_keywords={Software maintenance;  Software reusability},
keywords={Cloning;  Codes (standards);  Codes (symbols);  Ketones;  Maintenance;  Reengineering, Case studies;  Clone detection;  Core components;  European;  Industrial products;  Levenshtein distances;  New products;  Open sources;  Software maintenance;  Software Product Lines;  Software reusability;  Software-intensive systems;  Specific components;  Tool supports, Computer software maintenance},
references={Bailey, J., Burd, E., Evaluating clone detection tools for use during preventative maintenance (2002) Workshop Source Code Analysis and Manipulation, pp. 36-43; Baker, B.S., On Finding Duplication and NearDuplication in Large Software Systems (1995) Proc. of 2nd WCRE, pp. 86-95; E. Balazinska, M.and Merlo, B. Dagenais, M.and Lague, and K. Kontogiannis. Advanced clone-analysis to support object-oriented system refactoring. In Proc. of 7th WCRE, pages 98-107, 2000; Baxter, I.D., Churchett, D., Using clone detection to manage a product line (2002) ICSR7 Workshop, Industrial Experience with Product Line Approaches, , PositionPaper; Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., Clone Detection Using (1998) Proc. of 14th ICSM, pp. 368-378. , Abstract Syntax Trees; Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) IEEE Transactions on Software Engineering, pp. 577-591. , Sept; Clements, P., Northrop, L.M., (2001) Software Product Lines : Practices and Patterns, , Professional. AddisonWesley; G. Di Lucca, M. Di Penta, and A. Fasolino. An approach to identify duplicated web pages. In International Computer Software and Applications Conference, pages 481-486, 2002; Duala-Ekoko, E., Robillard, M., Tracking code clones in evolving software (2007) Proc. of 29th ICSE, pp. 158-167; Falke, R., Frenzel, P., Koschke, R., Empirical evaluation of clone detection using syntax suffix trees (2007) Empirical Software Engineering Journal, , Submitted for publication; Faust, D., Verhoef, C., Software product line migration and deployment (2003) Journal of Software Practice and Experiences, 33 (10), pp. 933-955. , Aug; Frenzel, P., Koschke, R., Breu, A., Angstmann, K., Extending the reflection method for consolidating software variants into product lines (2007) Proc. of 14th WCRE; Kapser, C.J., Godfrey, M.W., Supporting the analysis of clones in software systems: A case study (2006) Journal of Software Maintenance and Evolution, 18 (2), pp. 61-82; Karhinen, A., Sandrini, M., Tuominen, J., An approach to manage variance in legacy systems (1999) Proc. of the 3rd CSMR, pp. 190-193. , 3-5 March; Kolb, R., John, I., Knodel, J., Muthig, D., Haury, U., Meier, G., Experiences with product line development of embedded systems at Testo AG (2006) Proc of the 10th SPLC, pp. 172-181; Kolb, R., Muthig, D., Patzke, T., Yamauchi, K., A case study in refactoring a legacy component for reuse in a product line (2005) Proc. of 21st. ICSM, pp. 369-378; Koschke, R., Falke, R., Frenzel, P., Clone detection using abstract syntax suffix trees (2006) Proc. of 13th WCRE, pp. 253-262; Levenshtein, V.I., Binary codes capable of correcting deletions, insertions, and reversals Technical Report 8, Soviet Physics Doklady, 1966; Mayrand, J., Leblanc, C., Merlo, E., Experiment on the automatic detection of function clones in a software system using metrics (1996) Proc. of 12th ICSM, pp. 244-253; Riva, C., Del Rosso, C., Experiences with software product family evolution (2003) Software Evolution, 2003. Proceedings. Sixth International Workshop on Principles of, pp. 161-169. , 1-2 Sept; Xing, Z., Stroulia, E., Understanding phases and styles of object-oriented systems' evolution (2004) Proc. of 20th. ICSM, pp. 242-251; Yamamoto, T., Matsushita, M., Kamiya, T., Inoue, K., Measuring similarity of large software systems based on source code correspondence (2005) PROFES, pp. 530-544; Yoshimura, K., Ganesan, D., Muthig, D., Defining a strategy to introduce a software product line using existing embedded systems (2006) EMSOFT '06: Proceedings of the 6th A CM & IEEE International conference on Embedded software, pp. 63-72. , New York, NY, USA, ACM; Zou, L., Godfrey, M., Detecting merging and splitting using origin analysis (2003) Working Conference on Reverse Engineering, pp. 146-154},
correspondence_address1={Mende, T.; University of BremenGermany; email: tmende@informatik.uni-bremen.de},
sponsors={Reengineering Forum (REF)},
address={Athens},
issn={15345351},
isbn={9781424421572},
language={English},
abbrev_source_title={Proc. Eur. Conf. Software Maint. Reeng.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Quante2008481,
author={Quante, J. and Koschke, R.},
title={Dynamic object process graphs},
journal={Journal of Systems and Software},
year={2008},
volume={81},
number={4},
pages={481-501},
doi={10.1016/j.jss.2007.06.005},
note={cited By 14},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-40049112216&doi=10.1016%2fj.jss.2007.06.005&partnerID=40&md5=672667e3432326915ce9d2543afbb632},
affiliation={Software Engineering Group, Computer Science, Faculty 3, 28359 Bremen, Germany},
abstract={A trace is a record of the execution of a computer program, showing the sequence of operations executed. A trace may be obtained through static or dynamic analysis. An object trace contains only those operations that relate to a particular object. Traces can be very large for longer system executions. Moreover, they lack structure because they do not show the control dependencies and completely unfold loops. Object process graphs are a finite concise description of dynamic object traces. They offer the advantage of representing control dependencies and loops explicitly. This article describes a new technique to extract object process graphs through dynamic analysis and discusses several applications, in particular program understanding and protocol recovery. A case study is described that illustrates and demonstrates use and feasibility of the technique. Finally, statically and dynamically derived object process graphs are compared. © 2007 Elsevier Inc. All rights reserved.},
author_keywords={Dynamic analysis;  Program understanding;  Protocol recovery;  Reverse engineering;  Tracing},
keywords={Computer program listings;  Dynamic analysis;  Network protocols;  Reverse engineering;  Static analysis, Program understanding;  Protocol recovery, Graph theory},
funding_details={Deutsche ForschungsgemeinschaftDeutsche Forschungsgemeinschaft, DFG, Bauhaus/OOS PL 332-1-1},
funding_text 1={This research is sponsored by a research grant of the Deutsche Forschungsgemeinschaft (DFG) under Bauhaus/OOS PL 332-1-1. We also like thank Gunther Vogel for providing us with the tools for static tracing. We are also thankful to the many insightful remarks of the anonymous reviewers.},
references={Ammons, G., Bodik, R., Larus, J. 2002. Mining specifications, in: Proceedings of the 29th Symposium on Principles of programming languages, pp. 4-16; Binkley, D., Gallagher, K.B., Program slicing (1996) Advances in Computers, 43, pp. 1-50; Binkley, D., Harman, M., A survey of empirical results on program slicing (2004) Advances in Computers, 62, pp. 105-178; Chen, J.-L., Wang, F.-J. 1997. Slicing object-oriented programs, in: Proceedings of the 4th Asia-Pacific Software Engineering and International Computer Science Conference; Chen, Z., Xu, B., Slicing object-oriented java programs (2001) ACM SIGPLAN Notices, 36 (4), pp. 33-40; Choi, J.-D., Lee, K., Loginov, A., O'Callahan, R., Sarkar, V., Sridharan, M., Efficient and precise datarace detection for multithreaded object-oriented programs (2002) Proceedings of the SIGPLAN Conference on Programming language design and implementation, pp. 258-269. , ACM Press; Das, M., Unification-based pointer analysis with directional assignments (2000) PLDI '00: Proceedings of the ACM SIGPLAN 2000 conference on Programming language design and implementation, pp. 35-46. , ACM Press; Eisenbarth, T., Koschke, R., Vogel, G., Static object trace extraction for programs with pointers (2005) Journal of Systems and Software, 77 (3), pp. 263-284; Ferrante, J., Ottenstein, K.J., Warren, J.D., The program dependence graph and its use in optimization (1987) ACM Transactions on Programming Languages and Systems (TOPLAS), 9 (3), pp. 319-349; Gamma, E., Helm, R., Johnson, R., Vlissides, J., (1995) Professional Computing Series, , Addison-Wesley; Gschwind, T., Oberleitner, J., Improving dynamic data analysis with aspect-oriented programming (2003) Proceedings of the 7th Conference on Software Maintenance and Reengineering, pp. 259-268. , IEEE Press; Hall, R., Automatic extraction of executable program subsets by simultaneous dynamic program slicing (1995) Journal Automated Software Engineering, 2, pp. 33-53; Heiber, T. 2000. Semi-automatic protocol recovery, Diploma thesis, University of Stuttgart, Computer Science; Hoare, C., (1985) Communicating Sequential Processes, , Prentice Hall International; Horwitz, S., Reps, T., Binkley, D., Interprocedural Slicing Using Dependence Graphs (1990) ACM Transactions on Programming Languages and Systems (TOPLAS), 12 (1), pp. 26-60; Korel, B., Rilling, J., Dynamic program slicing methods (1998) Information and Software Technology, 40 (11-12), pp. 647-660. , (special issue on program slicing); Koschke, R., Girard, J.-F. 1998. An intermediate representation for reverse engineering analyses, in: Proceedings of Working Conference on Reverse Engineering, pp. 241-250; Koschke, R., Zhang, Y. 2001. Component recovery, protocol recovery and validation in Bauhaus, in: Proceedings of 3rd Reengineering Workshop, Bad Honnef, Germany, Fachberichte Informatik, pp. 73-76; Larsen, L., Harrold, M.J., Slicing object-oriented software (1996) International Conference on Software Engineering (ICSE), pp. 495-505. , ACM Press; Liang, D., Harrold, M.J., Slicing objects using system dependence graphs (1998) International Conference on Software Maintenance (ICSM), pp. 358-367. , IEEE Press; Moore, E., Gedanken-experiments on sequential circuits (1956) Automata Studies, pp. 129-153. , Shannon C., and McCarthy J. (Eds), Princeton University Press, Princeton, NJ; Murphy, G.C., Notkin, D., Sullivan, K., Software reflexion models: Bridging the gap between source and high-level models (1995) Proceedings of the Third ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 18-28. , ACM Press; Ohata, F., Hirose, K., Fujii, M., Inoue, K. 2001. A slicing method for object-oriented programs using lightweight dynamic information, in: Proceedings of the Asia-Pacific Software Engineering Conference; Quante, J., Koschke, R., Dynamic object process graphs (2006) CSMR '06: Proceedings of the Conference on Software Maintenance and Reengineering, pp. 81-90. , IEEE Press; Rabin, M.O., Scott, D., Finite automata and their decision problems (1959) IBM Journal of Research and Development, 3 (2), pp. 114-125; Rumbaugh, J., Jacobson, I., Booch, G., (1998) The Unified Modeling Language - Reference Manual, , Addison-Wesley; Shende, S. 1999. Profiling and tracing in linux, in: Proceedings of Extreme Linux Workshop #2, USENIX; Steindl, C., Intermodular slicing of object-oriented programs (1998) Lecture Notes in Computer Science, 1383, pp. 264-278. , International Conference on Compiler Construction, Springer; Steindl, C. 1999. Program slicing for object-oriented programming languages, Dissertation, Johannes Kepler University Linz; Tip, F., A survey of program slicing techniques (1995) Journal of Programming Languages, 3 (3), pp. 121-189; Tonella, P., Potrich, A., Reverse engineering of the interaction diagrams from C++ code (2003) International Conference on Software Maintenance (ICSM), pp. 159-168. , IEEE Press; Weiser, M.D.1979. Program slices: Formal, psychological, and practical investigations of an automatic program abstraction method, Ph.D. thesis, The University of Michigan; Whaley, J., Martin, M.C., Lam, M.S., Automatic extraction of object-oriented component interfaces (2002) Proceedings of the International Symposium on Software Testing and Analysis, pp. 218-228. , ACM Press; Wilson, R. 1997. Efficient, context-sensitive pointer analysis, Ph.D. thesis, Department of Electrical Engineering, Stanford University (December); Wilson, R.P., Lam, M.S. 1995. Efficient context-sensitive pointer analysis for C programs, in: Proceedings of SIGPLAN Conference on Programming Language Design and Implementation, pp. 1-12; Xie, T. 2003. Software Component Protocol Inference, General Examination Report; Xie, T., Notkin, D. 2004. Automatic extraction of sliced object state machines for component interfaces, in: Proceedings 3rd Workshop on Specification and Verification of Component-Based Systems, pp. 39-46},
correspondence_address1={Koschke, R.; Software Engineering Group, Computer Science, Faculty 3, 28359 Bremen, Germany; email: koschke@informatik.uni-bremen.de},
issn={01641212},
coden={JSSOD},
language={English},
abbrev_source_title={J Syst Software},
document_type={Article},
source={Scopus},
}

@ARTICLE{Buckley2008107,
author={Buckley, J. and LeGear, A.P. and Exton, C. and Cadogan, R. and Johnston, T. and Looby, B. and Koschke, R.},
title={Encapsulating targeted component abstractions using software Reflexion Modelling},
journal={Journal of Software Maintenance and Evolution},
year={2008},
volume={20},
number={2},
pages={107-134},
doi={10.1002/smr.364},
note={cited By 8},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-42649107161&doi=10.1002%2fsmr.364&partnerID=40&md5=28eaa7a17d16620bc566d73fc1685eef},
affiliation={Department of Computer Science and Information Systems, University of Limerick, Limerick, Ireland; IBM, Dublin, Ireland; University of Bremen, Bremen, Germany},
abstract={Design abstractions such as components, modules, subsystems or packages are often not made explicit in the implementation of legacy systems. Indeed, often the abstractions that are made explicit turn out to be inappropriate for future evolution agendas. This can make the maintenance, evolution and refactoring of these systems difficult. In this publication, we carry out a fine-grained evaluation of Reflexion Modelling as a technique for encapsulating user-targeted components. This process is a prelude to component recovery, reuse and refactoring. The evaluation takes the form of two in vivo case studies, where two professional software developers encapsulate components in a large, commercial software system. The studies demonstrate the validity of this approach and offer several best-use guidelines. Specifically, they argue that users benefit from having a strong mental model of the system in advance of Reflexion Modelling, even if that model is flawed, and that users should expend effort exploring the expected relationships present in Reflexion Models. Copyright © 2008 John Wiley & Sons, Ltd.},
author_keywords={Architecture recovery;  Component recovery;  Re-engineering;  Reflexion;  Software maintenance},
keywords={Abstracting;  Computer simulation;  Mathematical models;  Reengineering;  Software packages, Architecture recovery;  Component recovery;  Reflexion, Computer software maintenance},
references={Zweben, S.H., Edwards, S.H., Weide, B.W., Hollingsworth, J.E., The effects of layering and encapsulation on software development cost and quality (1995) IEEE Transactions on Software Engineering, 3 (21), pp. 200-208; Szyperski, C., Component technology - What, where and how? (2003) International Conference on Software Engineering, pp. 684-693; Cheesman, J., Daniels, J., (2001) UML Components: A Simple Process for Specifying Component-based Software, , Addison-Wesley: Reading, MA; Aldrich, J., Chambers, C., Notkin, D., Archjava: Connecting software architecture to implementation (2002) International Conference on Software Engineering, pp. 187-197; Koschke, R., (2000), pp. 49-63. , Atomic architectural component recovery for program understanding and evolution. PhD Thesis, Institute for Computer Science, University of Stuttgart; Kniesel, G., (2002) First Workshop on Unanticipated Software Evolution, ECOOP; Chikofsky, E.J., Cross, J.U., Reverse engineering and design recovery: A taxonomy (1990) IEEE Software, 7 (1), pp. 13-17; Seacord, R.C., Plakosh, D., Lewis, G.A., (2003) Modernizing Legacy Systems, , Addison-Wesley: Reading MA; Johnson PD. Mining legacy systems for business components: An architecture for an integrated toolkit. Proceedings of the 26th International Computer Software and Applications Conference, 2002; Choi, S.C., Scacchi, W., Extracting and restructuring the design of large systems (1990) IEEE Computer, 1 (7), pp. 66-71; Biggerstaff, T.J., Design recovery for maintenance and reuse (1989) IEEE Computer, 7 (22), pp. 36-49; Doval, D., Mancordis, S., Mitchell, B.S., Automatic clustering of software systems using a genetic algorithm (1999) Proceedings of the International Conference on Software Tools and Engineering Practice; Mitchell, B.S., Mancoridis, S., Traverso, M., Search based reverse engineering (2002) Proceedings of the 14th International Conference on Software Engineering and Knowledge Engineering, pp. 431-438; Ogando, R.M., Yau, S.S., Liu, S.S., An object finder for program structure understanding in software maintenance (1994) Journal of Software Maintenance: Research and Practice, 5 (6), pp. 262-283; Lindig, C., Snelting, G., Assessing modular structure of legacy code based on mathematical concept analysis (1997) International Conference on Software Engineering, pp. 349-359; Gall, H., Klösch, R., Finding objects in procedural programs: An alternate approach (1995) Proceedings of Second Working Conference on Reverse Engineering, pp. 208-216; Patel, S., Chu, W., Baxter, R., A measure for composite module cohesion (1992) Proceedings of the 14th International Conference on Software Engineering, pp. 38-48; Valasareddi, R.R., Carver, D.L., A graph-based object identification process for procedural programs (1998) Proceedings of the Working Conference on Reverse Engineering, p. 50; Yeh, A.S., Harris, D.R., Reubenstein, H.B., Recovering abstract data types and object instances from a conventional procedure language (1995) Working Conference on Reverse Engineering, pp. 227-236; Kazman, R., Carrière, S.J., Playing detective: Reconstructing software architecture from available evidence (1997) CMU/SEI-97TR-010, ESC-TR-97-010, The Software Engineering Institute at Carnegie Mellon University, pp. 1-33; Murphy, G.C., Notkin, D., Reengineering with reflexion Models: A case study (1997) IEEE Computer, 2 (17), pp. 29-36; Hutchens, D.H., Basili, V.R., System structure analysis: Clustering with data bindings (1985) IEEE Transactions on Software Engineering, 8. , SE-11:749-757; Girard, J.-F., Koschke, R., Finding components in a hierarchy of modules: A step towards architectural understanding (1997) International Conference on Software Maintenance, pp. 58-65; Chiricota, Y., Jourdan, F., Melancon, G., Software components capture using graph clustering (2003) International Workshop on Program Comprehension, pp. 217-227; Schwanke, R.W., An intelligent tool for reengineering software modularity (1991) International Conference on Software Engineering, pp. 83-92; Cimitile, A., Visaggio, G., Software salvaging and the call dominance tree (1995) Journal of Systems Software, 28 (2), pp. 117-127; Shaft, T.M., (1992), pp. 213-269. , The role of application domain knowledge in computer program comprehension and enhancement. Doctoral Dissertation, Pennsylvania State University, University Park PA; Murphy, G.C., Notkin, D., Sullivan, K., Software reflexion models: Bridging the gap between source and high-level models (1995) Symposium on the Foundations of Software Engineering, pp. 18-28; Koschke, R., Simon, D., Hierarchical reflexion models (2003) Working Conference on Reverse Engineering; Robillard, M.P., Murphy, G.C., Concern graphs: Finding and describing concerns using structural program dependencies (2002) International Conference on Software Engineering; Chung, W., Harrison, W., Kruskal, V., Ossher, H., Stanley, J., Sutton, M., Tarr, P., Working with implicit concerns in the concern manipulation environment (2005) Linking Aspect Technology and Evolution Co-hosted with Aspect Orientated Software Development; Sefika, M., Sane, A., Campbell, R.H., Monitoring compliance of a software system with its high-level design models (1996) Proceedings of the 18th International Conference on Software Engineering, pp. 387-396; Bundy, A., Blewitt, A., Stark, I., Automatic verification of Java design patterns (2001) Proceedings of 16th International Conference on Automated Software Engineering; Pohl, K., Bockle, G., van der Linden, F., Software Product Line Engineering: Foundations, Principles and Techniques, , Springer: Berlin. ISBN: 978-3540243724; Christi, A., Koschke, R., Storey, M.-A.D., Equipping the reflexion method with automated clustering (2005) Working Conference on Reverse Engineering, pp. 89-98; Hassan, A., Holt, R., Using development history sticky notes to understand software architecture (2004) Proceedings of the 12th International Workshop on Program Comprehension, pp. 183-193; Piaget, J., (1985) The Equilibration of Cognitive Structures: The Central Problem of Intellectual Development, , University of Chicago Press: Chicago; Strike, K., Posner, G., A conceptual change view of learning and understanding (1992) Cognitive Structure and Conceptual Change, pp. 211-232. , West L, Hamilton R eds, Academic Press: London; Scientific Method, , http://servercc.oakton.edu/~billtong/eas100/scientificmethod.htm, last accessed 16/10/07; Blackwell, A., Green, T., Notational systems-The cognitive dimensions of notations framework (2003) HCI Models, Theories, and Frameworks: Toward a Multidisciplinary Science, pp. 103-135. , Carroll JM ed, Morgan Kaufmann: San Francisco; Le Gear, A., Buckley, J., Reengineering towards components with 'reconnexion.' (2005) ESEC/FSE Doctoral Symposium; Seaman, C., Qualitative methods in empirical studies of software engineering (1999) IEEE Transactions on Software Engineering, 1 (25), pp. 557-572; Oates, B.J., (2006) Researching Information Systems and Computing, , Sage: Beverley Hills CA; Ko, A.J., DeLine, R., Venolia, G., Information needs in collocated software development teams (2007) International Conference on Software Engineering (ICSE), pp. 344-353; Seaman, C.B., Basili, V.R., Communication and organization: An empirical study of discussion in inspection meetings (1998) IEEE Transactions on Software Engineering, 24 (7), pp. 559-572; O'Brien, M.P., (2007) Evolving, pp. 67-73. , a model of the information-seeking behaviour of industrial programmers. PhD Thesis, University of Limerick; Von Mayrhauser, A., Vans, A.M., Identification of dynamic comprehension processes during large scale maintenance (1996) IEEE Transactions on Software Engineering, 22 (6), pp. 424-437; Le Gear, A., Buckley, J., Reengineering towards components using 'reconnexion (2005), pp. 370-373; Szyperski C. Component Software: beyond object Oriented Programming. ACM Press, Addison-Wesley: New York NY, Reading MA, 1998; jRMTool Reflexion Modelling eclipse plug-in. http://www.cs.ubc.ca/murphy/ jRMTool/doc/ (21/12/2003); Eclipse IDE, , http://www.eclipse.com, Home last accessed 12/09/06; Wendehals, L., Improving design pattern instance recognition by dynamic analysis Proceedings of WODA: The Workshop on Dynamic Analysis, 2003, , http://www.cs.nmsu.edu/~jcook/woda2003, last accessed 16/10/07; Basili, V.R., The role of experimentation in software engineering: Past, current and future (1996) Keynote Address in 18th International Conference on Software Engineering; Transfer Object, , http://java.sun.com/blueprints/corej2eepatterns/Patterns/TransferObject.html, last accessed 12/09/07; Data Transfer Object, , http://en.wikipedia.org/wiki/Data_Transfer_Object, last accessed 12/09/07; Transfer Object Ass, , http://java.sun.com/blueprints/corej2eepatterns/Patterns/TransferObjectAssembler.html, last accessed 12/09/07; Ericsson, K., Simon, H., Protocol Analysis-Revised Edition (1993) Verbal Reports as Data, , MIT Press: Cambridge, MA; Russo, J., Johnson, E., Stephens, D., The validity of verbal protocols (1989) Memory & Cognition, 17, pp. 759-769; O'Brien, M.P., Buckley, J., Exton, C., Empirically studying software practitioners-Bridging the gap between theory and practice (2005) International Conference on Software Maintenance, pp. 433-442; View Helper, , http://java.sun.com/blueprints/corej2eepatterns/Patterns/ViewHelper.html, last accessed 12/09/07; Stephens, W., Myers, G., Constantine, L., Structured design (1974) IBM Systems Journal, 13 (2), pp. 56-65; Yourdon, E., Constantine, L.L., (1979) Structured Design, , Prentice-Hall: Englewood Cliffs, NJ; Fenton, N.E., Pfleeger, S.L., (1997) Software Metrics: A Rigorous and Practical Approach, , Thompson Computer Press: Boston, MA; Wilde, N., Scully, M.C., Software reconnaissance: Mapping program features to code (1995) Journal of Software Maintenance: Research and Practice, 1 (7), pp. 49-62; Le Gear, A., Component reconnexion, , PhD Thesis, University of Limerick; Le Gear, A., Buckley, J., Collins, J.J., O'Dea, K., Software reconnexion: Understanding software using a variation on software reconnaissance and reflexion modelling (2005) International Symposium on Empirical Software Engineering; Le Gear, A., Buckley, J., Mcilwaine, C., Exercising control over the design of evolving software systems using an inverse application of reflexion modelling (2006) Proceedings of CASCON Dublin Symposium; Sim, S.E., Holt, R., The ramp-up problem in software projects: A case study of how software immigrants naturalize (1998) Proceedings of the 20th International Conference on Software Engineering, pp. 361-370; Exton, C., Kolling, M., Concurrency, objects and visualisation (2000) Proceedings of ACM SIGCSE Fourth Australian Computing Education Conference (ACE2000), pp. 109-115. , December; Perry, D., Porter, A., Votta, L., A primer on empirical studies (1997) Tutorial Presented at the International Conference on Software Maintenance; Bauhaus Reengineering Toolset, , http://www.bauhaus-stuttgart.de/bauhaus, last accessed 15/03/ 2006},
correspondence_address1={Buckley, J.; Department of Computer Science and Information Systems, University of Limerick, Limerick, Ireland; email: jim.buckley@ul.ie},
issn={1532060X},
coden={JSMEC},
language={English},
abbrev_source_title={J. Software Maint. Evol.},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Quante2007219,
author={Quante, J. and Koschke, R.},
title={Dynamic protocol recovery},
journal={Proceedings - Working Conference on Reverse Engineering, WCRE},
year={2007},
pages={219-228},
doi={10.1109/WCRE.2007.24},
art_number={4400168},
note={cited By 26; Conference of 14th Working Conference on Reverse Engineering, WCRE 2007 ; Conference Date: 28 October 2007 Through 31 October 2007;  Conference Code:72672},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-51149108945&doi=10.1109%2fWCRE.2007.24&partnerID=40&md5=66ba97214ca824a55167ef820b74e93e},
affiliation={University of Bremen, Germany},
abstract={Dynamic protocol recovery tries to recover a component's sequencing constraints by means of dynamic analysis. This problem has been tackled by several automaton learning approaches in the past. These approaches are based on the sequence of component method invocations only. We introduce a new dynamic protocol recovery technique based on object process graphs. These graphs contain information about loops and the context in which methods are being called. We describe the transformation of a set of these graphs to a protocol automaton. The additional input, compared to the sole sequence of method calls, results in a more detailed protocol. In a case study, we compare the resulting protocol automata of our approach to those of several existing automaton learning approaches.},
keywords={Computer networks;  Graph theory;  Reengineering;  Reverse engineering;  Robots;  Translation (languages), Learning approaches;  Protocol recovery, Automata theory},
references={Ammons, G., Bodik, R., Larus, J.R., Mining specifications (2002) Proc. 29th Symp. on Principles of Prog. Languages (POPL), pp. 4-16; Angluin, D., Inference of reversible languages (1982) Journal of the ACM, 29 (3), pp. 741-765; Biermann, A.W., Feldman, J.A., On the synthesis of finite-state machines from samples of their behaviour (1972) IEEE Trans. on Comp, 21, pp. 591-597; Eisenbarth, T., Koschke, R., Vogel, G., Static object trace extraction for programs with pointers (2005) Journal of Systems and Software, 77 (3), pp. 263-284. , Sep; Engler, D., Chelf, B., Chou, A., Hallem, S., Checking system rules using system-specific, programmerwritten compiler extensions (2000) Proc. 4th Symp. on Operating System Design and Impl, pp. 1-16; Haak, D., (2004) Werkzeuggestützte Herleitung von Protokollen, , Diploma thesis, Univ. Stuttgart, CS; Heiber, T., (2000) Semi-automatic protocol recovery, , Diploma thesis, Univ. Stuttgart, Computer Science; Hopcroft, J.E., Motwani, R., Ullman, J.D., (2001) Introduction to Automata Theory, Languages, and Computation, , Addison Wesley, second edition; Levenshtein, V.I., Binary codes capable of correcting deletions, insertions and reversals (1966) Soviet Physics Doklady, 10 (8), pp. 707-710. , Feb; Lo, D., Khoo, S.-C., QUARK: Empirical assessment of automaton-based specification miners (2006) Proc. of 13th WCRE, pp. 51-60; Lo, D., Khoo, S.-C., SMArTIC: Towards building an accurate, robust and scalable specification miner (2006) Proc. of 14th FSE, pp. 265-275; Olender, K.M., Osterweil, L.J., Interprocedural static analysis of sequencing constraints (1992) ACM Transactions on Software Engineering and Methodology, 1 (1), pp. 21-52. , Jan; Quante, J., Koschke, R., Dynamic object process graphs (2006) Proc. of 10th CSMR, pp. 81-90; Quante, J., Koschke, R., Dynamic object process graphs (2007) Journal of Systems and Software, , Accepted for publication; Raman, A., Patrick, J., The sk-strings method for inferring PFSA (1997) Proc. Workshop Automata Induction, Gramm. Inference and Lang. Acquisition; Reiss, S.P., Renieris, M., Encoding program executions (2001) Proc. of 23rd ICSE, pp. 221-230; Richetin, M., Vernadet, F., Regular inference for syntactic pattern recognition: A case study (1984) Proc. 7th Intl. Conf. on Pattern Rec, pp. 1370-1372; Salah, M., Denton, T., Mancoridis, S., Shokoufandeh, A., Vokolos, F.I., Scenariographer: A tool for reverse engineering class usage scenarios from method invocation sequences (2005) Proc. of ICSM, pp. 155-164; Sekar, R., Bendre, M., Dhurjati, D., Bollineni, P., A fast automaton-based method for detecting anomalous program behaviors (2001) SP '01: Proc. of Symposium on Security and Privacy, pp. 144-155; Whaley, J., Martin, M.C., Lam, M.S., Automatic extraction of object-oriented component interfaces (2002) Proc. of Symposium on Software Testing and Analysis, pp. 218-228; Xie, T., Notkin, D., Automatic extraction of sliced object state machines for component interfaces (2004) Proc. 3rd Workshop on Specification and Verification of Component-Based Systems, pp. 39-46},
correspondence_address1={Quante, J.; University of BremenGermany; email: quante@informatik.uni-bremen.de},
sponsors={Reengineering Forum},
address={Vancouver, BC},
issn={10951350},
isbn={0769530346; 9780769530345},
language={English},
abbrev_source_title={Proc. Working Conf. Rev. Eng. WCRE},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Binkley2007797,
author={Binkley, D. and Koschke, R. and Mancoridis, S.},
title={Guest editors' introduction to the special section from the International Conference on Software Maintenance and Evolution},
journal={IEEE Transactions on Software Engineering},
year={2007},
volume={33},
number={12},
pages={797},
doi={10.1109/TSE.2007.70765},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-36349016022&doi=10.1109%2fTSE.2007.70765&partnerID=40&md5=75e2bbdcdec525e6218cc63d127737d0},
affiliation={Computer Science Department, Loyola College in Maryland, 4501 North Charles Street, Baltimore, MD 21210-2699, United States; Universität Bremen, Fachbereich 03, 28334 Bremen, Germany; Department of Computer Science, College of Engineering, Drexel University, 3141 Chestnut Street, Philadelphia, PA 19104, United States},
author_keywords={Maintenance engineering;  Meetings;  Software maintenance;  Special issues and sections},
funding_details={National Science FoundationNational Science Foundation, NSF},
funding_details={U.S. Department of JusticeU.S. Department of Justice, DOJ},
funding_details={Defense Advanced Research Projects AgencyDefense Advanced Research Projects Agency, DARPA},
funding_details={National Science FoundationNational Science Foundation, NSF},
funding_details={U.S. Department of DefenseU.S. Department of Defense, DOD},
funding_text 1={David Binkley received the doctorate degree from the University of Wisconsin in 1991, at which time he joined the faculty at Loyola College in Maryland, where he is a professor of computer science at Loyola College in Mary-land. From 1993 to 2000, Dr. Binkley worked as a faculty researcher at the National Institute of Standards and Technology (NIST). During this time, he was part of the team that worked on the C program slicer Unravel and also considered the problems of creating high integrity (safety critical) software systems and software engineering technology transfer. Dr. Binkley’s present US National Science Foundation funded research focuses on improving semantics-base software engineering tools. Recently, he has also been involved in a seven school collaborative project aimed at increasing the representation of undergraduate women and minorities in computer science. In 2006, he cochaired the International Conference on Software maintenance and, in 2002, he was the general chair of the International Workshop on Source Code Analysis and Manipulation and a year later served as the program cochair for that conference.},
funding_text 2={Spiros Mancoridis received the PhD dgree in computer science from the University of Toronto in 1996 and then joined Drexel University as an assistant professor. He was promoted to associ-ate professor with tenure in 2001 and to full professor in 2007. His research area is software engineering with an emphasis on reverse engineering, code analysis, software security, and software forensics. In 1998, he was re-ceived a CAREER Award from the US National Science Foundation. Since then he has received numerous grants from DARPA, NSF, Department of Justice, Department of Defense, Sun Microsystems, AT&T Labs Research, and Lockheed Martin. Professor Mancoridis was the general chair of the IEEE International Conference on Software Maintenance in 2006, the program committee cochair for the Genetic and Evolutionary Computing Conference in 2005, and was on the program committees of several IEEE and AAAI conferences, including WCRE, CSMR, ICSM, ICPC, SCAM, and GECCO. He is a senior member of the IEEE. He is the founder and director of the Drexel University Software Engineering Research Group and has been the undergraduate and graduate director of the Software Engineering degree programs since 2001. He has authored more than 55 scientific publications and has graduated two PhD students and numerous MSc students.},
correspondence_address1={Binkley, D.; Computer Science Department, Loyola College in Maryland, 4501 North Charles Street, Baltimore, MD 21210-2699, United States; email: binkley@cs.loyola.edu},
issn={00985589},
coden={IESED},
language={English},
abbrev_source_title={IEEE Trans Software Eng},
document_type={Editorial},
source={Scopus},
}

@CONFERENCE{Frenzel2007160,
author={Frenzel, P. and Koschke, R. and Breu, A.P.J. and Angstmann, K.},
title={Extending the reflexion method for consolidating software variants into product lines},
journal={Proceedings - Working Conference on Reverse Engineering, WCRE},
year={2007},
pages={160-169},
doi={10.1109/WCRE.2007.28},
art_number={4400162},
note={cited By 32; Conference of 14th Working Conference on Reverse Engineering, WCRE 2007 ; Conference Date: 28 October 2007 Through 31 October 2007;  Conference Code:72672},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-51149121673&doi=10.1109%2fWCRE.2007.28&partnerID=40&md5=ab442bd46dbf4a0ed369b7274a4a001b},
affiliation={University of Bremen, Germany; Robert Bosch GmbH, Germany},
abstract={Software variants emerge from ad-hoc copying in-the-large with adaptations to a specific context. As the number of variants increases, maintaining such software variants becomes more and more difficult and expensive. In contrast to such ad-hoc reuse, software product lines offer organized ways of reuse, taking advantage of similarities of different products. To re-gain control, software variants may be consolidated as organized software product lines. In this paper, we describe a method and supporting tools to compare software variants at the architectural level extending the reflexion method to software variants. Murphy's reflexion method allows one to reconstruct the module view, a static architectural view describing the static components, their interfaces and dependencies and their grouping as layers and subsystems. The method consists of the specification of the module view and the mapping of implementation components onto the module view. An automatic analysis determines differences between the module view and its implementation. We extend the reflexion method from single systems to software variants. Because software variants share a very large amount of code, we use clone detection techniques to identify corresponding implementation components between variants. The correspondence is then used to transfer as much of the mapping for the analyzed variants to the next variant to be analyzed.},
keywords={Ad hoc networks;  Cloning;  Codes (symbols);  Conformal mapping;  Curve fitting;  Reengineering;  Reverse engineering, Architectural views;  Automatic analysis;  Clone detection;  Software Product Lines, Computer software reusability},
references={Baker, B.S., On Finding Duplication and Near-Duplication in Large Software Systems (1995) Second Working Conference on Reverse Engineering, pp. 86-95. , L. Wills, P. Newcomb, and E. Chikofsky, editors, Los Alamitos, California, July, IEEE Computer Society Press; E. Balazinska, M.and Merlo, B. Dagenais, M.and Lague, and K. Kontogiannis. Advanced clone-analysis to support object-oriented system refactoring. In Working Conference on Reverse Engineering, pages 98-107. IEEE Computer Society Press, 2000; Bayer, J., Flege, O., Knauber, P., Laqua, R., Muthig, D., Schmid, K., Widen, T., DeBaud, J.-M., Pulse: A methodology to develop software product lines (1999) Proceedings of the 1999 symposium on Software reusability, pp. 122-131. , ACM Press; Bayer, J., Girard, J.-F., Würthner, M., DeBaud, J.-M., Apel, M., Transitioning legacy assets to a product line architecture (1999) Proceedings of the 7th European software engineering conference held jointly with the 7th ACM SIGSOFT international symposium on Foundations of software engineering, pp. 446-463. , Springer-Verlag; Bergey, J., O'Brien, L., Smith, D., Using options analysis for reengineering (OAR) for mining components for a product line (2002) Springer Lecture Notes in Computer Science, 2379, pp. 316-327. , Proceedings of Second Software Product Line Conference, Aug; Christl, A., Koschke, R., Storey, M.-A., Equipping the reflexion method with automated clustering (2005) Working Conference on Reverse Engineering, pp. 89-98. , IEEE Computer Society Press, Nov; Christl, A., Koschke, R., Storey, M.-A., Automated clustering to support the reflexion method (2007) Journal Information and Software Technology, 49, pp. 255-274. , Mar; Clements, P., Northrop, L.M., (2001) Software Product Lines : Practices and Patterns, , Professional. Addison-Wesley; Eisenbarth, T., Koschke, R., Simon, D., Locating features in source code (2003) IEEE Computer Society Transactions on Software Engineering, 29, pp. 210-224; Faust, D., Verhoef, C., Software product line migration and deployment (2003) Journal of Software Practice and Experiences, 33 (10), p. 933955. , Aug; Gomaa, H., (2005) Designing Software Product Lines with UML - From Use Cases to Pattern-Based Software Architectures, , Addison-Wesley; Hofmeister, C., Nord, R., Soni, D., Applied Software Architecture (2000) Object Technology Series, , Addison Wesley; Kolb, R., Muthig, D., Patzke, T., Yamauchi, K., A case study in refactoring a legacy component for reuse in a product line (2005) International Conference on Software Maintenance, pp. 369-378. , IEEE Computer Society Press, March-April; Kolb, R., Muthig, D., Patzke, T., Yamauchi, K., Refactoring a legacy component for reuse in a software product line: A case study (2006) Journal of Software Maintenance and Evolution: Research and Practice, 18 (2), pp. 109-132. , March-April; Koschke, R., Rekonstruktion von Software-Architekturen: Blickwinkel, Sichten, Ansichten und Aussichten (2005) Informatik - Forschung und Entwicklung, Springer Verlag, 19 (3). , Apr; R. Koschke. Survey of research on software clones. In R. Koschke, E. Merlo, and A. Walenstein, editors, Duplication, Redundancy, and Similarity in Software, number 06301 in Dagstuhl Seminar Proceedings. Internationales Begegnungs- und Forschungszentrum fuer Informatik (IBFI), Schloss Dagstuhl, Germany, 2007. 〈http://drops.dagstuhl.de/opus/volltexte/2007/962〉 [date of citation: 2007-01-01]; Koschke, R., Simon, D., Hierarchical reflexion models (2003) Working Conference on Reverse Engineering, pp. 36-45. , IEEE Computer Society Press, Nov; Kruchten, P., The 4+1 view model of architecture (1995) IEEE Software, 12 (6), pp. 42-50. , Nov; Maccari, A., Riva, C., Architectural evolution of legacy product families (2001) Proceedings of the Fourth International Workshop on Product Family Engineering (PFE-4), pp. 63-68; Murphy, G.C., Notkin, D., Reengineering with reflexion models: A case study (1997) IEEE Computer, 30 (8), pp. 29-36. , Aug; Nikkei, (1998) Computer, 19, pp. 161-169. , Reprinted in, January; Murphy, G.C., Notkin, D., Sullivan, K., Software reflexion models: Bridging the gap between source and high-level models (1995) Proceedings of the Third ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 18-28. , New York, NY, ACM Press; Murphy, G.C., Notkin, D., Sullivan, K.J., Software reflexion models: Bridging the gap between design and implementation (2001) IEEE Computer Society Transactions on Software Engineering, 27 (4), pp. 364-380. , Apr; Pollet, D., Ducasse, S., Poyet, L., Alloui, I., Verjus, S.C.H., Towards a process-oriented software architecture reconstruction taxonomy (2007) European Conference on Software Maintenance and Reengineering, pp. 137-148. , IEEE Computer Society Press; Riva, C., (2004) View-based Software Architecture Reconstruction, , Ph. d. dissertation, Vienna University of Technology, Vienna, Austria, Oct; Stoermer, C., O'Brien, L., MAP - mining architectures for product line evaluations (2001) IEEE/IFIP Working Conference on Software Architecture, pp. 35-44. , IEEE Computer Society Press, Aug; van der Linden, F., Software product families in europe. the esaps and cafe project (2002) IEEE Software, 19 (4), pp. 41-49. , July/August; Xing, Z., Stroulia, E., Understanding phases and styles of object-oriented systems' evolution (2004) International Conference on Software Maintenance, pp. 242-251. , IEEE Computer Society Press},
correspondence_address1={Frenzel, P.; University of BremenGermany; email: saint@informatik.uni-bremen.de},
sponsors={Reengineering Forum},
address={Vancouver, BC},
issn={10951350},
isbn={0769530346; 9780769530345},
language={English},
abbrev_source_title={Proc. Working Conf. Rev. Eng. WCRE},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Bellon2007577,
author={Bellon, S. and Koschke, R. and Antoniol, G. and Krinke, J. and Merlo, E.},
title={Comparison and evaluation of clone detection tools},
journal={IEEE Transactions on Software Engineering},
year={2007},
volume={33},
number={9},
pages={577-591},
doi={10.1109/TSE.2007.70725},
note={cited By 415},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-34548228440&doi=10.1109%2fTSE.2007.70725&partnerID=40&md5=b9ead3024d446b6d6d20c2b9e59b75b0},
affiliation={Axivion GmbH, Nobelstr. 15, 70569 Stuttgart, Germany; Universität Bremen, Fachbereich 03, 28334 Bremen, Germany; Département de Génie Informatique, École Polytechnique de Montréal, 2500, chemin de Polytechnique, Montréal, QC H3T 1J4, Canada; Fern-Universität in Hagen, Universitätsstr. 27, 58097 Hagen, Germany; Department of Computer Engineering, Ecole Polytechnique of Montreal, PO Box 6079, Montreal, QC H3C 3A7, Canada},
abstract={Many techniques for detecting duplicated source code (software clones) have been proposed in the past. However, it is not yet clear how these techniques compare in terms of recall and precision as well as space and time requirements. This paper presents an experiment that evaluates six clone detectors based on eight large C and Java programs (altogether almost 850 KLOC). Their clone candidates were evaluated by one of the authors as independent third party. The selected techniques cover the whole spectrum of the state-of-the-art in clone detection. The techniques work on text, lexical and syntactic information, software metrics, and program dependency graphs. © 2007 IEEE.},
author_keywords={Duplicated code;  Redundant code;  Software clones},
keywords={C (programming language);  Codes (symbols);  Java programming language;  Redundancy, Clone detection tools;  Duplicated code;  Redundant code;  Software clones, Computer aided software engineering},
references={Baker, B.S., On Finding Duplication and Near-Duplication in Large Software Systems (1995) Proc. Second Working Conf. Reverse Eng, pp. 86-95. , L. Wills, P. Newcomb, and E. Chikofsky, eds, pp, July; Kontogiannis, K., Mori, R.D., Merlo, E., Galler, M., Bernstein, M., Pattern Matching for Clone and Concept Detection (1996) Automated Software Eng, 3 (1-2), pp. 79-108. , June; Laguë, B., Proulx, D., Mayrand, J., Merlo, E.M., Hudepohl, J., Assessing the Benefits of Incorporating Function Clone Detection in a Development Process (1997) Proc. Int'l Conf. Software Maintenance, pp. 314-321; Ducasse, S., Rieger, M., Demeyer, S., A Language Independent Approach for Detecting Duplicated Code (1999) Proc. Int'l Conf. Software Maintenance (ICSM '99); Johnson, J.H., Visualizing Textual Redundancy in Legacy Source (1994) Proc. Int'l Conf. Computer Science and Software Eng. (CASCON '94), p. 32; Baker, B.S., A Program for Identifying Duplicated Code (1992) Proc. 24th Symp. Interface, pp. 49-57. , Mar; Baker, B.S., Parameterized Pattern Matching: Algorithms and Applications (1996) J. Computer System Science, 52 (1), pp. 28-42. , Feb; Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., Clone Detection Using (1998) Proc. Int'l Conf. Software Maintenance, , Abstract Syntax Trees; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A Multi-Linguistic Token-Based Code Clone Detection System for Large Scale Source Code (2002) IEEE Trans. Software Eng, 28 (7), pp. 654-670. , July; Krinke, J., Identifying Similar Code with Program Dependence Graphs (2001) Proc. Eighth Working Conf. Reverse Eng. (WCRE' 01); Komondoor, R., Horwitz, S., Using Slicing to Identify Duplication in Source Code (2001) Proc. Int'l Symp. Static Analysis, pp. 40-56. , July; Mayrand, J., Leblanc, C., Merlo, E.M., Experiment on the Automatic Detection of Function Clones in a Software System Using Metrics (1996) Proc. Int'l Conf. Software Maintenance, pp. 244-254. , Nov; Johnson, J.H., Identifying Redundancy in Source Code Using Fingerprints (1993) Proc. Int'l Conf. Computer Science and Software Eng. (CASCON '93), pp. 171-183; Karp, R.M., Rabin, M.O., Efficient Randomized Pattern-Matching Algorithms (1987) IBM J. Research and Development, 31 (2), pp. 249-260. , Mar; McCreight, E., A Space-Economical Suffix Tree Construction Algorithm (1976) J. ACM, 32 (2), pp. 262-272; Cordy, J.R., Dean, T.R., Synytskyy, N., Practical Language-Independent Detection of Near-Miss Clones (2004) Proc. Int'l Conf. Computer Science and Software Eng. (CASCON '04), pp. 1-12; Gitchell, D., Tran, N., Sim: A Utility for Detecting Similarity in Computer Programs (1999) Proc. 30th SIGCSE Technical Symp. Computer Science Education, pp. 266-270; Higo, Y., Ueda, Y., Kamiya, T., Kusumoto, S., Inoue, K., On Software Maintenance Process Improvement Based on Code Clone Analysis (2002) Proc. Int'l Conf. Product Focused Software Process Improvement, pp. 185-197; Kontogiannis, K., DeMori, R., Bernstein, M., Galler, M., Merlo, E., Pattern Matching for Design Concept Localization (1995) Proc. Second Working Conf. Reverse Eng., (WCRE '95), pp. 96-103. , July; G. DiLucca, M. DiPenta, and A. Fasolino, An Approach to Identify Duplicated Web Pages, Proc. Int'l Computer Software and Applications Conf, COMPSAC '02, pp. 481-486, 2002; Lanubile, F., Mallardo, T., Finding Function Clones in Web Applications (2003) Proc. Conf. Software Maintenance and Reeng, pp. 379-386; Yang, W., Identifying Syntactic Differences Between Two Programs (1991) Software - Practice and Experience, 21 (7), pp. 739-755. , July; Marcus, A., Maletic, J., Identification of High-Level Concept Clones in Source Code (2001) Proc. Int'l Conf. Automated Software Eng, pp. 107-114; Leitao, A.M., Detection of Redundant Code Using R2D2 (2003) Proc. Workshop Source Code Analysis and Manipulation, pp. 183-192; Wahler, V., Seipel, D., von Gudenberg, J.W., Fischer, G., Clone Detection in Source Code by Frequent Itemset Techniques (2004) Proc. Workshop Source Code Analysis and Manipulation, pp. 128-135; Li, Z., Lu, S., Myagmar, S., Zhou, Y., CP-Miner: A Tool for Finding Copy-Paste and Related Bugs in Operating System Code (2004) Operating System Design and Implementation, pp. 289-302; Cook, (2007), http://miller.emu.id.au/pmiller/software/cook; The Stuttgart Neuronal Network Simulator (2007), http://www-ra.informatik.uni-tuebingen.de; (2007), http://www.postgresql.org, PostgreSQL; Javadoc, http://javadoc.netbeans.org, 2007; Eclipse (2007), http://www.eclipse.org; Java 2 SDK (2007), http://java.sun.com; Bellon, S., Vergleich von Techniken zur Erkennung duplizierten Quellcodes, (1998), master's thesis no, Universität Stuttgart, Germany; Bellon, S., (2007) Detection of Software Clones - Tool Comparison Experiment, , http://www.bauhaus-stuttgart.de/clones; Ducasse, S., Nierstrasz, O., Demeyer, S., On the Effectiveness of Clone Detection by String Matching (2006) J. Software Maintenance and Evolution: Research and Practice, 18 (1), pp. 37-58. , Jan; Bailey, J., Burd, E., Evaluating Clone Detection Tools for Use during Preventative Maintenance (2002) Proc. Second IEEE Int'l Workshop Source Code Analysis and Manipulation (SCAM '02), pp. 36-43. , Oct; Prechelt, L., Malpohl, G., Philippsen, M., JPlag: Finding Plagiarisms among a Set of Programs (2000) technical report, , Univ. of Karlsruhe, Dept. of Informatics; Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local Algorithms for Document Fingerprinting (2003) Proc. SIGMOD Int'l Conf. Management of Data, pp. 76-85; Van Rysselberghe, F., Demeyer, S., Evaluating Clone Detection Techniques from a Refactoring Perspective (2004) Proc. Int'l Conf. Automated Software Eng; Koschke, R., Falke, R., Frenzel, P., Clone Detection Using Abstract Syntax Suffix Trees (2006) Proc. Working Conf. Reverse Eng; Bruntink, M., van Engelen, R., Tourwe, T., On the Use of Clone Detection for Identifying Crosscutting Concern Code (2005) IEEE Trans. Software Eng, 31 (10), pp. 804-818. , Oct; Kapser, C., Godfrey, M., Improved Tool Support for the Investigation of Duplication in Software (2005) Proc. Int'l Conf. Software Maintenance (ICSM '05), pp. 305-314; Walenstein, A., Jyoti, N., Li, J., Yang, Y., Lakhotia, A., Problems Creating Task-Relevant Clone Detection Reference Data (2003) Proc. Working Conf. Reverse Eng; Bellon, S., Vergleich von Techniken zur Erkennung Duplizierten Quellcodes, (2002), master's thesis, Univ. of Stuttgart, Germany, Sept},
correspondence_address1={Bellon, S.; Axivion GmbH, Nobelstr. 15, 70569 Stuttgart, Germany; email: bellon@axivion.com},
issn={00985589},
coden={IESED},
language={English},
abbrev_source_title={IEEE Trans Software Eng},
document_type={Article},
source={Scopus},
}

@ARTICLE{Christl2007255,
author={Christl, A. and Koschke, R. and Storey, M.-A.},
title={Automated clustering to support the reflexion method},
journal={Information and Software Technology},
year={2007},
volume={49},
number={3},
pages={255-274},
doi={10.1016/j.infsof.2006.10.015},
note={cited By 27},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-33846542044&doi=10.1016%2fj.infsof.2006.10.015&partnerID=40&md5=ef3d3a0ba85fa496ae9489375ffa669a},
affiliation={University of Stuttgart, Germany; University of Bremen, Germany; Department of Computer Science, University of Victoria, Eng. Comp. Science Building, Victoria, Canada},
abstract={A significant aspect in applying the Reflexion Method is the mapping of components found in the source code onto the conceptual components defined in the hypothesized architecture. To date, this mapping is established manually, which requires a lot of work for large software systems. In this paper, we present a new approach, in which clustering techniques are applied to support the user in the mapping activity. The result is a semi-automated mapping technique that accommodates the automatic clustering of the source model with the user's hypothesized knowledge about the system's architecture. This paper describes three case studies in which the semi-automated mapping technique, called HuGMe, has been applied successfully to extend a partial map of real-world software applications. In addition, the results of another case study from an earlier publication are summarized, which lead to comparable results. We evaluated the extended versions of two automatic software clustering techniques, namely, MQAttract and CountAttract, with oracle mappings. We closely study the influence of the degree of completeness of the existing mapping and other controlling variables of the technique to make reliable suggestions. Both clustering techniques were able to achieve a mapping quality where more than 90% of the automatic mapping decisions turned out to be correct. Moreover, the experiments indicate that the attraction function (CountAttract′) based on local coupling and cohesion is more suitable for semi-automated mapping than the approach MQAttract′ based on a global assessment of coupling and cohesion. © 2006 Elsevier B.V. All rights reserved.},
author_keywords={CountAttract;  HuGMe;  MQAttract;  Reflexion method;  Semi-automated mapping},
keywords={Codes (symbols);  Computer software;  Information retrieval;  Mapping, CountAttract;  HuGMe;  MQAttract;  Reflexion method;  Semi-automated mapping, Automata theory},
references={Hofmeister, C., Nord, R., Soni, D., (2000) Applied Software Architecture Object Technology Series, , Addison Wesley; Koschke, R., Simon, D., Hierarchical reflexion models (2003) WCRE, pp. 36-45. , IEEE Press; Christl, A., Koschke, R., Storey, M.-A., Equipping the reflexion method with automated clustering (2005) WCRE, pp. 89-98. , IEEE Press; Canfora, G., Cimitile, A., Lucia, A.D., Lucca, G.A.D., A case study of applying an eclectic approach to identify objects in code (1999) IWPC, pp. 136-143. , IEEE Press; Choi, S., Scacchi, W., Extracting and restructuring the design of large systems (1990) IEEE Software, 7 (1), pp. 66-71; Hutchens, D.H., Basili, V.R., System structure analysis: clustering with data bindings (1985) IEEE TSE, 11 (8), pp. 749-757; Liu, S.S., Wilde, N., Identifying objects in a conventional procedural language: an example of data design recovery (1990) ICSM, pp. 266-271. , IEEE Press; Livadas, P., Johnson, T., A new approach to finding objects in programs (1994) Journal Software Maintenance and Evolution, 6, pp. 249-260; Ogando, R.M., Yau, S.S., Wilde, N., An object finder for program structure understanding in software maintenance (1994) Journal Software Maintenance and Evolution, 6 (5), pp. 261-283; Patel, S., Chu, W., Baxter, R., A measure for composite module cohesion (1992) ICSE, pp. 38-48. , ACM Press; Sahraoui, H., Melo, W., Lounis, H., Dumont, F., Applying concept formation methods to object identification in procedural code (1997) ASE, pp. 210-218. , IEEE Press; Valasareddi, R.R., Carver, D.L., A graph-based object identification process for procedural programs (1998) WCRE, pp. 50-58. , IEEE Press; Yeh, A., Reubenstein, D.H.D.H., Recovering abstract data types and object instances from a conventional procedural language (1995) WCRE, pp. 227-236. , IEEE Press; Cimitile, A., Visaggio, G., Software salvaging and the call dominance tree (1995) Journal of Systems and Software, 28, pp. 117-127; Girard, J.-F., Koschke, R., Finding components in a hierarchy of modules: a step towards architectural understanding (1997) ICSM, pp. 58-65. , IEEE Press; Schwanke, R.W., Hanson, S.J., Using neural networks to modularize software (1994) Machine Learning, 15, pp. 136-168; Mancoridis, S., Mitchell, B., Rorres, C., Chen, Y., Gansner, E., Using automatic clustering to produce high-level system organizations of source code (1998) IWPC, pp. 45-53. , IEEE Press; Anquetil, N., Lethbridge, T., Extracting concepts from file names: a new file clustering criterion (1998) ICSE, pp. 84-93. , ACM Press; Girard, J.-F., Koschke, R., Schied, G., A metric-based approach to detect abstract data types and state encapsulations (1999) Journal Automated Software Engineering, 6 (4), pp. 82-89; Gall, H., Klösch, R., Finding objects in procedural programs: an alternative approach (1995) WCRE, pp. 208-217. , IEEE Press; Bojic, D., Velasevic, D., A use-case driven method of architecture recovery for program understanding and reuse reengineering (2000) CSMR, pp. 23-32. , IEEE Press; Maqbool, O., Babri, H.A., The weighted combined algorithm: a linkage algorithm for software clustering (2004) CSMR, pp. 15-24. , IEEE Press; Abreu, F., Pereira, G., Sousa, P., A coupling-guided cluster analysis approach to reengineer the modularity of object-oriented systems (2000) CSMR, pp. 13-22. , IEEE Press; Mahdavi, K., Harman, M., Hierons, R.M., A multiple hill climbing approach to software module clustering (2003) ICSM, pp. 315-324. , IEEE Press; Sartipi, K., Kontogiannis, K., A graph pattern matching approach to software architecture recovery (2001) ICSM, pp. 408-417. , IEEE Press; van Deursen, A., Kuipers, T., Identifying objects using cluster and concept analysis (1999) ICSE, pp. 246-255. , IEEE Press; Lindig, C., Snelting, G., Assessing modular structure of legacy code based on mathematical concept analysis (1997) ICSE, pp. 349-359. , IEEE Press; Siff, M., Reps, T., Identifying modules via concept analysis (1999) IEEE TSE, 25 (6), pp. 749-768; Tonella, P., Concept analysis for module restructuring (2001) IEEE TSE, 27 (4), pp. 351-363; de Oca, C.M., Carver, D.L., A visual representation model for software subsystem decomposition (1998) WCRE, pp. 231-240. , IEEE Press; Sartipi, K., Alborz: a query-based tool for software architecture recovery (2001) IWPC, pp. 115-117. , IEEE Press; Shokoufandeh, A., Mancoridis, S., Maycock, M., Applying spectral methods to software clustering (2002) WCRE, pp. 3-12. , IEEE Press; Mitchell, B.S., (2002) A Heuristic Search Approach to Solving the Software Clustering Problem, Dissertation, Drexel University, , Philadelphia, PA, United States; Wiggerts, T.A., Using clustering algorithms in legacy systems remodularization (1997) WCRE, pp. 33-43. , IEEE Press; },
correspondence_address1={Storey, M.-A.; Department of Computer Science, University of Victoria, Eng. Comp. Science Building, Victoria, Canada; email: mstorey@uvic.ca},
issn={09505849},
coden={ISOTE},
language={English},
abbrev_source_title={Inf Software Technol},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Quante200681,
author={Quante, J. and Koschke, R.},
title={Dynamic object process graphs},
journal={Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR},
year={2006},
pages={81-90},
doi={10.1109/CSMR.2006.24},
art_number={1602360},
note={cited By 11; Conference of 10th European Conference on Software Maintenance and Reengineering, CSMR 2006 ; Conference Date: 22 March 2006 Through 24 March 2006;  Conference Code:72393},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-34547707327&doi=10.1109%2fCSMR.2006.24&partnerID=40&md5=566a88732823e4554c0bcc686f3dc180},
affiliation={University of Bremen, Germany},
abstract={A trace is a record of the execution of a computer program, showing the sequence of operations executed. A trace may be obtained through static or dynamic analysis. An object trace contains only those operations that relate to a particular object. Traces can be very large for longer system executions. Moreover, they lack structure because they do not show the control dependencies and completely unfold loops. Object process graphs are a finite concise description of dynamic object traces. They offer the advantage of representing control dependencies and loops explicitly. This paper describes a new technique to extract object process graphs through dynamic analysis and discusses several applications. A case study is described that illustrates and demonstrates use and feasibility of the technique. © 2006 IEEE.},
keywords={Computer software maintenance;  Graph theory;  Maintenance;  Reengineering;  Static analysis;  Trace analysis, case studies;  Computer programs;  control dependencies;  European;  Process graphs;  System executions, Dynamic analysis},
references={Eisenbarth, T., Koschke, R., Simon, D., Locating features in source code (2003) IEEE TSE, 29 (3); Eisenbarth, T., Koschke, R., Vogel, G., Static object trace extraction for programs with pointers (2005) Journal of Systems and Software, 77 (3), pp. 263-284. , Sep; Ammons, J.L.G., Bodik, R., Mining specifications (2002) Proc. 29th symp. on Principles of prog. languages, , Portland, Oregon, USA; Gschwind, T., Oberleitner, J., Improving dynamic data analysis with aspect-oriented programming (2003) Proc. of the 7th CSMR, , IEEE Press, Mar; Hoare, C.A.R., (1985) Communicating Sequential Processes, , Prentice Hall International; Koschke, R., Girard, J.-F., An intermediate representation for reverse engineering analyses (1998) Working Conference on Reverse Engineering, pp. 241-250. , Hawai, USA, Oct; Koschke, R., Zhang, Y., Component recovery, protocol recovery and validation in bauhaus (2001) 3rd Reengineering Workshop, Bad Honnef, Germany, , Fachberichte Informatik, May; Moore, E., Gedanken-experiments on sequential circuits (1956) Automata Studies, , Shannon and McCarthy, editors, Princeton Univ. Press, Princeton, NJ; S. Shende. Profiling and tracing in linux. In Proc. Extreme Linux Workshop #2, USENIX, Monterey, CA, USA, 1999; Xie, T., Notkin, D., Automatic extraction of sliced object state machines for component interfaces (2004) Proc. 3rd Workshop on Specification and Verification of Component-Based Systems, pp. 39-46. , Newport Beach, CA, USA},
correspondence_address1={Quante, J.; University of BremenGermany; email: quante@informatik.uni-bremen.de},
address={Bari},
issn={15345351},
isbn={0769525369; 9780769525365},
language={English},
abbrev_source_title={Proc. Eur. Conf. Software Maint. Reeng.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koschke2006253,
author={Koschke, R. and Falke, R. and Frenzel, P.},
title={Clone detection using abstract syntax suffix trees},
journal={Proceedings - Working Conference on Reverse Engineering, WCRE},
year={2006},
pages={253-262},
doi={10.1109/WCRE.2006.18},
art_number={4023995},
note={cited By 180; Conference of 13th Working Conference on Reverse Engineering, WCRE 2006 ; Conference Date: 23 October 2006 Through 27 October 2006;  Conference Code:70335},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-34948876329&doi=10.1109%2fWCRE.2006.18&partnerID=40&md5=22f7a503d381da0b4100ef654f6f8251},
affiliation={University of Bremen, Germany},
abstract={Reusing software through copying and pasting is a continuous plague in software development despite the fact that it creates serious maintenance problems. Various techniques have been proposed to find duplicated redundant code (also known as software clones). A recent study has compared these techniques and shown that token-based clone detection based on suffix trees is extremely fast but yields clone candidates that are often no syntactic units. Current techniques based on abstract syntax trees-on the other hand-find syntactic clones but are considerably less efficient. This paper describes how we can make use of suffix trees to find clones in abstract syntax trees. This new approach is able to find syntactic clones in linear time and space. The paper reports the results of several large case studies in which we empirically compare the new technique to other techniques using the Bellon benchmark for clone detectors. © 2006 IEEE.},
keywords={Abstracting;  Computer software maintenance;  Software engineering, Bellon benchmark;  Clone detection;  Suffix trees;  Syntactic units, Binary trees},
references={Bailey, J., Burd, E., Evaluating Clone Detection Tools for Use during Preventative Maintenance (2002) SCAM; Baker, B.S., On Finding Duplication and Near-Duplication in Large Software Systems (1995) WCRE, , IEEE CS Press; Baker, B.S., Parameterized Pattern Matching: Algorithms and Applications (1996) JCSS; Baker, B.S., Giancarlo, R., Sparse dynamic programming for longest common subsequence from fragments (2002) Journal Algorithms, 42 (2), pp. 231-254. , Feb; Baxter, I.D., Yahin, A., Moura, L., Sant' Anna, M., Bier, L., Clone Detection Using Abstract Syntax Trees (1998) ICSM; Bellon, S., (2002) Vergleich von Techniken zur Erkennung duplizierten Quellcodes, , Master's thesis, University of Stuttgart, Germany; Cordy, J.R., Dean, T.R., Synytskyy, N., Practical language-independent detection of near-miss clones (2004) CASCON, , IBM Press; Di Lucca, G., Di Penta, M., Fasolino, A., An approach to identify duplicated web (2002) COMPSAC; Ducasse, S., Rieger, M., Demeyer, S., A Language Independent Approach for Detecting Duplicated Code (1999) ICSM; Gitchell, D., Tran, N., Sim: A utility for detecting similarity in computer programs (1999) SIGCSE, , ACM Press; Higo, Y., Ueda, Y., Kamiya, T., Kusumoto, S., Inoue, K., On software maintenance process improvement based on code clone analysis (2002) Lecture Notes In Computer Science, 2559. , International Conference on Product Focused Software Process Improvement, of, Springer; Johnson, J.H., Identifying redundancy in source code using fingerprints (1993) CASCON, , IBM Press; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A MultiLinguistic Token-based Code Clone Detection System for Large Scale Source Code (2002) IEEE Transactions on Software Engineering, 28 (7), pp. 654-670; Kapser, C., Godfrey, M., A taxonomy of clones in source code: The reengineers most wanted list (2003) WCRE, , IEEE CS Press; Kapser, C., Godfrey, M., (2005) Improved tool support for the investigation of duplication in software; Komondoor, R., Horwitz, S., Using slicing to identify duplication in source code (2001) Proc. Int. Symposium on Static Analysis; Kontogiannis, K., Mori, R.D., Merlo, E., Galler, M., Bernstein, M., Pattern matching for clone and concept detection (1996) Automated Software Engineering, 3 (1-2), pp. 79-108; Krinke, J., Identifying Similar Code with Program Dependence Graphs (2001) WCRE; Lague, B., Proulx, D., Mayrand, J., Merlo, E.M., Hudepohl, J., Assessing the benefits of incorporating function clone detection in a development process (1997) ICSM; Lanubile, F., Mallardo, T., Finding function clones in web applications (2003) CSMR; Leitao, A.M., Detection of redundant code using R2D2 (2003) SCAM, , IEEE CS Press; A. Marcus and J. Maletic. Identification of high-level concept clones in source code. In ASE, 2001; McCreight, E., A space-economical suffix tree construction algorithm (1976) Journal of the ACM, 32 (2), pp. 262-272; Rieger, M., (2005) Effective Clone Detection Without Language Barriers, , Dissertation, University of Bern, Switzerland; Ukkonen, E., On-line construction of suffix trees (1995) Algorithmica, 14 (3), pp. 249-260; Wahler, V., Seipel, D., von Gudenberg, J.W., Fischer, G., Clone detection in source code by frequent itemset techniques (2004) SCAM; Yang, W., Identifying syntactic differences between two programs (1991) Software-Practice and Experience, 21 (7), pp. 739-755},
correspondence_address1={Koschke, R.; University of BremenGermany; email: koschke@informatik.uni-bremen.de},
address={Benevento},
issn={10951350},
isbn={0769527191; 9780769527192},
language={English},
abbrev_source_title={Proc. Working Conf. Rev. Eng. WCRE},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Dean20061217,
author={Dean, T. and Harman, M. and Koschke, R. and Van De Vanter, M.},
title={Selected papers from the fourth Source Code Analysis and Manipulation (SCAM 2004) Workshop},
journal={Journal of Systems and Software},
year={2006},
volume={79},
number={9},
pages={1217-1218},
doi={10.1016/j.jss.2006.02.039},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-33748046833&doi=10.1016%2fj.jss.2006.02.039&partnerID=40&md5=f2b3c77f41793c3f57a634da3748abfd},
affiliation={King's College London, Department of Computer Science, London, WC2R 2LS, United Kingdom},
funding_text 1={The fifth SCAM workshop was held on the 30th of September and 1st of October 2005 in Budapest in co-location with the 21st IEEE International Conference on Software Maintenance (ICSM 05). There will be a special issue of the Science of Computer Programming Journal (SCP) containing extended, re-refereed versions of papers from SCAM 2005. Forty eight papers were submitted, of which 18 were accepted for publication, while there were 51 attendees. In addition to support from IEEE, the workshop was also sponsored by the ASTReNet (King’s College London), RainCode, University of Szeged, and Istituto Trentino di Cultura.},
correspondence_address1={Harman, M.; King's College London, Department of Computer Science, London, WC2R 2LS, United Kingdom; email: Mark.Harman@kcl.ac.uk},
issn={01641212},
coden={JSSOD},
language={English},
abbrev_source_title={J Syst Software},
document_type={Editorial},
source={Scopus},
}

@ARTICLE{Kazman2006199,
author={Kazman, R. and Van Deursen, A. and Koschke, R.},
title={Automated Software: Introduction},
journal={Automated Software Engineering},
year={2006},
volume={13},
number={2},
pages={199-200},
doi={10.1007/s10515-006-7735-7},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-33644897900&doi=10.1007%2fs10515-006-7735-7&partnerID=40&md5=652d1bd27ee1057133d86faccf64a6db},
issn={09288910},
coden={ASOEE},
language={English},
abbrev_source_title={Autom Software Eng},
document_type={Editorial},
source={Scopus},
}

@ARTICLE{Koschke2006171,
author={Koschke, R. and Canfora, G. and Czeranski, J.},
title={Revisiting the ΔiC approach to component recovery},
journal={Science of Computer Programming},
year={2006},
volume={60},
number={2},
pages={171-188},
doi={10.1016/j.scico.2005.10.004},
note={cited By 13},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-32144452762&doi=10.1016%2fj.scico.2005.10.004&partnerID=40&md5=4894fcf0c51a98685b8863a40bd871bf},
affiliation={University of Bremen, Fachbereich 03, 28334 Bremen, Germany; RCOST - Research Centre on Software Technology, University of Sannio, Palazzo Ex Poste, viale Traiano, 82199 Benevento, Italy; University of Stuttgart, Universitätsstraße 38, 70569 Stuttgart, Germany},
abstract={Component recovery supports program understanding, architecture recovery, and re-use. Among the best known techniques for detection of re-usable objects (related global variables and their accessor functions) is ΔIC (the improvement in internal connectivity). This paper re-visits the original approach and extends it in different ways. It describes a variant of ΔIC suitable for reverse engineering that omits the slicing step of the original approach. The underlying metric of ΔIC is extended toward types integrating ideas of the Internal Access technique such that abstract data types can also be detected. Furthermore, the connectivity metric of ΔIC is combined with a cohesion metric based on vertex connectivity. The new metrics and the new algorithm for reverse engineering are evaluated and compared to other techniques quantitatively. The new contributions of this paper over the conference paper are the analysis of the relation of the connectivity threshold and recall and precision, additional experiments in varying the ICVC (internal connectivity vertex connectivity) factor, and a detailed comparison of the complementarity of the various techniques. © 2005 Elsevier B.V. All rights reserved.},
author_keywords={Cohesion;  Component recovery;  Coupling;  Re-modularization;  Reverse engineering},
keywords={Algorithms;  Computer programming;  Metric system;  Object oriented programming, Cohesion;  Component recovery;  Coupling;  Re-modularization, Reverse engineering},
references={Abreu, F., Pereira, G., Sousa, P., A coupling-guided cluster analysis approach to reengineer the modularity of object-oriented systems (2000) Proceedings of the Conference on Software Maintenance and Reengineering, , IEEE Computer Society Press; Andritsos, P., Tzerpos, V., Software clustering based on information loss minimization (2003) Proceedings of the Working Conference on Reverse Engineering, pp. 334-343. , November IEEE Computer Society Press; Anquetil, N., Lethbridge, T., Extracting concepts from file names: A new file clustering criterion (1998) Proceedings of the International Conference on Software Engineering, pp. 84-93. , Association of Computing Machinery (ACM) Press; Anquetil, N., Fourrier, C., Lethbridge, T.C., Experiments with clustering as a software remodularization method (1998) Proceedings of the Working Conference on Reverse Engineering, pp. 235-255. , IEEE Computer Society Press; Bauer, M., Trifu, M., Architecture-aware adaptive clustering of oo systems (2004) Proceedings of the Conference on Software Maintenance and Reengineering, pp. 3-12. , March IEEE Computer Society Press; Belady, L.A., Evangelisti, C.J., System partitioning and its measure (1982) Journal of Systems and Software, 2 (1), pp. 23-29; Bojic, D., Velasevic, D., A use-case driven method of architecture recovery for program understanding and reuse reengineering (2000) Proceedings of the Conference on Software Maintenance and Reengineering, , IEEE Computer Society Press; Canfora, G., Cimitile, A., Munro, M., An improved algorithm for identifying objects in code (1996) Journal of Software Practice and Experience, 26 (1), pp. 25-48; Canfora, G., Cimitile, A., De Lucia, A., Di Lucca, G.A., A case study of applying an eclectic approach to identify objects in code (1999) Proceedings of the Workshop on Program Comprehension, pp. 136-143. , May IEEE Computer Society Press; Canfora, G., Cimitile, A., Munro, M., Taylor, C.J., Extracting abstract data types from C programs: A case study (1993) Proceedings of the International Conference on Software Maintenance, pp. 200-209. , September IEEE Computer Society Press; Canfora, G., Czeranski, J., Koschke, R., Revisiting the delta-ic approach to component recovery (2000) Proceedings of the Working Conference on Reverse Engineering, , IEEE Computer Society Press; Chiricota, Y., Jourdan, F., Melanon, G., Software components capture using graph clustering (2003) Proceedings of the Workshop on Program Comprehension, pp. 217-226. , May IEEE Computer Society Press; Choi, S.C., Scacchi, W., Extracting and restructuring the design of large systems (1990) IEEE Software, 7 (1), pp. 66-71; Cimitile, A., Visaggio, G., Software salvaging and the call dominance tree (1995) Journal of Systems Software, 28, pp. 117-127; Van Deursen, A., Kuipers, T., Identifying objects using cluster and concept analysis (1999) Proceedings of the International Conference on Software Engineering, pp. 246-255. , Association of Computing Machinery (ACM) Press; Doval, D., Mancoridis, S., Mitchel, B.S., Chen, Y., Gansner, E.R., Automatic clustering of software systems using a genetic algorithm (1999) Proceedings of the International Conference on Software Tools and Engineering Practice, , August; Even, S., (1979) Graph Algorithms, , Pitman Publishing Ltd; Gall, H., Klüsch, R., Finding objects in procedural programs: An alternative approach (1995) Proceedings of the Working Conference on Reverse Engineering, pp. 208-216. , July IEEE Computer Society Press; Gall, H., Klüsch, R., Weidl, J., Resolving uncertainties in object oriented re-architecturing of procedural code (1998) Proceedings of the 7th International Conference on Information Processing and Management of Uncertainty in Knowledge Based Systems, , July; Girard, J.-F., Koschke, R., Schied, G., Comparison of abstract data type and abstract state encapsulation detection techniques for architectural understanding (1997) Proceedings of the Working Conference on Reverse Engineering, , IEEE Computer Society Press; Girard, J.F., Briand, L., Reengineering concepts, techniques and tools for component extraction (1996) Technical Report, CRIM95-04-26. , CRIM, Montreal, Canada, May; Girard, J.F., Koschke, R., Finding components in a hierarchy of modules: A step towards architectural understanding (1997) Proceedings of the International Conference on Software Maintenance, pp. 58-65. , October IEEE Computer Society Press; Girard, J.F., Koschke, R., A comparison of abstract data type and objects recovery techniques (2000) Journal Science of Computer Programming, Elsevier, 36 (23), pp. 149-181; Girard, J.F., Koschke, R., Schied, G., A metric-based approach to detect abstract data types and abstract state encapsulation (1999) Journal on Automated Software Engineering, Kluwer Academic Publishers, 6 (4), pp. 357-386; Graudejus, H., (1998) Implementing A Concept Analysis Tool for Identifying Abstract Data Types in C Code, , Diplomarbeit, University of Kaiserslautern, Germany; Hutchens, D.H., Basili, V.R., System structure analysis: Clustering with data bindings (1985) IEEE Transactions on Software Engineering, 11 (8), pp. 749-757; Kazman, R., Carriére, S.J., Playing detective: Reconstructing software architecture from available evidence (1997) Technical Report, CMU-SEI-97-TR-010. , Software Engineering Institute, Pittsburgh, USA; Koschke, R., A semi-automatic method for component recovery (1999) Proceedings of the Working Conference on Reverse Engineering, pp. 256-267. , October IEEE Computer Society Press; Koschke, R., (2000) Atomic Architectural Component Detection for Program Understanding and System Evolution, , http://www.iste.uni-stuttgart.de/ps/rainer/Thesis/, Ph.D. Thesis, University of Stuttgart, Universitätsstraße 38, 70569 Stuttgart, Germany; Koschke, R., Eisenbarth, T., Proceedings of the workshop on program comprehension (2000) A Framework for Experimental Evaluation of Clustering Techniques, , June IEEE Computer Society Press; Lakhotia, A., A unified framework for expressing software subsystems classification techniques (1997) Journal Systems Software, Elsevier Science Publisher, 36, pp. 211-231; Lindig, C., Snelting, G., Assessing modular structure of legacy code based on mathematical concept analysis (1997) Proceedings of the International Conference on Software Engineering, , IEEE Computer Society Press; Liu, S.S., Wilde, N., Identifying objects in a conventional procedural language: An example of data design recovery (1990) Proceedings of the International Conference on Software Maintenance, pp. 266-271. , November IEEE Computer Society Press; Livadas, P.E., Johnson, T., A new approach to finding objects in programs (1994) Journal of Software Maintenance: Research and Practice, 6, pp. 249-260; Lung, C.-H., Software architecture recovery and restructuring through clustering techniques (1998) Proceedings of the Third International Workshop on Software Architecture, pp. 101-104. , Association of Computing Machinery (ACM) Press; MacRo, A., Buxton, J., (1987) The Craft of Software Engineering, , Addison-Wesley Reading, MA; Mahdavi, K., Harman, M., Hierons, R.M., A multiple hill climbing approach to software module clustering (2003) Proceedings of the International Conference on Software Maintenance, pp. 315-324. , September IEEE Computer Society Press; Mancoridis, S., Holt, R.C., Recovering the structure of software systems using tube graph interconnection clustering (1996) Proceedings of the International Conference on Software Maintenance, , IEEE Computer Society Press; Mancoridis, S., Mitchell, B.S., Rorres, C., Chen, Y., Gansner, E.R., Using automatic clustering to produce high-level system organizations of source code (1998) Proceedings of the Workshop on Program Comprehension, , IEEE Computer Society Press; Maqbool, O., Babri, H.A., The weighted combined algorithm: A linkage algorithm for software clustering (2004) Proceedings of the Conference on Software Maintenance and Reengineering, pp. 15-24. , March IEEE Computer Society Press; Mitchell, B.S., Mancoridis, S., Comparing the decompositions produced by software clustering algorithms using similarity measurements (2001) Proceedings of the International Conference on Software Maintenance, pp. 744-754. , IEEE Computer Society Press; Mitchell, B.S., Mancoridis, S., Craft: A framework for evaluating software clustering results in the absence of benchmark decompositions (2001) Proceedings of the Working Conference on Reverse Engineering, pp. 93-102. , IEEE Computer Society Press; Müller, H.A., Klashinsky, K., Rigi - A system for programming-in-the-large (1985) Proceedings of the International Conference on Software Engineering, pp. 80-86. , Association of Computing Machinery (ACM) Press; Müller, H., Wong, K., Tilley, S., A reverse engineering environment based on spatial and visual software interconnection models (1992) ACM SIGSOFT Symposium on Software Development Environments, pp. 88-98. , December Association of Computing Machinery (ACM) Press; Müller, H.A., Orgun, M.A., Tilley, S.R., Uhl, J.S., A reverse engineering approach to subsystem structure identification (1993) Journal of Software Maintenance: Research and Practice, 5 (4), pp. 181-204; Ogando, R.M., Yau, S.S., Wilde, N., An object finder for program structure understanding in software maintenance (1994) Journal of Software Maintenance: Research and Practice, 6 (5), pp. 261-283; Patel, S., Chu, W., Baxter, R., A measure for composite module cohesion (1992) Proceedings of the International Conference on Software Engineering, pp. 38-48. , May IEEE Computer Society Press; Saeed, M., Maqbool, O., Babri, H., Hassan, S., Sarwar, S., Software clustering techniques and the use of combined algorithm (2003) Proceedings of the Conference on Software Maintenance and Reengineering, pp. 301-306. , March IEEE Computer Society Press; Sahraoui, H., Melo, W., Lounis, H., Dumont, F., Applying concept formation methods to object identfication in procedural code (1997) Proceedings of the Conference on Automated Software Engineering, pp. 210-218. , November IEEE Computer Society Press; Sartipi, K., Alborz: A query-based tool for software architecture recovery (2001) Proceedings of the Workshop on Program Comprehension, pp. 115-116. , May IEEE Computer Society Press; Sartipi, K., A software evaluation model using component association views (2001) Proceedings of the Workshop on Program Comprehension, pp. 259-268. , May IEEE Computer Society Press; Sartipi, K., Kontogiannis, K., Component clustering based on maximal association (2001) Proceedings of the Working Conference on Reverse Engineering, pp. 103-114. , October IEEE Computer Society Press; Sartipi, K., Kontogiannis, K., A graph pattern matching approach to software architecture recovery (2001) Proceedings of the International Conference on Software Maintenance, pp. 408-419. , November IEEE Computer Society Press; Sartipi, K., Kontogiannis, K., Mavaddat, F., Architectural design recovery using data mining techniques (2000) Proceedings of the Conference on Software Maintenance and Reengineering, pp. 129-139. , February IEEE Computer Society Press; Sartipi, K., Kontogiannis, K., Mavaddat, F., A pattern matching framework for software architecture recovery and restructuring (2000) Proceedings of the Workshop on Program Comprehension, pp. 37-47. , June IEEE Computer Society Press; Schwanke, R.W., An intelligent tool for re-engineering software modularity (1991) Proceedings of the International Conference on Software Engineering, pp. 83-92. , May IEEE Computer Society Press; Shokoufandeh, A., Mancoridis, S., Maycock, M., Applying spectral methods to software clustering (2002) Proceedings of the Working Conference on Reverse Engineering, pp. 3-12. , October IEEE Computer Society Press; Siff, M., Reps, T., Identifying modules via concept analysis (1997) Proceedings of the International Conference on Software Maintenance, pp. 170-179. , October IEEE Computer Society Press; Siff, M., Reps, T., Identifying modules via concept analysis (1999) IEEE Transactions on Software Engineering, 25 (6), pp. 749-768; Tonella, P., Concept analysis for module restructuring (2001) IEEE Transactions on Software Engineering, 27 (4), pp. 351-363; Tzerpos, V., Holt, R.C., Software botryology: Automatic clustering of software systems (1998) International Workshop on Large-scale Software Composition, , August; Tzerpos, V., Holt, R.C., Mojo: A distance metric for software clustering (1999) Proceedings of the Working Conference on Reverse Engineering, , October IEEE Computer Society Press; Tzerpos, V., Holt, R.C., ACDC: An algorithm for comprehension-driven clustering (2000) Proceedings of the Working Conference on Reverse Engineering, , November IEEE Computer Society Press; Valasareddi, R.R., Carver, D.L., A graph-based object identification process for procedural programs (1998) Proceedings of the Working Conference on Reverse Engineering, pp. 50-58. , October IEEE Computer Society Press; Weidl, J., Gall, H., Binding object models to source code: An approach to object-oriented re-architecturing (1998) Proc. of the 22nd Computer Software and Applications Conference, , IEEE Computer Society Press; Weiser, M., Program slicing (1984) IEEE Transactions on Software Engineering, 10 (4); Yeh, A.S., Harris, D., Reubenstein, H., Recovering abstract data types and object instances from a conventional procedural language (1995) Proceedings of the Working Conference on Reverse Engineering, pp. 227-236. , July IEEE Computer Society Press; Yourdon, E., Constantine, L.L., (1979) Structured Design, , Prentice Hall Englewoood Cliffs, NJ},
correspondence_address1={Koschke, R.; University of Bremen, Fachbereich 03, 28334 Bremen, Germany; email: koschke@informatik.uni-bremen.de},
issn={01676423},
coden={SCPGD},
language={English},
abbrev_source_title={Sci Comput Program},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Binkley200613,
author={Binkley, D. and Koschke, R.},
title={Message from the program co-chairs},
journal={IEEE International Conference on Software Maintenance, ICSM},
year={2006},
pages={13},
doi={10.1109/ICSM.2006.37},
art_number={4021311},
note={cited By 0; Conference of ICSM 2006: 22nd IEEE International Conference on Software Maintenance ; Conference Date: 24 September 2006 Through 27 September 2006;  Conference Code:69975},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-34547372413&doi=10.1109%2fICSM.2006.37&partnerID=40&md5=3d17f459b8a071b37149f4ffeb020d6c},
affiliation={Loyola College, MD, United States; University of Bremen, Germany},
correspondence_address1={Binkley, D.; Loyola College, MD, United States},
publisher={IEEE Computer Society},
address={Philadelphia, PA},
isbn={0769523544; 9780769523545},
language={English},
abbrev_source_title={IEEE Int. Conf. Softw. Maint. ICSM},
document_type={Editorial},
source={Scopus},
}

@CONFERENCE{Koschke20054,
author={Koschke, R.},
title={What architects should know about reverse engineering and reengineering},
journal={Proceedings - 5th Working IEEE/IFIP Conference on Software Architecture, WICSA 2005},
year={2005},
volume={2005},
pages={4-10},
doi={10.1109/WICSA.2005.75},
art_number={1620085},
note={cited By 6; Conference of 5th Working IEEE/IFIP Conference on Software Architecture, WICSA 2005 ; Conference Date: 6 November 2005 Through 10 November 2005;  Conference Code:69320},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-33947172814&doi=10.1109%2fWICSA.2005.75&partnerID=40&md5=e17ad00e5d9dcfc134e074511abee502},
affiliation={University of Bremen, Germany},
abstract={Architecture reconstruction is a form of reverse engineering that reconstructs architectural views from an existing system. It is often necessary because a complete and authentic architectural description is not available. This paper puts forward the goals of architecture reconstruction, revisits the technical difficulties we are facing in architecture reconstruction, and presents a summary of a literature survey about the types of architectural viewpoints addressed in reverse engineering research. © 2005 IEEE.},
keywords={Engineers;  Professional aspects;  Reengineering;  Software architecture, Architects;  Architecture reconstruction, Reverse engineering},
references={Chikofsky, E.J., Cross II, J.H., Reverse Engineering and Design Recovery: A Taxonomy (1990) IEEE Software, 7 (1), pp. 13-17. , Jan; Clements, P., Bachmann, F., Bass, L., Garlan, D., Ivers, J., Little, R., Nord, R., Stafford, J., (2002) Documenting Software Architecture, , Addison-Wesley, Boston; IEEE recommended practice for architectural description of software-intensive systems - std. 1471-2000, (2000), IEEE P1471; Kollman, R., Selonen, P., Stroulia, E., Systä, T., Zündorf, A., A study on the current state of the art in tool-supported uml-based static reverse engineering (2002) Working Conference on Reverse Engineering, pp. 22-31. , IEEE Computer Society Press; Koschke, R., Rekonstruktion von software-architekturen - ein literatur- und methoden-Überblick zum stand der Wissenschaft (2005) Informatik Forschung und Entwicklung, Springer, 19 (3), pp. 127-140; Shaw, M., Garlan, D., (1993) Advances in Software Engineering and Knowledge Engineering, chapter An Introduction to Software Architecture, , World Scientific Publishing Company, River Edge, NJ; Snelting, G., Tip, F., Reengineering class hierarchies using concept analysis (1998) Proceedings of the ACM SIGSOFT sixth international symposium on Foundations of software engineering, pp. 99-110. , ACM Press, Nov; Tilley, S., Paul, S., Smith, D.B., Towards a framework for program understanding (1996) Proceedings of the International Workshop on Program Comprehension, pp. 19-28. , IEEE Computer Society Press},
correspondence_address1={Koschke, R.; University of BremenGermany; email: koschke@informatik.uni-bremen.de},
sponsors={IEEE-CS Technical Council on Software Engineering; IFIP WG 2.10 Software Architecture; IEEE Computer Society; Reengineering Forum (REF)},
address={Pittsburgh, PA},
isbn={0769525482; 9780769525488},
language={English},
abbrev_source_title={Proc. Working IEEE/IFIP Conf. Softw. Arch.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koschke200586,
author={Koschke, R. and Quante, J.},
title={On dynamic feature location},
journal={20th IEEE/ACM International Conference on Automated Software Engineering, ASE 2005},
year={2005},
pages={86-95},
doi={10.1145/1101908.1101923},
note={cited By 40; Conference of 20th IEEE/ACM International Conference on Automated Software Engineering, ASE 2005 ; Conference Date: 7 November 2005 Through 11 November 2005;  Conference Code:80341},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-77952370455&doi=10.1145%2f1101908.1101923&partnerID=40&md5=0403bfcadeed8f436c9fbe70bfd5e515},
affiliation={University of Bremen, Germany},
abstract={Feature location aims at locating pieces of code that implement a given set of features (requirements). It is a necessary first step in every program comprehension and maintenance task if the connection between features and code has been lost.We have developed a semi-automatic technique for feature location using a combination of static and dynamic program analysis. Formal concept analysis is used to explore the results of the dynamic analysis.We describe new experiences with our technique. Specifically, we investigate the gain of information and increase of costs when the system under analysis is profiled at basic block level rather than routine level as in our earlier work. Furthermore, we explore the influence of the scenarios used for the dynamic analysis (minimal versus combined scenarios). Copyright 2005 ACM.},
author_keywords={Feature location;  Formal concept analysis},
keywords={Basic blocks;  Feature location;  Formal Concept Analysis;  Maintenance tasks;  ON dynamics;  Program comprehension;  Semi-automatics;  Static and dynamic, Computer software;  Computer software maintenance;  Dynamic analysis;  Location, Feature extraction},
references={Antoniol, G., Canfora, G., Casazza, G., Lucia, A.D., Merlo, E., Recovering traceability links between code and documentation (2002) IEEE TSE, 28 (10), pp. 970-983. , Oct; Birkhoff, G., (1940) Lattice Theory, , first ed. American Mathematical Society Colloquium Publications 25, Providence, RI, USA; Bojic, D., Eisenbarth, T., Koschke, R., Simon, D., Velasevic, D., Addendum to locating features in source code (short paper) (2004) IEEE TSE, 30 (2), p. 140. , Mar; Bojic, D., Velasevic, D., A use-case driven method of architecture recovery for program understanding and reuse engineering (2000) Proc. of the 4th CSMR (Feb, pp. 23-32. , IEEE Press; Bojic, D., Velasevic, D., URCA approach to scenario-based round-trip engineering (2000) Proc. of the OOPSLA 2000 Workshop on Scenario-based Round-Trip Engineering, pp. 51-56. , Minneapolis, MN, USA, Oct, Unpublished; Bojic, D., Velasevic, D., A method for reverse engineering of use-case realizations in UML (2001) The Australian Journal of Information Systems, 8 (2). , May; Chen, K., Rajlich, V., Case study of feature location using dependence graph (2000) IWPC, , IEEE Press; Eisenbarth, T., Koschke, R., Simon, D., Locating features in source code (2003) IEEE TSE, 29 (3); Ganter, B., Wille, R., (1996) Formal Concept Analysis-Mathematical Foundations, , Springer; Marcus, A., Maletic, J.I., Recovering documentation-to-source-code traceability links using latent semantic indexing (2003) ICSE, pp. 125-134. , May, IEEE Press; Simon, D., (2005) Lokalisierung von Merkmalen in Softwaresystemen, , Ph.d. dissertation, University of Stuttgart, Germany, To appear; Wilde, N., Buckellew, M., Page, H., Rajlich, V., A case study of feature location in unstructured legacy fortran code (2001) Proc. of the 5th CSMR, pp. 68-75. , Lisbon, Portugal, Mar, IEEE Press; Wilde, N., Scully, M., Software reconnaissance: Mapping from features to code (1995) Journal on Software Maintenance and Evolution, 7, pp. 49-62. , Jan; Wong, W.E., Gokhale, S.S., Horgan, J.R., Trivedi, K.S., Locating program features using execution slices (1999) Proc. of the IEEE Symposium on Application-Specific Systems and Software Engineering & Technology, pp. 194-203. , Richardson, TX, USA, Mar, IEEE Press; Zhao, W., Zhang, L., Hao, D., Mei, H., Sun, J., Alternative scalable algorithms for lattice-based feature location (2004) ICSM, p. 528. , IEEE Press; Zhao, W., Zhang, L., Liu, Y., Sun, J., Yang, F., Sniafl: Towards a static non-interactive approach to feature location (2004) ICSE, pp. 293-303. , IEEE Press},
correspondence_address1={Koschke, R.; University of BremenGermany; email: koschke@informatik.uni-bremen.de},
sponsors={IEEE Computer Society; ACM SIGSOFT; ACM SIGART},
address={Long Beach, CA},
language={English},
abbrev_source_title={IEEE/ACM Int. Conf. Autom. Softw. Eng., ASE},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Christl200589,
author={Christl, A. and Koschke, R. and Storey, M.-A.},
title={Equipping the reflexion method with automated clustering},
journal={Proceedings - Working Conference on Reverse Engineering, WCRE},
year={2005},
volume={2005},
pages={89-98},
doi={10.1109/WCRE.2005.17},
art_number={1566149},
note={cited By 39; Conference of WCRE: 12th Working Conference on Reverse Engineering 2005 ; Conference Date: 7 November 2005 Through 11 November 2005;  Conference Code:68914},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-33846246752&doi=10.1109%2fWCRE.2005.17&partnerID=40&md5=9e74183c78a0eaf43a7bc3d2f66edee1},
affiliation={University of Stuttgart, Germany; University of Bremen, Germany; University of Victoria, Canada},
abstract={A significant aspect in applying the Reflexion Method is the mapping of components found in the source code onto the conceptual components defined in the hypothesized architecture. To date, this mapping is established manually, which requires a lot of work for large software systems. In this paper, we present a new approach, in which clustering techniques are applied to support the user in the mapping activity. The result is a semi-automated mapping technique that accommodates the automatic clustering of the source model with the user's hypothesized knowledge about the system's architecture. This paper describes also a case study in which our semi-automated mapping technique has been applied successfully to extend a partial map of a real-world software application. © 2005 IEEE.},
keywords={Automation;  Computer architecture;  Computer software;  Mathematical models;  Software engineering;  Systems analysis, Automated clustering;  Reflexion method;  Software applications, Codes (symbols)},
references={Abreu, F., Pereira, G., Sousa, P., A coupling-guided cluster analysis approach to reengineer the modularity of object-oriented systems (2000) CSMR, pp. 13-22. , IEEE Press; Andritsos, P., Tzerpos, V., Software clustering based on information loss minimization (2003) WCRE, pp. 334-343. , IEEE Press, Nov; Anquetil, N., Lethbridge, T., Extracting concepts from file names: A new file clustering criterion (1998) ICSE, pp. 84-93. , ACM Press; Bauer, M., Trifu, M., Architecture-aware adaptive clustering of 00 systems (2004) CSMR, pp. 3-12. , IEEE Press, Mar; Bojic, D., Velasevic, D., A use-case driven method of architecture recovery for program understanding and reuse reengineering (2000) CSMR, pp. 23-32. , IEEE Press; Canfora, G., Cimitile, A., Lucia, A.D., Lucca, G.A.D., A case study of applying an eclectic approach to identify objects in code (1999) IWPC, pp. 136-143. , IEEE Press; Choi, S., Scacchi, W., Extracting and restructuring the design of large systems (1990) IEEE Software, 7 (1), pp. 66-71. , Jan; Christl, A., (2005) Semi-automated mapping for the reflexion method, , Diploma thesis no. 2160, University of Stuttgart, Computer Science, Jan; Cimitile, A., Visaggio, G., Software salvaging and the call dominance tree (1995) Journal of Systems and Software, 28, pp. 117-127; de Oca, C.M., Carver, D.L., A visual representation model for software subsystem decomposition (1998) WCRE, pp. 231-240. , IEEE Press; Gall, H., Klösch, R., Finding objects in procedural programs: An alternative approach (1995) WCRE, pp. 208-217. , IEEE Press, July; Girard, J.-F., Koschke, R., Finding components in a hierarchy of modules: A step towards architectural understanding (1997) ICSM, pp. 58-65. , IEEE Press; Girard, J.-F., Koschke, R., Schied, G., A metric-based approach to detect abstract data types and state encapsulations (1999) Journal Automated Software Engineering, 6 (4), pp. 82-89; Hofmeister, C., Nord, R., Soni, D., Applied Software Architecture (2000) Object Technology Series, , Addison Wesley; Hutchens, D.H., Basili, V.R., System structure analysis: Clustering with data bindings (1985) IEEE TSE, 11 (8), pp. 749-757. , Aug; Koschke, R., (1999) Atomic, , http://www.iste.uni-stuttgart.de/ps/rainer/thesis, Architectural Component Recovery for Program Understanding and Evolution. Ph.d. thesis, University of Stuttgart, Oct; Koschke, R., Simon, D., Hierarchical reflexion models (2003) WCRE, pp. 36-45. , IEEE Press; Lindig, C., Snelting, G., Assessing modular structure of legacy code based on mathematical concept analysis (1997) ICSE, pp. 349-359. , IEEE Press; Liu, S.S., Wilde, N., Identifying objects in a conventional procedural language: An example of data design recovery (1990) ICSM, pp. 266-271. , IEEE Press, Nov; Livadas, P., Johnson, T., A new approach to finding objects in programs (1994) Journal Software Maintenance and Evolution, 6, pp. 249-260; Mahdavi, K., Harman, M., Hierons, R.M., A multiple hill climbing approach to software module clustering (2003) ICSM, pp. 315-324. , IEEE Press, Sept; Mancoridis, S., Mitchell, B., Rorres, C., Chen, Y., Gansner, E., Using automatic clustering to produce high-level system organizations of source code (1998) IWPC, pp. 45-53. , IEEE Press; Maqbool, O., Babri, H.A., The weighted combined algorithm: A linkage algorithm for software clustering (2004) CSMR, pp. 15-24. , IEEE Press, Mar; Mitchell, B.S., (2002) A Heuristic Search Approach to Solving the Software Clustering Problem, , Dissertation, Drexel University, Philadelphia, PA, United States; Müller, H.A., Tilley, S.R., Orgun, M.A., Corrie, B.D., Madhavji, N.H., A reverse engineering environment based on spatial and visual software interconnection models (1992) Proceedings of the Fifth ACM SIGSOFT Symposium on Software development environments, pp. 88-98. , ACM Press, Dec; G. C. Murphy and D. Notkin. Reengineering with reflexion models: A case study. IEEE Computer, 30(8):29-36, Aug. 1997. Reprinted in Nikkei Computer, 19, January 1998, p. 161-169; Murphy, G.C., Notkin, D., Sullivan, K., Software reflexion models: Bridging the gap between source and high-level models (1995) Proc. of the Third ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 18-28. , New York, NY, ACM Press; Ogando, R.M., Yau, S.S., Wilde, N., An object finder for program structure understanding in software maintenance (1994) Journal Software Maintenance and Evolution, 6 (5), pp. 261-283. , September-October; Patel, S., Chu, W., Baxter, R., A measure for composite module cohesion (1992) ICSE, pp. 38-48. , ACM Press; Rayside, D., Reuss, S., Hedges, E., Kontogiannis, K., The effect of call graph construction algorithms for object-oriented programs on automatic clustering (2000) IWPC, pp. 191-200. , IEEE Press; H. Sahraoui, W. Melo, H. Lounis, and F. Dumont. Applying concept formation methods to object identfication in procedural code. In ASE, pages 210-218. IEEE Press, Nov. 1997; Sartipi, K., Alborz: A query-based tool for software architecture recovery (2001) IWPC, pp. 115-117. , IEEE Press, May; Sartipi, K., Kontogiannis, K., A graph pattern matching approach to software architecture recovery (2001) ICSM, pp. 408-417. , IEEE Press, Nov; Schwanke, R.W., Hanson, S.J., Using neural networks to modularize software (1994) Machine Learning, 15, pp. 136-168; Shokoufandeh, A., Mancoridis, S., Maycock, M., Applying spectral methods to software clustering (2002) WCRE, pp. 3-12. , IEEE Press, Oct; Siff, M., Reps, T., Identifying modules via concept analysis (1999) IEEE TSE, 25 (6), pp. 749-768. , November/December; Tonella, P., Concept analysis for module restructuring (2001) IEEE TSE, 27 (4), pp. 351-363. , Apr; Tzerpos, V., The orphan adoption problem in architecture maintenance (1997) WCRE, pp. 76-83. , IEEE Press; Valasareddi, R.R., Carver, D.L., A graph-based object identification process for procedural programs (1998) WCRE, pp. 50-58. , IEEE Press, Oct; van Deursen, A., Kuipers, T., Identifying objects using cluster and concept analysis (1999) ICSE, pp. 246-255. , IEEE Press; J. Weidl and H. Gall. Binding object models to source code: An approach to object-oriented rearchitecturing. In Proc. of the 22nd Computer Software and Applications Conference, pages 26-31. IEEE Press, 1998; Wiggerts, T.A., Using clustering algorithms in legacy systems remodularization (1997) WCRE, pp. 33-43. , IEEE Press; Wu, J., Storey, M.-A.D., A multi-perspective software visualization environment (2000) CASCON '00: Proceedings of the 2000 conference of the Centre for Advanced Studies on Collaborative research, p. 15. , IBM Press; A. Yeh, D. H. D., and H. Reubenstein. Recovering abstract data types and object instances from a conventional procedural language. In WCRE, pages 227-236. IEEE Press, 1995},
correspondence_address1={Christl, A.; University of StuttgartGermany; email: christas@psmail.informatik.uni-stuttgart.de},
sponsors={Reengineering Forum, REF; IEEE-CS Technical Council on Software Engineering, TCSE},
address={Pittsburgh, PA},
issn={10951350},
isbn={0769524745; 9780769524740},
language={English},
abbrev_source_title={Proc. Working Conf. Rev. Eng. WCRE},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Falke200583,
author={Falke, R. and Klein, R. and Koschke, R. and Quante, J.},
title={The dominance tree in visualizing software dependencies},
journal={Proceedings - VISSOFT 2005: 3rd IEEE International Workshop on Visualizing Software for Understanding and Analysis},
year={2005},
pages={83-88},
doi={10.1109/VISSOF.2005.1684311},
art_number={1684311},
note={cited By 5; Conference of 3rd IEEE International Workshop on Visualizing Software for Understanding and Analysis, VISSOFT 2005 ; Conference Date: 25 September 2005 Through 25 September 2005;  Conference Code:100371},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-35348846659&doi=10.1109%2fVISSOF.2005.1684311&partnerID=40&md5=c983361708e6edca7e2d2071747a0ed8},
affiliation={University of Bremen, Germany},
abstract={Dominance analysis from graph theory allows one to locate subordinated software elements in a rooted dependency graph. It identifies the nesting structure for a dependency graph as a dominance tree, and, hence, adds information not immediately visible irn large and complex graphs. Moreover, the subordination (or locality) can be leveraged for drawirng dependency graphs. This paper envisions ways to leverage the dominance relation for structurirng and presenting large dependency graphs. To explore the feasibility of these kinds of visualization, we measure dominance trees for large software systems written in different programming languages. These measurements give us the necessary information to design a usable visualization. © 2005 IEEE.},
keywords={Dependency graphs;  Dominance analysis;  Dominance relation;  Large software systems;  Software dependencies;  Software elements, Forestry;  Program processors;  Visualization, Trees (mathematics)},
references={(2005), http://www.bauhaus-stuttgart.de/, June; Burd, E., Munro, M., Evaluating the use of dominance trees for c and cobol (1999) ICSM, pp. 401-410. , IEEE Press; Cimitile, A., Visaggio, G., Software salvaging and the call dominance tree (1995) Journal of Systems and Software, 28, pp. 117-127; Cooper, K.D., Harvey, T.J., Kennedy, K., A simple, fast dominance algorithm (2001) Software Practice and Experiences, 4, pp. 1-10; Girard, J.-F., Koschke, R., Finding components in a hierarchy of modules: A step towards architectural understanding (1997) ICSM, , IEEE Press; Herman, I., Melancon, G., Marshall, M.S., Graph visualization and navigation in information visualization: A survey (2000) IEEE Trans. Vis. Comput. Graph., 6 (1), pp. 24-43; Koschke, R., Software visualization in software maintenance, reverse engineering, and reengineering: A research survey (2003) Journal Software Maintenance and Evolution, 15 (2), pp. 87-109. , March/April; Muller, H.A., Klashinsky, K., Rigi a system for programming-in-the-large (1985) ICSE, pp. 80-86. , ACM Press; Storey, M.-A., Shrimp views: An interactive environment for exploring multiple hierarchical views of a java program (2001) ICSE 2001 Workshop on Software Visualization, , ACM Press},
correspondence_address1={University of BremenGermany},
sponsors={IEEE Computer Society},
address={Budapest},
isbn={0780395409; 9780780395404},
language={English},
abbrev_source_title={Proc. - VISSOFT: IEEE Int. Workshop Vis. Softw. Underst. Analy.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Eisenbarth2005263,
author={Eisenbarth, T. and Koschke, R. and Vogel, G.},
title={Static object trace extraction for programs with pointers},
journal={Journal of Systems and Software},
year={2005},
volume={77},
number={3},
pages={263-284},
doi={10.1016/j.jss.2004.04.028},
note={cited By 19},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-18844462181&doi=10.1016%2fj.jss.2004.04.028&partnerID=40&md5=5f2dc01c657d854055d020d49cc015c0},
affiliation={University of Stuttgart, Univ. Strasse 38, Stuttgart 70569, Germany},
abstract={A trace is a record of the execution of a computer program, showing the sequence of operations executed. Dynamic traces are obtained by executing the program and depend upon the input. Static traces, on the other hand, describe potential sequences of operations extracted statically from the source code. Static traces offer the advantage that they do not depend upon input data. This paper describes a new automatic technique to extract static traces for individual stack and heap objects. The extracted static traces can be used in many ways, such as protocol recovery and validation in particular and program understanding in general. In addition, this article describes four case studies we conducted to explore the efficiency of our algorithm, the size of the resulting static traces, and the influence of the underlying points-to analysis on this size. © 2005 Elsevier Inc. All rights reserved.},
keywords={Algorithms;  Automation;  Computer architecture;  Computer operating systems;  Network protocols;  Semantics;  Software engineering, Automatic technique;  Dynamic traces;  Protocol recovery;  Source code, Computer systems programming},
references={(2002) Apache v1.3.27, , http://www.apache.org; (2002) The New Bauhaus Stuttgart, , http://www.bauhaus-stuttgart.de/; Binkley, D., Gallagher, K.B., Program slicing (1996) Advances in Computers, 43, pp. 1-50; Butkevich, S., Renedo, M., Baumgartner, G., Young, M., Compiler and tool support for debugging object protocols (2000) Proceedings of the 8th International Symposium on Foundations of Software Engineering for Twenty-first Century Applications, pp. 50-59; Chen, J.-L., Wang, F.-J., Slicing object-oriented programs (1997) Proceedings of the 4th Asia-Pacific Software Engineering and International Computer Science Conference; Chen, Z., Xu, B., Slicing object-oriented java programs (2001) ACM SIGPLAN Notices, 36 (4), pp. 33-40; Cook, J.E., Wolf, A.L., Discovering models of software processes from event-based data (1998) ACM Transactions on Software Engineering and Methodology, 7 (3), pp. 215-249; Das, M., Lerner, S., Seigle, M., ESP: Path-sensitive program verification in polynomial time (2002) PLDI '02: Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation, , http://www.research.microsoft.com/esp/; Eisenbarth, T., Koschke, R., Vogel, G., Static trace extraction (2002) Proceedings of the Working Conference on Reverse Engineering, pp. 128-137. , van Deursen, A., Burd, E. (Eds.) IEEE Computer Society Press; Fähndrich, M., Rehof, J., Das, M., Scalable context-sensitive flow analysis using instantiation constraints (2000) Conference on Programming Language Design and Implementation, pp. 253-263. , http://delivery.acm.org/10.1145/350000/349332/p253-fahn%drich.pdf; Harrold, M.J., Soffa, M.L., Efficient computation of interprocedural definition-use chains (1994) ACM Transactions on Programming Languages and Systems, 16 (2), pp. 175-204; Heiber, T., (2001) Semi-automatische Herleitung von Komponentenprotokollen aus Statischen Verwendungsmustern (Semi-automatic Recovery of Component Protocols from Static Usage Patterns), , Diplomarbeit, text in English; Hind, M., Pointer analysis: Haven't we solved this problem yet? (2001) Workshop on Program Analysis for Software Tools and Engineering, pp. 54-61. , ACM Press; Hind, M., Pioli, A., Which pointer analysis should I use? (2000) ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 113-123. , Aug. ACM Press; Hoare, C.A.R., (1985) Communicating Sequential Processes, , Prentice Hall; Horwitz, S., Reps, T., Binkley, D., Interprocedural slicing using dependence graphs (1990) ACM Transactions on Programming Languages and Systems, 12 (1), pp. 26-60; Jerding, D.F., Rugaber, S., Using visualization for architectural localization and extraction (1997) Proceedings of the Working Conference on Reverse Engineering, , IEEE Computer Society Press; Jerding, D.F., Stasko, J.T., Ball, T., Visualizing interactions in program executions (1997) Proceedings of the International Conference on Software Engineering, , ACM; Kiel, H.-U., Czeranski, J., (1994) The Multi Player Game IMaze, , http://home.tu-clausthal.de/student/iMaze/; Koschke, R., Girard, J.-F., Würthner, M., Intermediate representations for reverse engineering (1998) Working Conference on Reverse Engineering, pp. 241-250. , IEEE Computer Society Press, Paola Alto, CA; Koschke, R., Zhang, Y., (2001) Component Recovery, Protocol Recovery and Validation in Bauhaus, 1 (2002), pp. 73-76. , Ebert, J., Kullbach, B., Lehner, F. (Eds.), 3rd Reengineering Workshop, Bad Honnef, Germany Fachberichte Informatik University of Koblenz-Landau; Larsen, L., Harrold, M.J., Slicing object-oriented software (1996) International Conference on Software Engineering, pp. 495-505. , ACM Press; Liang, D., Harrold, M.J., Slicing objects using system dependence graphs (1998) International Conference on Software Maintenance. IEEE Computer Society Press, Pp. 358-367; Lindig, C., (1994) Concepts 0.3e, , http://www.eecs.harvard.edu/lindig/src/concepts.html; Ohata, F., Hirose, K., Fujii, M., Inoue, K., A slicing method for object-oriented programs using lightweight dynamic information (2001) Proceedings of the Asia-Pacific Software Engineering Conference; Olender, K., Osterweil, L., Interprocedural static analysis of sequencing constraints (1992) ACM Transactions on Software Engineering and Methodology, 1 (1), pp. 21-52; Pande, H.D., Landi, W., Interprocedural def-use associations in c programs (1991) Proceedings of the Symposium on Testing, Analysis, and Verification, pp. 139-153. , ACM Press; Ramalingam, G., The undecidability of aliasing (1994) ACM Transactions on Programming Languages and Systems, 16 (5), pp. 1467-1471; Rumbaugh, J., Jacobson, I., Booch, G., (1998) The Unified Modeling Language - Reference Manual, , Addison-Wesley; Sigala, S., (2001) SLisp 1.2, , http://www.sigala.it/sandro/software.html; Steensgaard, B., Points-to analysis in almost linear time (1996) Symposium on Principles of Programming Languages, pp. 32-41. , http://citeseer.nj.nec.com/article/steensgaard95pointst%o.html; Steindl, C., Intermodular slicing of object-oriented programs (1998) International Conference on Compiler Construction, 1383, pp. 264-278. , Lecture Notes in Computer Science, Springer; Steindl, C., (1999) Program Slicing for Object-oriented Programming Languages, , Dissertation, Johannes Kepler University Linz; Tip, F., A survey of program slicing techniques (1995) Journal of Programming Languages, 3 (3); Tonella, P., Potrich, A., Reverse engineering of the interaction diagrams from c++ code (2003) IEEE Computer Society Press, pp. 159-168; Weiser, M., Program slicing (1984) IEEE Computer Society Transactions on Software Engineering, 10 (4); Whaley, J., Martin, M.C., Lam, M.S., Automatic extraction of object-oriented component interfaces (2002) Proceedings of the International Symposium on Software Testing and Analysis, , http://citeseer.nj.nec.com/525755.html; Wilson, R., (1997) Efficient, Context-sensitive Pointer Analysis, , Ph.D. thesis, Department of Electrical Engineering, Stanford University; Wilson, R.P., Lam, M.S., Efficient context-sensitive pointer analysis for c programs (1995) SIGPLAN Conference on Programming Language Design and Implementation, , http://citeseer.nj.nec.com/wilson95efficient.html, URL},
correspondence_address1={Koschke, R.; University of Stuttgart, Univ. Strasse 38, Stuttgart 70569, Germany; email: koschke@informatik.uni-bremen.de},
issn={01641212},
coden={JSSOD},
language={English},
abbrev_source_title={J Syst Software},
document_type={Article},
source={Scopus},
}

@ARTICLE{Koschke2005127,
author={Koschke, R.},
title={Reconstruction of software architectures: A literature and methods overview on the state of the science [Rekonstruktion von Software-Architekturen: Ein Literatur- und Methoden-Überblick zum Stand der Wissenschaft]},
journal={Informatik - Forschung und Entwicklung},
year={2005},
volume={19},
number={3},
pages={127-140},
doi={10.1007/s00450-005-0180-1},
note={cited By 4},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-19044393495&doi=10.1007%2fs00450-005-0180-1&partnerID=40&md5=921024cdff3b194f35a3b23e4400ef95},
affiliation={Fb. Mathematik und Informatik, Arbeitsgruppe Softwaretechnik, U., Germany},
abstract={Software architectures are described by different views which depend upon the concerns of the respective stakeholders. Far too often, software architectures are not documented sufficiently. In such cases, an architecture description must be reconstructed when changes to the system are to be made. This article summarizes the current state of the art of techniques and methods for software architecture reconstruction and relates them to the viewpoints that have been proposed in architecture design. The article identifies research opportunities based on the comparison. © Springer-Verlag 2005.},
author_keywords={Architecture reconstruction;  Bibliography;  Reverse engineering;  Software architecture},
keywords={Architecture reconstruction;  Bibliography;  Software architecture;  Stakeholders, Architectural design;  Computer architecture;  Reconstruction (structural);  Reverse engineering, Software engineering},
references={Parnas, D.L., On a 'buzzword': Hierarchical structure (1974) Proc. IFIP Congress, , North Holland Publishing Company; (2000) IEEE Recommended Practice for Architectural Description of Software-intensive Systems - Std, , 1471-2000; Zachman, J.A., A framework for information systems architecture (1987) IBM Systems Journal, 26 (3); Sowa, J.F., Zachman, J.A., Extending and formalising the framework for information systems architecture (1992) IBM Systems Journal, 31 (3), pp. 590-616; Zachman, J.A., A framework for information systems architecture (1999) IBM Systems Journal, 38 (2-3), pp. 454-470; Perry, D.E., Wolf, A.L., Foundations for the study of software (1992) ACM SIGSOFT, 17 (4), pp. 40-52. , October 1992; Kruchten, P., The 4+1 view model of architecture (1995) IEEE Software, 12 (6), pp. 42-50. , November 1995; Soni, D., Nord, R.L., Hofmeister, C., Software architecture in industrial applications (1995) International Conference on Software Engineering, pp. 196-206. , ACM Press; Hofmeister, C., Nord, R., Soni, D., Applied software architecture (2000) Object Technology Series, , Addison Wesley; Clements, P., Bachmann, F., Bass, L., Garlan, D., Ivers, J., Little, R., Nord, R., Stafford, J., (2002) Documenting Software Architecture, , Addison-Wesley, Boston; Van Deursen, A., Hofmeister, C., Koschke, R., Moonen, L., Riva, C., Symphony: View-driven software architecture reconstruction (2004) IEEE/IFIP Working Conference on Software Architecture, pp. 122-132. , June 2004. IEEE Computer Society Press; Ivkovic, I., Godfrey, M., Enhancing domain-specific software architecture recovery (2003) International Workshop on Program Comprehension, pp. 266-270. , May 2003. IEEE Computer Society Press; Liu, K., Alderson, A., Qureshi, Z., Requirements recovery from legacy systems by analyzing and modelling behavior (1999) International Conference on Software Maintenance, , IEEE Computer Society Press; Riva, C., Yang, Y., Generation of architectural documentation using XML (2002) Working Conference on Reverse Engineering, pp. 161-169. , October 2002. IEEE Computer Society Press; Riva, C., Architecture reconstruction in practice (2002) IEEE/IFIP Working Conference on Software Architecture, pp. 159-173. , August 2002. IEEE Press; Bril, R.J., Postma, A., Krikhaar, R.L., Embedding architectural support in industry (2003) International Conference on Software Maintenance, pp. 348-357. , IEEE Computer Society Press; Stoermer, C., O'Brien, L., Verhoef, C., Practice patterns for architecture reconstruction (2002) Working Conference on Reverse Engineering, pp. 151-160. , IEEE Computer Society Press, October 2002; Stoermer, C., O'brien, L., Verhoef, C., Moving towards quality attribute driven software architecture reconstruction (2003) Working Conference on Reverse Engineering, pp. 46-56. , November 2003. IEEE Computer Society Press; Stoermer, C., O'brien, L., MAP - Mining architectures for product line evaluations (2001) IEEE/IFIP Working Conference on Software Architecture, pp. 35-44. , August 2001. IEEE Computer Society Press; Ding, L., Medvidovic, N., Focus: A light-weight, incremental approach to software architecture recovery and evolution (2001) IEEE/IFIP Working Conference on Software Architecture, pp. 191-200. , August 2001. IEEE Computer Society Press; Andritsos, P., Tzerpos, V., Software clustering based on information loss minimization (2003) Working Conference on Reverse Engineering, pp. 334-343. , November 2003. IEEE Computer Society Press; Anquetil, N., Lethbridge, T., Extracting concepts from file names: A new file clustering criterion (1998) International Conference on Software Engineering, pp. 84-93. , ACM Press; Baniassad, E.L.A., Murphy, G.C., Conceptual module querying for software reengineering (1998) International Conference on Software Engineering, pp. 64-73. , ACM Press; Bauer, M., Trifu, M., Architecture-aware adaptive clustering of oo systems (2004) European Conference on Software Maintenance and Reengineering, pp. 3-12. , March 2004. IEEE Computer Society Press; Bojic, D., Velasevic, D., A use-case driven method of architecture recovery for program understanding and reuse reengineering (2000) European Conference on Software Maintenance and Reengineering, , IEEE Computer Society Press; Chiricota, Y., Jourdan, F., Melançon, G., Software components capture using graph clustering (2003) International Workshop on Program Comprehension, pp. 217-226. , May 2003. IEEE Computer Society Press; Van Deursen, A., Kuipers, T., Identifying objects using cluster and concept analysis (1999) International Conference on Software Engineering, pp. 246-255. , IEEE Computer Society Press; Embley, D.W., Woodfield, S.N., Assessing the quality of abstract data types written in Ada (1988) International Conference on Software Engineering, pp. 144-153. , ACM Press; Girard, J.-F., Koschke, R., Finding components in a hierarchy of modules: A step towards architectural understanding (1997) International Conference on Software Maintenance, , IEEE Computer Society Press; Girard, J.-F., Koschke, R., Schied, G., Comparison of abstract data type and abstract state encapsulation detection techniques for architectural understanding (1997) Working Conference on Reverse Engineering, , IEEE Computer Society Press; Koschke, R., Eisenbarth, T., A framework for experimental evaluation of clustering techniques (2000) International Workshop on Program Comprehension, , IEEE Computer Society Press; Krikhaar, R., Reverse architecting approach for complex systems (1997) International Conference on Software Maintenance, , IEEE Computer Society Press; Lakhotia, A., Gravley, J.M., Toward experimental evaluation of subsystem classification recovery techniques (1995) Working Conference on Reverse Engineering, pp. 262-271. , July 1995. IEEE Computer Society Press; Lindig, C., Snelting, G., Assessing modular structure of legacy code based on mathematical concept analysis (1997) International Conference on Software Engineering, pp. 349-359. , IEEE Computer Society Press; Lung, C.-H., Software architecture recovery and restructuring through clustering techniques (1998) Proceedings of the Third International Workshop on Software Architecture, pp. 101-104. , ACM Press; Tzerpos, V., Holt, R.C., Mojo: A distance metric for software clustering (1999) Working Conference on Reverse Engineering, pp. 187-196. , IEEE Computer Society Press; Mahdavi, K., Harman, M., Hierons, R.M., A multiple hill climbing approach to software module clustering (2003) International Conference on Software Maintenance, pp. 315-324. , September 2003. IEEE Computer Society Press; Mancoridis, S., Holt, R.C., Recovering the structure of software systems using tube graph interconnection clustering (1996) International Conference on Software Maintenance, , IEEE Computer Society Press; Mancoridis, S., Mitchell, B.S., Rorres, C., Chen, Y., Gansner, E.R., Using automatic clustering to produce high-level system organizations of source code (1998) International Workshop on Program Comprehension, , IEEE Computer Society Press; Maqbool, O., Babri, H.A., The weighted combined algorithm: A linkage algorithm for software clustering (2004) European Conference on Software Maintenance and Reengineering, pp. 15-24. , March 2004. IEEE Computer Society Press; Mitchell, B.S., Mancoridis, S., Craft: A framework for evaluating software clustering results in the absence of benchmark decompositions (2001) Working Conference on Reverse Engineering, pp. 93-102. , IEEE Computer Society Press; Müller, H.A., Klashinsky, K., Rigi - A system for programming-in-the-large (1985) International Conference on Software Engineering, pp. 80-86. , ACM Press; Müller, H.A., Tilley, S.R., Orgun, M.A., Corrie, B.D., Madhavji, N.H., A reverse engineering environment based on spatial and visual software interconnection models (1992) Proceedings of the Fifth ACM SIGSOFT Symposium on Software Development Environments, pp. 88-98. , December 1992. ACM Press; Oca, C.M., Carver, D.L., A visual representation model for software subsystem decomposition (1998) Working Conference on Reverse Engineering, , IEEE Computer Society Press; Rayside, D., Reuss, S., Hedges, E., Kontogiannis, K., The effect of call graph construction algorithms for object-oriented programs on automatic clustering (2000) International Workshop on Program Comprehension, , IEEE Computer Society Press; Saeed, M., Maqbool, O., Babri, H.A., Hassan, S.Z., Sarwar, S.M., Software clustering techniques and the use of combined algorithm (2003) European Conference on Software Maintenance and Reengineering, pp. 301-310. , IEEE Computer Society Press; Sartipi, K., Kontogiannis, K., Mavaddat, F., Architectural design recovery using data mining techniques (2000) European Conference on Software Maintenance and Reengineering, , IEEE Computer Society Press; Sartipi, K., Kontogiannis, K., A graph pattern matching approach to software architecture recovery (2001) International Conference on Software Maintenance, pp. 408-417. , November 2001. IEEE Computer Society Press; Sartipi, K., Kontogiannis, K., On modeling software architecture recovery as graph matching (2003) International Conference on Software Maintenance, pp. 224-234. , September 2003. IEEE Computer Society Press; Sartipi, K., Kontogiannis, K., Mavaddat, F., A pattern matching framework for software architecture recovery and restructuring (2000) International Workshop on Program Comprehension, , IEEE Computer Society Press; Sartipi, K., Alborz: A query-based tool for software architecture recovery (2001) International Workshop on Program Comprehension, pp. 115-117. , May 2001. IEEE Computer Society Press; Schwanke, R.W., An intelligent tool for re-engineering software modularity (1992) International Conference on Software Engineering, , ACM Press; Shokoufandeh, A., Mancoridis, S., Maycock, M., Applying spectral methods to software clustering (2002) Working Conference on Reverse Engineering, pp. 3-12. , October 2002. IEEE Computer Society Press; Siff, M., Reps, T., Identifying modules via concept analysis (1997) International Conference on Software Maintenance, pp. 170-179. , IEEE Computer Society Press; Siff, M., Reps, T., Identifying modules via concept analysis (1999) IEEE Computer Society Transactions on Software Engineering, 25 (6), pp. 749-768. , November/December 1999; Tonella, P., Concept analysis for module restructuring (2001) IEEE Computer Society Transactions on Software Engineering, 27 (4), pp. 351-363. , April 2001; Tzerpos, V., Holt, R.C., On the stability of software clustering algorithms (2000) International Workshop on Program Comprehension, , IEEE Computer Society Press; Tzerpos, V., The orphan adoption problem in architecture maintenance (1997) Working Conference on Reverse Engineering, , IEEE Computer Society Press; Wen, Z., Tzerpos, V., An optimal algorithm for mojo distance (2003) International Workshop on Program Comprehension, pp. 227-236. , May 2003. IEEE Computer Society Press; Abreu, F., Pereira, G., Sousa, P., A coupling-guided cluster analysis approach to reengineer the modularity of object-oriented systems (2000) European Conference on Software Maintenance and Reengineering, , IEEE Computer Society Press; Gall, H., Klösch, R., Finding objects in procedural programs: An alternative approach (1995) Working Conference on Reverse Engineering, pp. 208-217. , July 1995. IEEE Computer Society Press; Han, M., Hofmeister, C., Nord, R.L., Reconstructing software architecture for J2EE web applications (2003) Working Conference on Reverse Engineering, pp. 67-76. , November 2003. IEEE Computer Society Press; Mendonca, N.C., Kramer, J., Developing an approach for the recovery of distributed software architectures (1998) International Workshop on Program Comprehension, , IEEE Computer Society Press; Dekel, U., Gil, Y., Revealing class structure with concept lattices (2003) Working Conference on Reverse Engineering, pp. 353-362. , November 2003. IEEE Computer Society Press; Snelting, G., Tip, F., Reengineering class hierarchies using concept analysis (1998) Proceedings of the ACM SIGSOFT Sixth International Symposium on Foundations of Software Engineering, pp. 99-110. , November 1998. ACM Press; Egyed, A., Automated abstraction of class diagrams (2002) ACM Transactions on Software Engineering and Methodology, 11 (4), pp. 449-491; Jackson, D., Waingold, A., Lightweight extraction of object models from bytecode (1999) International Conference on Software Engineering, pp. 194-202. , ACM Press; Jackson, D., Waingold, A., Lightweight extraction of object models from bytecode (2001) IEEE Computer Society Transactions on Software Engineering, 27 (2), pp. 159-169. , February 2001; Milanova, A., Rountev, A., Ryder, B., Constructing precise object relation diagrams (2002) International Conference on Software Maintenance, pp. 586-595. , October 2002. IEEE Computer Society Press; Richner, T., Ducasse, S., Using dynamic information for the iterative recovery of collaborations and roles (2002) International Conference on Software Maintenance, pp. 34-43. , October 2002. IEEE Computer Society Press; Richner, T., Ducasse, S., Recovering high-level views of object-oriented applications from static and dynamic information (1999) International Conference on Software Maintenance, , IEEE Computer Society Press; Riva, C., Rodriguez, J.V., Combining static and dynamic views for architecture reconstruction (2002) European Conference on Software Maintenance and Reengineering, pp. 47-56. , IEEE Computer Society Press; Subramaniam, G.V., Byrne, E.J., Deriving an object model from legacy fortran code (1996) International Conference on Software Maintenance, , IEEE Computer Society Press; Tonella, P., Potrich, A., Reverse engineering of the interaction diagrams from C++ code (2003) International Conference on Software Maintenance, pp. 159-168. , September 2003. IEEE Computer Society Press; Yeh, D., Kuo, W.-Y., Reverse engineering aggregation relationship based on propagation of operations (2002) European Conference on Software Maintenance and Reengineering, pp. 223-231. , March 2002. IEEE Computer Society Press; Mancoridis, S., Toward a generic framework for computing subsystem interfaces (1996) Joint Proceedings of the Second International Software Architecture Workshop (ISAW-2) and International Workshop on Multiple Perspectives in Software Development (Viewpoints '96) on SIGSOFT '96 Workshops, pp. 106-110. , ACM Press; Whaley, J., Martin, M.C., Lam, M.S., Automatic extraction of object-oriented component interfaces (2002) Proceedings of the International Symposium on Software Testing and Analysis, , July 2002; Viljamaa, J., Reverse engineering framework reuse interfaces (2003) Proceedings of the 9th European Software Engineering Conference Held Jointly with 10th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 217-226. , ACM Press; Antoniol, G., Fiutem, R., Cristoforetti, L., Design pattern recovery in object-oriented software (1998) International Workshop on Program Comprehension, , IEEE Computer Society Press; Asencio, A., Cardman, S., Harris, D., Laderman, E., Relating expectations to automatically recovered design patterns (2002) Working Conference on Reverse Engineering, pp. 87-96. , October 2002. IEEE Computer Society Press; Balanyi, Z., Ferenc, R., Mining design patterns from C++ source code (2003) International Conference on Software Maintenance, pp. 305-314. , IEEE Computer Society Press; Heuzeroth, D., Holl, T., Högström, G., Löwe, W., Automatic design pattern detection (2003) International Workshop on Program Comprehension, pp. 94-103. , May 2003. IEEE Computer Society Press; Keller, R.K., Schauer, R., Robitaille, S., Page, P., Pattern-based reverse-engineering of design components (1999) International Conference on Software Engineering, pp. 226-235. , ACM Press; Kramer, C., Prechelt, L., Design recovery by automated search for structural design patterns in object-oriented software (1996) Working Conference on Reverse Engineering, , IEEE Computer Society Press; Michail, A., Data mining library reuse patterns using generalized association rules (2000) International Conference on Software Engineering, pp. 167-176. , ACM Press; Niere, J., Schäfer, W., Wadsack, J.P., Wendehals, L., Welsh, J., Towards pattern-based design recovery (2002) International Conference on Software Engineering, pp. 338-348. , May 2002. ACM Press; Niere, J., Wadsack, J.P., Wendehals, L., Handling large search space in pattern-based reverse engineering (2003) International Workshop on Program Comprehension, pp. 274-283. , May 2003. IEEE Computer Society Press; Seemann, J., Von Gudenberg, J.W., Pattern-based design recovery of java software (1998) Proceedings of the ACM SIGSOFT Sixth International Symposium on Foundations of Software Engineering, pp. 10-16. , November 1998. ACM Press; Tonella, P., Antoniol, G., Object oriented design pattern inference (1999) International Conference on Software Maintenance, , IEEE Computer Society Press; Tonella, P., Antoniol, G., Inference of object-oriented design patterns (2001) Journal of Software Maintenance and Evolution: Research and Practice, 13 (5), pp. 309-330; Aldrich, J., Chambers, C., Notkin, D., Archjava: Connecting software architecture to implementation (2002) International Conference on Software Engineering, pp. 187-196. , ACM Press; Gannod, G.C., Murthy, S., Verification of recovered software architectures (2003) International Workshop on Program Comprehension, pp. 258-267. , IEEE Computer Society Press; Koschke, R., Simon, D., Hierarchical reflexion models (2003) Working Conference on Reverse Engineering, pp. 36-45. , November 2003. IEEE Computer Society Press; Murphy, G.C., Notkin, D., Sullivan, K., Software reflexion models: Bridging the gap between source and high-level models (1995) Proceedings of the Third ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 18-28. , New York, NY, October 1995. ACM Press; Murphy, G.C., Notkin, D., Sullivan, K.J., Software reflexion models: Bridging the gap between design and implementation (2001) IEEE Computer Society Transactions on Software Engineering, 27 (4). , April 2001; Rötschke, T., Krikhaar, R., Architecture analysis tools to support evolution of large industrial systems (2002) International Conference on Software Maintenance, pp. 182-191. , October 2002. IEEE Computer Society Press; Tvedt, R., Costa, P., Lindvall, M., Does the code match the design? a process for architecture evaluation (2002) International Conference on Software Maintenance, pp. 393-403. , IEEE Computer Society Press; Chan, K., Liang, Z.C.L., Michail, A., Design recovery of interactive graphical applications (2003) International Conference on Software Engineering, pp. 114-124. , ACM Press; Chen, K., Rajlich, V., Case study of feature location using dependence graph (2000) International Workshop on Program Comprehension, , IEEE Computer Society Press; Deprez, J.-C., Lakhotia, A., A formalism to automate mapping from program features to code (2000) International Workshop on Program Comprehension, , IEEE Computer Society Press; Egyed, A., A scenario-driven approach to traceability (2001) International Conference on Software Engineering, pp. 123-132. , May 2001. ACM Press; Eisenbarth, T., Koschke, R., Simon, D., Derivation of feature component maps by means of concept analysis (2001) European Conference on Software Maintenance and Reengineering, pp. 176-180. , March 2001. IEEE Computer Society Press; Eisenbarth, T., Koschke, R., Simon, D., Aiding program comprehension by static and dynamic feature analysis (2001) International Conference on Software Maintenance, pp. 602-611. , November 2001. IEEE Computer Society Press; Eisenbarth, T., Koschke, R., Simon, D., Incremental location of combined features for large-scale programs (2002) International Conference on Software Maintenance, pp. 273-282. , October 2002. IEEE Computer Society Press; Eisenbarth, T., Koschke, R., Simon, D., Feature-driven program understanding using concept analysis of execution traces (2001) International Workshop on Program Comprehension, pp. 300-309. , May 2001. IEEE Computer Society Press; Eisenbarth, T., Koschke, R., Simon, D., Locating features in source code (2003) IEEE Computer Society Transactions on Software Engineering, 29 (3); Lukoit, K., Wilde, N., Stowell, S., Hennessey, T., Tracegraph: Immediate visual location of software features (2000) International Conference on Software Maintenance, , IEEE Computer Society Press; Marcus, A., Maletic, J.I., Recovering documentation-to-source-code traceability links using latent semantic indexing (2003) International Conference on Software Engineering, pp. 125-134. , May 2003. IEEE Computer Society Press; Murphy, G.C., Lai, A., Walker, R.J., Robillard, M.P., Separating features in source code: An exploratory study (2001) International Conference on Software Engineering, pp. 275-284. , ACM Press; Pashov, I., Riebisch, M., Philippow, I., Supporting architectural restructuring by analyzing feature models (2004) European Conference on Software Maintenance and Reengineering, pp. 25-34. , IEEE Computer Society Press; Wilde, N., Scully, M., Software reconnaissance: Mapping from features to code (1995) Journal on Software Maintenance and Evolution, 7, pp. 49-62. , January 1995; Wilde, N., Buckellew, M., Page, H., Rajlich, V., A case study of feature location in unstructured legacy fortran code (2001) European Conference on Software Maintenance and Reengineering, pp. 68-77. , March 2001. IEEE Computer Society Press; Zhao, W., Zhang, L., Liu, Y., Sun, J., Yang, F., Sniafl: Towards a static non-interactive approach to feature location (2004) International Conference on Software Engineering, pp. 293-303. , IEEE Computer Society Press; Di Lucca, G.A., Fasolino, A.R., De Carlini, U., Recovering use case models from object-oriented code: A thread-based approach (2000) Working Conference on Reverse Engineering, , IEEE Computer Society Press; El-Ramly, M., Stroulia, E., Sorenson, P., Mining system-user interaction traces for use case models (2002) International Workshop on Program Comprehension, pp. 21-30. , June 2002. IEEE Computer Society Press; Krone, M., Snelting, G., On the inference of configuration structures from source code (1994) International Conference on Software Engineering, pp. 49-57. , ACM Press; Snelting, G., Reengineering of configurations based on mathematical concept analysis (1996) ACM Transactions on Software Engineering and Methodology, 5 (2), pp. 146-189. , April 1996; Eisenbarth, T., Koschke, R., Vogel, G., Static object trace extraction for programs with pointers (2005) Journals of Systems and Software, , accepted for publication; Eisenbarth, T., Koschke, R., Vogel, G., Static trace extraction (2002) Working Conference on Reverse Engineering, , IEEE Computer Society Press; Ivkovic, I., Godfrey, M.W., Architecture recovery of dynamically linked applications: A case study (2002) International Workshop on Program Comprehension, pp. 178-184. , June 2002. IEEE Computer Society Press; Marburger, A., Herzberg, D., E-cares research project: Understanding complex legacy telecommunication systems (2001) European Conference on Software Maintenance and Reengineering, pp. 139-147. , March 2001. IEEE Computer Society Press; Moe, J., Carr, D.A., Understanding distributed systems via execution trace data (2001) International Workshop on Program Comprehension, pp. 60-69. , May 2001. IEEE Computer Society Press; Chase, M.P., Christey, S.M., Harris, D.R., Yeh, A.S., Recovering software architecture from multiple source code analyses (1998) Program Analysis for Software Technology, pp. 43-50. , ACM Press; Chase, M.P., Christey, S.M., Harris, D.R., Yeh, A.S., Managing recovered function and structure of legacy software components (1998) Working Conference on Reverse Engineering, , IEEE Computer Society Press; Fiutem, R., Tonella, P., Antoniol, G., Merlo, E., A cliche-based environment to support architectural reverse engineering (1996) International Conference on Software Maintenance, , IEEE Computer Society Press; Harris, R., Reubenstein, H.B., Yeh, A.S., Reverse engineering to the architectural level (1995) International Conference on Software Engineering, pp. 186-195. , ACM Press; Harris, D.R., Reubenstein, H.B., Yeh, A.S., Recognizers for extracting architectural features from source code (1996) Working Conference on Reverse Engineering, pp. 252-261. , July 1996. IEEE Computer Society Press; Holtzblatt, L.J., Piazza, R.L., Reubenstein, H.B., Roberts, S.N., Harris, D.R., Design recovery for distributed systems (1997) IEEE Computer Society Transactions on Software Engineering, 23 (7), pp. 461-472. , July 1997; Pinzger, M., Gall, H., Pattern-supported architecture recovery (2002) International Workshop on Program Comprehension, pp. 53-62. , June 2002. IEEE Computer Society Press; Tonella, P., Fiutem, R., Antoniol, G., Merlo, E., Augmenting pattern-based architectural recovery with flow analysis: Mosaica case study (1996) Working Conference on Reverse Engineering, , IEEE Computer Society Press; De Pauw, W., Jensen, E., Mitchell, N., Sevitsky, G., Vlissides, J., Yang, J., Visualizing the execution of Java programs (2001) LNCS, 2269, pp. 151-162. , Proceedings of the International Seminar on Software Visualization. Springer-Verlag Berlin; Briand, L.C., Labiche, Y., Miao, Y., Towards the reverse engineering of uml sequence diagrams (2003) Working Conference on Reverse Engineering, pp. 57-66. , November 2003. IEEE Computer Society Press; Jerding, D.F., Stasko, J.T., Ball, T., Visualizing interactions in program executions (1997) International Conference on Software Engineering, pp. 360-370. , IEEE Computer Society Press; Jerding, D., Rugaber, S., Using visualization for architectural localization and extraction (1997) Working Conference on Reverse Engineering, , IEEE Computer Society Press; Kollmann, R., Gogolla, M., Capturing dynamic program behaviour with UML collaboration diagrams (2001) European Conference on Software Maintenance and Reengineering, pp. 58-67. , IEEE Computer Society Press; Krikhaar, R., Feijs, L., De Long, R., Medema, J., Architecture comprehension tools for a PBX system (1999) European Conference on Software Maintenance and Reengineering, , IEEE Computer Society Press; Systä, T., Koskimies, K., Müller, H., Shimba - An environment for reverse engineering Java software systems (2001) Software - Practice and Experience, 31 (4), pp. 371-394. , Wiley; Systä, T., Understanding the behavior of Java programs (2000) Working Conference on Reverse Engineering, pp. 214-223. , November 2000. IEEE Computer Society Press; Systä, T., On the relationships between static and dynamic models in reverse engineering java software (1999) Proceedings of the 6th Working Conference on Reverse Engineering, pp. 304-313. , Atlanta, GA, USA, October 1999. IEEE Computer Society Press; Souder, T., Mancoridis, S., Salah, M., Form: A framework for creating views of program executions (2001) International Conference on Software Maintenance, pp. 612-621. , November 2001. IEEE Computer Society Press; Yan, H., Garlan, D., Schmerl, B., Aldrich, J., Kazman, R., Discotect: A system for discovering architectures from running systems (2004) International Conference on Software Engineering, pp. 470-479. , ACM Press; Wu, J., Hassan, A.E., Holt, R.C., Using graph patterns to extract scenarios (2002) International Workshop on Program Comprehension, pp. 239-248. , June 2002. IEEE Computer Society Press; Biggerstaff, T.J., Mitbander, B.G., Webster, D., The concept assignment problem in program understanding (1993) International Conference on Software Engineering, pp. 482-498. , ACM Press; Gall, H., Jazayeri, M., Klösch, R., Lugmayr, W., Trausmuth, G., Architecture recovery in ares (1996) Joint Proceedings of the Second International Software Architecture Workshop (1SAW-2) and International Workshop on Multiple Perspectives in Software Development (Viewpoints '96) on SIGSOFT '96 Workshops, pp. 111-115. , ACM Press; Bowman, I.T., Holt, R.C., Reconstructing ownership architectures to help understand software systems (1999) International Workshop on Program Comprehension, , IEEE Computer Society Press; Tu, Q., Godfrey, M.W., The build-time software architecture view (2001) International Conference on Software Maintenance, pp. 398-407. , November 2001. IEEE Computer Society Press; Chase, M.P., Harris, D.R., Roberts, S.N., Yeh, A.S., Analysis and presentation of recovered software architectures (1996) Working Conference on Reverse Engineering, , IEEE Computer Society Press; Issarny, V., Saridakis, T., Zarras, A., Multi-view description of software architectures (1998) ISAW '98, Proceedings of the Third International Workshop on Software Architecture, pp. 81-84; Kazman, R., Carriere, S.J., View extraction and view fusion in architectural understanding (1998) Proceedings of the Fifth Internation Conference on Software Reuse, , IEEE Computer Society Press; Waters, R., Abowd, G.D., Architectural synthesis: Integrating multiple architectural perspectives (1999) Working Conference on Reverse Engineering, , IEEE Computer Society Press; Yeh, A.S., Harris, D.R., Chase, M.P., Manipulating recovered software architecture views (1997) International Conference on Software Engineering, pp. 184-194. , ACM Press; Canfora, G., Cimitile, A., Munro, M., Taylor, C.J., Extracting abstract data types from C programs: A case study (1993) International Conference on Software Maintenance, pp. 200-209. , September 1993. IEEE Computer Society Press; Canfora, G., Cimitile, A., Munro, M., An improved algorithm for identifying objects in code (1996) Journal of Software Practice and Experience, 26 (1), pp. 25-48. , January1996; Canfora, G., Cimitile, A., De Lucia, A., Di Lucca, G.A., A case study of applying an eclectic approach to identify objects in code (1999) International Workshop on Program Comprehension, pp. 136-143. , IEEE Computer Society Press; Choi, S.C., Scacchi, W., Extracting and restructuring the design of large systems (1990) IEEE Software, 7 (1), pp. 66-71. , January 1990; Belady, L.A., Evangelisti, C.J., System partitioning and its measure (1982) Journal of Systems and Software, 2 (1), pp. 23-29. , February 1982; Graudejus, H., (1998) Implementing a Concept Analysis Tool for Identifying Abstract Data Types in C Code, , Diplomarbeit, University of Kaiserslautern, Germany; Hutchens, D.H., Basili, V.R., System structure analysis: Clustering with data bindings (1985) IEEE Computer Society Transactions on Software Engineering, 11 (8), pp. 749-757. , August 1985; Liu, S.S., Wilde, N., Identifying objects in a conventional procedural language: An example of data design recovery (1990) International Conference on Software Maintenance, pp. 266-271. , November 1990. IEEE Computer Society Press; Livadas, P.E., Johnson, T., A new approach to finding objects in programs (1994) Journal on Software Maintenance and Evolution, 6, pp. 249-260; Ogando, R.M., Yau, S.S., Wilde, N., An object finder for program structure understanding in software maintenance (1994) Journal on Software Maintenance and Evolution, 6 (5), pp. 261-283. , September-October 1994; Patel, S., Chu, W., Baxter, R., A measure for composite module cohesion (1992) International Conference on Software Engineering, pp. 38-48. , ACM Press; Sahraoui, H., Melo, W., Lounis, H., Dumont, F., Applying concept formation methods to object identfication in procedural code (1997) International Conference on Automated Software Engineering, pp. 210-218. , November 1997. IEEE Computer Society Press; Valasareddi, R.R., Carver, D.L., A graph-based object identification process for procedural programs (1998) Working Conference on Reverse Engineering, pp. 50-58. , October 1998. IEEE Computer Society Press; Weidl, J., Gall, H., Binding object models to source code: An approach to object-oriented re-architecturing (1998) Proc. of the 22nd Computer Software and Applications Conference, , IEEE Computer Society Press; Yeh, A.S., Harris, D., Reubenstein, H., Recovering abstract data types and object instances from a conventional procedural language (1995) Working Conference on Reverse Engineering, pp. 227-236. , IEEE Computer Society Press; Cimitile, A., Visaggio, G., Software salvaging and the call dominance tree (1995) Journal of Systems and Software, 28, pp. 117-127; Schwanke, R.W., Hanson, S.J., Using neural networks to modularize software (1994) Machine Learning, 15, pp. 136-168; Girard, J.-F., Koschke, R., Schied, G., A metric-based approach to detect abstract data types and state encapsulations (1997) International Conference on Automated Software Engineering, , IEEE Computer Society Press; Girard, J.-F., Koschke, R., Schied, G., A metric-based approach to detect abstract data types and state encapsulations (1999) Journal on Automated Software Engineering, 6 (4). , Kluwer Academic Publishers; Koschke, R., (1999) Atomic Architectural Component Recovery for Program Understanding and Evolution, , http://www.iste.uni-Stuttgart.de/ps/rainer/thesis, Ph.d. thesis, University of Stuttgart, October 1999; Girard, J.-F., Koschke, R., A comparison of abstract data type and objects recovery techniques (2000) Journal Science of Computer Programming, Elsevier Science, 6 (2-3), pp. 149-181. , March 2000; Whaley, J., Martin, M.C., Lam, M.S., Automatic extraction of object-oriented component interfaces (2002) Proceedings of the International Symposium on Software Testing and Analysis, , July 2002; Murphy, G.C., Notkin, D., Reengineering with reflexion models: A case study (1997) IEEE Computer, 30 (8), pp. 29-36. , August 1997; Eisenbarth, T., (2004) Instanzbasierte Architekturerkennung, , Ph.d. thesis, Universität Stuttgart, Germany; De Pauw, W., Helm, R., Kimelman, D., Vlissisdes, J., Visualizing the behavior of object-orient systems (1993) Proceedings of the ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages and Applications (OOPSLA), pp. 326-337. , Washington, DC, USA, September 1993. ACM Press; De Pauw, W., Kimelman, D., Vlissides, J., Modeling object-oriented program execution (1994) Lecture Notes in Computer Science, 821, pp. 163-182. , Proceedings of the 8th European Conference on Object-Oriented Programming, Bologna, Italy, July 1994. Springer; Shaw, M., Garlan, D., (1996) Software Architecture: Perspectives on an Emerging Discipline, , Prentice Hall, Englwood Cliffs, NJ; Buschmann, F., Meunier, R., Rohnert, H., Sommerlad, P., Stal, M., (1996) Pattern-oriented Software Architecture: A System of Patterns, 1. , Wiley; Breu, S., (2004) Aspect Mining Using Event Traces, , Diplomarbeit, Universität Passau; Bruntink, M., Van Deursen, A., Tourwé, T., Van Engelen, R., An evaluation of clone detection techniques for identifying crosscutting concerns (2004) International Conference on Software Maintenance, , IEEE Computer Society Press},
correspondence_address1={Fb. Mathematik und Informatik, Arbeitsgruppe Softwaretechnik, U.Germany; email: koschke@informatik.uni-bremen.de},
issn={01783564},
language={German},
abbrev_source_title={Inform. Forsch. Entwickl.},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Dean2004,
author={Dean, T. and Koschke, R. and Van De Vanter, M.},
title={Message from the Chairs},
journal={Proceedings - Fourth IEEE International Workshop on Source Code Analysis and Manipulation},
year={2004},
pages={vii},
note={cited By 0; Conference of Proceedings - Fourth IEEE International Workshop on Source Code Analysis and Manipulation ; Conference Date: 15 September 2004 Through 16 September 2004;  Conference Code:64344},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-14344253304&partnerID=40&md5=52e2a507738dcbbe5a62745db0ef0df9},
sponsors={IEEE Computer Society Technical Council on Software Engineering; Loyola College in Maryland; Raincode; Brunel University, VASTT Group},
address={Chicago, IL},
isbn={0769521444},
language={English},
abbrev_source_title={Proc. Fourth IEEE Int. Workshop Source Code Anal. Manipulation},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{VanDeursen2004122,
author={Van Deursen, A. and Hofmeister, C. and Koschke, R. and Moonen, L. and Riva, C.},
title={Symphony: View-driven software architecture reconstruction},
journal={Proceedings - Fourth Working IEEE/IFIP Conference on Software Architecture (WICSA 2004)},
year={2004},
pages={122-132},
doi={10.1109/WICSA.2004.1310696},
note={cited By 77; Conference of Proceedings - Fourth Working IEEE/IFIP Conference on Software Architecture (WICSA 2004) ; Conference Date: 12 June 2004 Through 15 June 2004;  Conference Code:63652},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-4944223220&doi=10.1109%2fWICSA.2004.1310696&partnerID=40&md5=aec7ad30b8027a351daee0e68e3edd06},
affiliation={CWI, Delft Univ. of Technology, Netherlands; Lehigh University, United States; University of Stuttgart, Germany; Nokia Research Center, Helsinki, Finland},
abstract={Authentic descriptions of a software architecture are required as a reliable foundation for any but trivial changes to a system. Far too often, architecture descriptions of existing systems are out of sync with the implementation. If they are, they must be reconstructed. There are many existing techniques for reconstructing individual architecture views, but no information about how to select views for reconstruction, or about process aspects of architecture reconstruction in general. In this paper we describe view-driven process for reconstructing software architecture that fills this gap. To describe Symphony, we present and compare different case studies, thus serving a secondary goal of sharing real-life reconstruction experience. The Symphony process incorporates the state of the practice, where reconstruction is problem-driven and uses a rich set of architecture views. Symphony provides a common framework for reporting reconstruction experiences and for comparing reconstruction approaches. Finally, it is a vehicle for exposing and demarcating research problems in software architecture reconstruction.},
keywords={Hyperstructure;  Software architecture;  Source text;  Symphony process, Codes (symbols);  Information analysis;  Knowledge engineering;  Problem solving;  Risk assessment;  Systems analysis, Software engineering},
references={Andersen, K.M., Taylor, R.N., Whitehead Jr., E.J., Chimera: Hypertext for heterogeneous software environments (1994) Proc. European Conference on Hypermedia Technology, , ACM; Bassil, S., Keller, R.K., Software visualization tools: Survey and analysis (2001) Proc. Int. Workshop on Program Comprehension (IWPC), pp. 7-17. , IEEE CS, May; Chase, M.P., Harris, D., Yeh, A., Manipulating recovered software architecture views (1997) Proc. Int. Conf. on Software Engineering (ICSE), pp. 184-194. , ACM; Clements, P., Bachmann, F., Bass, L., Garlan, D., Ivers, J., Little, R., Nord, R., Stafford, J., (2002) Documenting Software Architectures: Views and Beyond, , Addison-Wesley; Van Deursen, A., Hofmeister, C., Koschke, R., Moonen, L., Riva, C., Symphony: View-driven software architecture reconstruction (2004) Technical Report, SEN-R0404. , http://www.cwi.nl/ftp/CWIreports/SEN/SEN-R0404.pdf, CWI; Van Deursen, A., Kuipers, T., Building documentation generators (1999) Proc. Int. Conf. on Software Maintenance (ICSM), pp. 40-49. , IEEE CS; Van Deursen, A., Kuipers, T., Source-based software risk assessment (2003) Proc. Int. Conf. on Software Maintenance (ICSM), , IEEE CS; Devanbu, P., Chen, R., Gansner, E., Müller, H., Martin, A., Chime: Customizable hyperlink insertion and maintenance engine for software engineering environments (1999) Proc. Int. Conf. on Software Engineering (ICSE), , ACM; Ding, L., Medvidovic, N., A light-weight, incremental approach to software architecture recovery and evolution (2001) Proc. Working Conf. on Software Architecture (WICSA), pp. 191-200. , IEEE CS; Feijs, L., Krikhaar, R., Van Ommering, R., A relational approach to support software architecture analysis (1998) Software Practice and Experience, 28 (4), pp. 371-400; Finnigan, P.J., Holt, R.C., Kalas, I., Kerr, S., Kontogiannis, K., Müller, H.A., Mylopoulos, I., Wong, K., The software bookshelf (1997) IBM Systems Journal, 36 (4), pp. 564-593. , Oct; Guo, G.Y., Atlee, J.M., Kazman, R., A software architecture reconstruction method (1999) Proc. Working Conf. on Software Architecture (WICSA), pp. 15-33; Hillard II, R.F., Rice, T.B., Schwarm, S.C., The architectural metaphor as foundation for system engineering (1995) Proc. Ann. Symp. of the Int. Council on Systems Engineering; Hofmeister, C., Nord, R., Soni, D., (2000) Applied Software Architecture, , Object Technology Series. Addison Wesley; Holt, R.C., Structural manipulations of software architecture using tarski relational algebra (1998) Proc. Working Conf. on Reverse Engineering (WCRE); (2000) IEEE Recommended Practice for Architectural Description of Software-intensive Systems, , IEEE P1471-2000; Kazman, R., Carrière, S.J., View extraction and view fusion in architectural understanding (1998) Proc. Int. Conf. on Software Reuse (ICSR); Knight, C., Munro, M., Mediating diverse visualisations for comprehension (2001) Proc. Int. Workshop on Program Comprehension (IWPC), pp. 18-25. , IEEE CS, May; Koppler, R., A systematic approach to fuzzy parsing (1997) Software Practice and Experience, 27 (6), pp. 637-649; Koschke, R., Software visualization in software maintenance, reverse engineering, and reengineering: A research survey (2003) Journal on Software Maintenance and Evolution, 15 (2), pp. 87-109; Koschke, R., Simon, D., Hierarchical reflexion models (2003) Proc. Working Conf. on Reverse Engineering (WCRE), , IEEE CS, Nov; Laine, P.K., The role of sw architectures in solving fundamental problems in object-oriented development of large embedded sw systems (2001) Proc. Working Conf on Software Architecture (WICSA); Mens, K., (2000) Automating Architectural Conformance Checking by Means of Logic Meta Programming, , PhD thesis, Departement Informatica, Vrije Universiteit Brussel; Moonen, L., Generating robust parsers using island grammars (2001) Proc. Working Conf. on Reverse Engineering (WCRE), pp. 13-22. , IEEE CS, Oct; Moonen, L., (2002) Exploring Software Systems, , PhD thesis, Faculty of Natural Sciences, Mathematics, and Computer Science, University of Amsterdam, Dec; Murphy, G.C., Notkin, D., Lightweight lexical source model extraction (1996) ACM Transactions on Software Engineering and Methodology, 5 (3), pp. 262-292. , July; Murphy, G.C., Notkin, D., Sullivan, K.J., Software reflexion models: Bridging the gap between design and implementation (2001) IEEE CS Transactions on Software Engineering, 27 (4), pp. 364-380. , Apr; Postma, A., A method for module architecture verifi cation and its application on a large component-based system (2003) Information and Software Technology, 45, pp. 171-194; Riva, C., Architecture reconstruction in practice (2002) Proc. Working Conf. on Software Architecture (WICSA); Ross, D.T., Removing the limitations of natural languages (with the principles behind the RSA language) (1980) Proc. the Software Engineering Workshop, , Academic Press; Stoermer, C., O'Brien, L., Verhoef, C., Practice patterns for architecture reconstruction (2002) Proc. Working Conf. on Reverse Engineering (WCRE), , IEEE CS; Tilley, S., Paul, S., Smith, D.B., Towards a framework for program understanding (1996) Proc. Int. Workshop on Program Comprehension (IWPC), pp. 19-28. , IEEE CS; Wiggins, M., An overview of program visualization tools and systems (1998) Proc. 36th Annual Southeast Regional Conf., pp. 194-200. , ACM},
correspondence_address1={Van Deursen, A.; CWI, Delft Univ. of Technology, Delft, Netherlands; email: Arie.van.Deursen@cwi.nl},
editor={Magee J., Szyperski C., Bosch J.},
sponsors={IEEE Computer Society (TCSE)},
address={Oslo},
isbn={076952172X; 9780769521725},
language={English},
abbrev_source_title={Proc. Fourth Work. IEEE IFIP Conf. Softw. Archit.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Bojic2004140,
author={Bojic, D. and Eisenbarth, T. and Koschke, R. and Simon, D. and Velasevic, D.},
title={Erratum: Locating features in source code (IEEE Trans. Software Eng. (2003) 29, 3, (210-224))},
journal={IEEE Transactions on Software Engineering},
year={2004},
volume={30},
number={2},
pages={140},
doi={10.1109/TSE.2004.1265818},
note={cited By 2},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-12144288323&doi=10.1109%2fTSE.2004.1265818&partnerID=40&md5=886563c061ae956cbcec6e05e982d1b2},
affiliation={Faculty of Electrical Engineering, University of Belgrade, Bulevar Kralja Aleksandra 73, 11000 Beograd, Serbia; Institute of Software Technology, University of Stuttgart, Universitätsstr. 38, 70569 Stuttgart, Germany},
keywords={Errors},
references={Eisenbarth, T., Koschke, R., Simon, D., Locating features in source code (2003) IEEE Trans. Software Eng., 29 (3), pp. 210-224. , Mar; Bojic, D., Velasevic, D., A use-case driven method of architecture recovery for program understanding and reuse engineering (2000) Proc. Fourth European Conf. Software Maintenance and Reeng., pp. 23-32. , Feb; Ball, T., The concept of dynamic analysis (1999) Proc. Seventh European Software Eng. Conf., pp. 216-234. , Sept; Bojic, D., Velasevic, D., URCA approach to scenario-based round-trip engineering (2000) Proc. OOPSLA 2000 Workshop Scenario-Based Round-Trip Eng., pp. 51-56. , Oct},
correspondence_address1={Bojic, D.; Faculty of Electrical Engineering, University of Belgrade, Bulevar Kralja Aleksandra 73, 11000 Beograd, Serbia; email: bojic@etf.bg.ac.yu},
publisher={Institute of Electrical and Electronics Engineers Inc.},
issn={00985589},
coden={IESED},
language={English},
abbrev_source_title={IEEE Trans Software Eng},
document_type={Erratum},
source={Scopus},
}

@CONFERENCE{Koschke200336,
author={Koschke, R. and Simon, D.},
title={Hierarchical Reflexion Models},
journal={Reverse Engineering - Working Conference Proceedings},
year={2003},
pages={36-45},
doi={10.1109/WCRE.2003.1287235},
note={cited By 28; Conference of Tenth Working Conference on Reverse Engineering ; Conference Date: 13 November 2003 Through 16 November 2003;  Conference Code:62035},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0347412103&doi=10.1109%2fWCRE.2003.1287235&partnerID=40&md5=c1c283279bcd7c3370699cb0899605c3},
affiliation={University of Stuttgart, Universitätsstr. 38, 70569 Stuttgart, Germany},
abstract={The reflexion model originally proposed by Murphy and Notkin allows one to structurally validate a descriptive or prescriptive architecture model against a source model. First, the entities in the source model are mapped onto the architectural model, then discrepancies between the architecture model and source model are computed automatically. The original reflexion model allows an analyst to specify only non-hierarchical architecture models, which is insufficient for larger systems that are decomposed into hierarchical subsystems. This paper extends the original reflexion model to hierarchical architecture models, describes a method to apply this technique, and reports on case studies conducted on two large-scale and complex applications (namely, the C compiler sdcc for 8-bit microprocessors and the GNU C compiler gcc).},
keywords={Architecture reconstruction;  Software architecture;  Software platforms, Computer programming languages;  Data reduction;  Mapping;  Mathematical models;  Multiprocessing systems;  Program compilers, Hierarchical systems},
references={(2003), http://vww.bauhaus-stuttgaxt.de/, June; Hofmeister, C., Nord, R., Soni, D., (2000) Applied Software Architecture, , Object Technology Series. Addison Wesley; (2000) IEEE Recommended Practice for Architectural Description of Software-intensive Systems - Std., pp. 1471-2000; Knodel, J., (2002) Process Models for the Reconstruction of Software Architecture Views, , Diploma thesis no. 1987, university of Stuttgart, Computer Science, July; Koschke, R., (2000) Atomic Architectural Component Recovery for Program Understanding and Evolution, , http://www.iste.uni-Stuttgart.de/ps/rainer/thesis, PhD thesis, Institute for Computer Science. University of Stuttgart; Murphy, G.C., Notkin, D., Reengineering with reflexion models: A case study (1997) IEEE Computer, 30 (8), pp. 29-36. , Aug; (1998) Nikkei Computer, 19, pp. 161-169. , January; Murphy, G.C., Notkin, D., Sullivan, K., Software reflexion models: Bridging the gap between source and high-level models (1995) Proc. of the Third ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 18-28. , New York, NY. ACM Press; Murphy, G.C., Notkin, D., Sullivan, K.J., Software reflexion models: Bridging the gap between design and implementation (2001) IEEE TSE, 27 (4), pp. 364-380. , Apr; (2003) sdcc, a c Compiler for Small Devices, , http://sourceforge.net/projects/sdcc/, June; Shaw, M., Garlan, D., (1993) Advances in Software Engineering and Knowledge Engineering, , chapter An Introduction to Software Architecture. World Scientific Publishing Company, River Edge, NJ; Steensgaard, B., Points-to analysis in almost linear time (1996) Symposium on Principles of Programming Languages, pp. 32-41},
correspondence_address1={Koschke, R.; University of Stuttgart, Universitätsstr. 38, 70569 Stuttgart, Germany; email: koschke@informatik.uni-stuttgart.de},
editor={Deursen A., Stroulia E., Storey M.A.},
sponsors={Reengineering Forum; IEEE Computer Society Technical Council on Software Engineering},
address={Victoria, BC},
language={English},
abbrev_source_title={Rev Eng Working Conf Proc},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Lakhotia2003368,
author={Lakhotia, A. and Walenstein, A. and Koschke, R.},
title={Second International Workshop on Detection of Software Clones},
journal={Reverse Engineering - Working Conference Proceedings},
year={2003},
pages={368},
doi={10.1109/WCRE.2003.1287269},
note={cited By 0; Conference of Tenth Working Conference on Reverse Engineering ; Conference Date: 13 November 2003 Through 16 November 2003;  Conference Code:62035},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0346151263&doi=10.1109%2fWCRE.2003.1287269&partnerID=40&md5=2b8c389516f52f97088049b5f5a2e993},
affiliation={Center for Advanced Computer Science, University of Louisiana at Lafayette, United States; Institute for Software Technology, University of Stuttgart, Germany},
abstract={The Second International Workshop on Detection of Software Clones will be held to to critically assess the current state of research and to establish new directions and partnerships for research. Position papers and an index card-based brainstorming technique will be employed to organize the discussion. The goal of the brainstorming session is to bring focus to the discussions in order to produce the desired outcomes. The identified topic clusters and the summary discussion will form the basis for a workshop report.},
keywords={Index cards;  Software clones, Benchmarking;  Computer software maintenance;  Engineering research;  Mathematical models;  Reengineering, Computer software},
correspondence_address1={Lakhotia, A.; Center for Advanced Computer Science, University of Louisiana at Lafayette, Lafayette, IN, United States; email: arun@louisiana.edu},
editor={Deursen A., Stroulia E., Storey M.A.},
sponsors={Reengineering Forum; IEEE Computer Society Technical Council on Software Engineering},
address={Victoria, BC},
language={English},
abbrev_source_title={Rev Eng Working Conf Proc},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Koschke200387,
author={Koschke, R.},
title={Software visualization in software maintenance, reverse engineering, and re-engineering: A research survey},
journal={Journal of Software Maintenance and Evolution},
year={2003},
volume={15},
number={2},
pages={87-109},
doi={10.1002/smr.270},
note={cited By 111},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0038325654&doi=10.1002%2fsmr.270&partnerID=40&md5=ba18e37983d7309ef3afef758f13004e},
affiliation={Institut fur Softwaretechnologie, Universität Stuttgart, Breitwiesenstrasse 20-22, 70565 Stuttgart, Germany},
abstract={Software visualization is concerned with the static visualization as well as the animation of software artifacts, such as source code, executable programs, and the data they manipulate, and their attributes, such as size, complexity, or dependencies. Software visualization techniques are widely used in the areas of software maintenance, reverse engineering, and re-engineering, where typically large amounts of complex data need to be understood and a high degree of interaction between software engineers and automatic analyses is required. This paper reports the results of a survey on the perspectives of 82 researchers in software maintenance, reverse engineering, and re-engineering on software visualization. It describes to which degree the researchers are involved in software visualization themselves, what is visualized and how, whether animation is frequently used, whether the researchers believe animation is useful at all, which automatic graph layouts are used if at all, whether the layout algorithms have deficiencies, and - last but not least - where the medium-term and long-term research in software visualization should be directed. The results of this survey help to ascertain the current role of software visualization in software engineering from the perspective of researchers in these domains and give hints on future research avenues.},
author_keywords={Re-engineering;  Reverse engineering;  Software maintenance;  Software visualization},
keywords={Algorithms;  Animation;  Automatic testing;  Computational complexity;  Human computer interaction;  Reengineering;  Reverse engineering;  Visualization, Automatic analysis;  Software visualization, Computer software maintenance},
references={Roman, G.-C., Cox, K.C., Program visualization: The art of mapping programs to pictures (1992) Proceedings of the International Conference on Software Engineering, pp. 412-420. , ACM Press: New York; Hendrix, T.D., Cross, J.H., Maghsoodloo, S., McKinney, M.L., Do visualizations improve program comprehensibility experiments with control structure diagrams for Java? (2000) Proceedings of the 31st SIGCSE Technical Symposium on Computer Science Education, pp. 382-386. , ACM Press: New York; Curtis, B., Sheppard, S.B., Kruesi-Bailey, E., Bailey, J., Boehm-Davis, D.A., Experimental evaluation of software documentation formats (1989) Journal of Systems and Software, 9 (2), pp. 167-207; Green, T.R.G., Petre, M., When visual programs are harder to read than textual programs (1992) Proceedings of the 6th European Conference on Cognitive Ergonomics, pp. 167-180. , Springer: Berlin; Fjeldstad, R.K., Hamlen, W.T., Application program maintenance study: Report to our respondents (1982) Tutorial on Software Maintenance, pp. 13-30. , IEEE Computer Society Press: Los Alamitos CA; (2002) Software Visualization, International Seminar, Dagstuhl Castle, Revised Papers, , Diehl S (ed.); Springer: Berlin; Bassil, S., Keller, R.K., Software visualization tools: Survey and analysis (2001) Proceedings International Workshop on Program Comprehension, pp. 7-17. , IEEE Computer Society Press: Los Alamitos CA; Whitley, K.N., Visual programming languages and the empirical evidence for and against (1997) Journal of Visual Languages and Computing, 8 (1), pp. 109-142; Gilmore, D.J., Green, T.R.G., Comprehension and recall of miniature programs (1984) International Journal of Man-Machine Studies, 21 (1), pp. 31-48; Blackwell, A.F., Metacognitive theories of visual programming: What do we think we are doing? (1996) Proceedings IEEE Symposium on Visual Languages, pp. 240-246. , IEEE Computer Society Press: Los Alamitos CA; Brown, M.H., (1988) Algorithm Animation, , MIT Press: Cambridge MA; Knight, C., Munro, M., Mediating diverse visualizations for comprehensions (2001) Proceedings International Workshop on Program Comprehension, pp. 18-25. , IEEE Computer Society Press: Los Alamitos CA; Wiggins, M., An overview of program visualization tools and systems (1998) Proceedings of the 36th Annual Conference on Southeast Regional Conference, pp. 194-200. , ACM Press: New York NY; Koschke, R., Software visualization in software maintenance, reverse engineering, and reengineering-A research survey (2002), http://www.bauhaus-stuttgart.de/softviz, [23 July]; Horwitz, S., Reps, T., Binkley, D., Interprocedural slicing using dependence graphs (1990) ACM Transactions on Programming Languages and Systems, 12 (1), pp. 26-60; Selic, B., Gullekson, G., Ward, P.T., (1994) Real-Time Object-Oriented Modeling, , Wiley: Chichester; Storey, M.-A., Wong, K., Müller, H., How do program understanding tools affect how programmers understand programs? (1997) Proceedings Working Conference on Reverse Engineering, pp. 12-21. , IEEE Computer Society Press: Los Alamitos CA; Müller, H., Wong, K., Tilley, S., A reverse engineering environment spatial and visual software interconnection models (1992) ACM SIGSOFT Symposium Software Development Environments, pp. 88-98. , ACM Press: New York; Petre, M., Why looking isn't always seeing: Readership skills and graphical programming (1995) Communications of the ACM, 38 (6), pp. 33-44; Quigley, A., Eades, P., Graph drawing, clustering, and visual abstraction (2000) Proceedings of the 8th International Symposium on Graph Drawing (Lecture Notes in Computer Science), 1984, pp. 197-210. , Springer: Berlin; Ware, C., Hui, D., Franck, G., Visualizing object-oriented software in three dimensions (1993) Proceedings of the IBM Centre for Advanced Studies Conference (CASCON), pp. 612-620. , IBM: Toronto, Canada; Ware, C., Franck, G., Evaluating stereo and motion cues for visualizing information nets in three dimensions (1996) ACM Transactions on Graphics, 15 (2), pp. 121-140; Purchase, H., Cohen, R.F., James, M.I., Validating graph drawing aesthetics (1995) Proceedings of the International Symposium on Graph Drawing (Lecture Notes in Computer Science), 1027, pp. 435-446. , Springer: Berlin; Holt, R., Winter, A., Schür, A., GXL. Toward a standard exchange format (2000) Proceedings 7th Working Conference on Reverse Engineering, pp. 162-171. , IEEE Computer Society Press: Los Alamitos CA},
correspondence_address1={Koschke, R.; Institut fur Softwaretechnologie, Universität Stuttgart, Breitwiesenstrasse 20-22, 70565 Stuttgart, Germany; email: koschke@informatik.uni-stuttgart.de},
issn={1532060X},
coden={JSMEC},
language={English},
abbrev_source_title={J. Software Maint. Evol.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Eisenbarth2003210,
author={Eisenbarth, T. and Koschke, R. and Simon, D.},
title={Locating features in source code},
journal={IEEE Transactions on Software Engineering},
year={2003},
volume={29},
number={3},
pages={210-224},
doi={10.1109/TSE.2003.1183929},
note={cited By 401},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0037341520&doi=10.1109%2fTSE.2003.1183929&partnerID=40&md5=f12ea267fe44487cea71f506913524cc},
affiliation={Institute of Computer Science, University of Stuttgart, Breitwiesenstraße 20-22, D-70565 Stuttgart, Germany},
abstract={Understanding the implementation of a certain feature of a system requires identification of the computational units of the system that contribute to this feature. In many cases, the mapping of features to the source code is poorly documented. In this paper, we present a semiautomatic technique that reconstructs the mapping for features that are triggered by the user and exhibit an observable behavior. The mapping is in general not injective; that is, a computational unit may contribute to several features. Our technique allows for the distinction between general and specific computational units with respect to a given set of features. For a set of features, it also identifies jointly and distinctly required computational units. The presented technique combines dynamic and static analyses to rapidly focus on the system's parts that relate to a specific set of features. Dynamic information is gathered based on a set of scenarios invoking the features. Rather than assuming a one-to-one correspondence between features and scenarios as in earlier work, we can now handle scenarios that invoke many features. Furthermore, we show how our method allows incremental exploration of features while preserving the "mental map" the analyst has gained through the analysis.},
author_keywords={Feature location;  Formal concept analysis;  Program analysis;  Program comprehension;  Software architecture recovery},
keywords={Codes (symbols);  Computational methods;  Computer programming;  Cost effectiveness;  Web browsers, Source codes, Software engineering},
references={Lehman, M.M., Programs, life cycles and the laws of software evolution (1980) Proc. IEEE, Special Issue on Software Evolution, 68 (9), pp. 1060-1076. , Sept; Koschke, R., (2000) Atomic Architectural Component Recovery for Program Understanding and Evolution, , Dissertation, Univ. Stuttgart, Germany; Eisenbarth, T., Koschke, R., Simon, D., (2002) Locating Features in Source Code-Case Studies, , http://www.bauhaus-stuttgart.de/bauhaus/papers/, Oct; Eisenbarth, T., Koschke, R., Simon, D., Derivation of feature-component maps by means of concept analysis (2001) Proc. Fifth European Conf. Software Maintenance and Reeng, pp. 176-179. , Mar; (2001) The XFIG Drawing Tool Version 3.2.3d, , http://www.xfig.org; Rumbaugh, J., Jacobson, I., Booch, G., (1999) The Unified Modeling Language Reference Manual, , Addison-Wesley; Wilde, N., Scully, M.C., Software reconnaissance: Mapping program features to code (1995) J. Software Maintenance: Research and Practice, 7, pp. 49-62. , Jan; Horwitz, S., Reps, T., Binkley, D., Interprocedural slicing using dependence graphs (1990) ACM Trans. Programming Languages and Systems, 12 (1), pp. 26-60. , Jan; Beszédes, Á., Gergely, T., Szabó, Z.M., Csirik, J., Gyimóthy, T., Dynamic slicing method for maintenance of large C programs (2001) Proc. Fifth European Conf. Software Maintenance and Reeng, pp. 105-113. , Mar; Andersen, L.O., (1994) Program Analysis and Specialization for the C Programming Language, , PhD thesis, DIKU, Univ. of Copenhagen, Danmark; Antoniol, G., Calzolari, F., Tonella, P., Impact of function pointers on the call graph (1999) Proc. European Conf. Software Maintenance and Reeng, pp. 51-59. , Mar; Cheng, B.-C., Hwu, W.-M.W., Modular interprocedural pointer analysis using access paths (2000) Proc. Conf. Programming Language Design and Implementation, pp. 57-69; Das, M., Unification-based pointer analysis with directional assignments (2000) Proc. Conf. Programming Language Design and Implementation, pp. 35-46; Emami, M., Ghiya, R., Hendren, L.J., Context-sensitive interprocedural points-to analysis in the presence of function pointers (1994) Proc. Conf. Programming Language Design and Implementation, pp. 242-257; Wilson, R.P., Lam, M.S., Efficient context-sensitive pointer analysis for C programs (1995) Proc. Conf. Programming Language Design and Implementation, pp. 1-12; Zhang, S., Ryder, B.G., Landi, W., Program decompositon for pointer aliasing: A step towards pratical analyses (1996) Proc. Symp. Foundations of Software Eng., pp. 81-92; Steensgaard, B., Points-to analysis in almost linear time (1996) Proc. Symp. Principles of Programming Languages, pp. 32-41. , Jan; Diwan, A., McKinley, K., Moss, E., Using types to analyze and optimize object-oriented programs (2001) Programming Languages and Systems, 23 (1), pp. 30-72; Rountev, A., Milanova, A., Ryder, B.C., Points-to analysis for java using annotated constraints (2001) Proc. Conf. Object Oriented Programming Systems, Languages, and Applications, pp. 43-55. , Oct; Milanova, A., Rountev, A., Ryder, B.G., Precise call graph construction in the presence of function pointers (2002) Proc. Second Int'l Workshop Source Code Analysis and Manipulation, , Oct; Birkhoff, G., (1940) Lattice Theory, 25. , Providence, RI.: Am. Math. Soc. Colloquium Publications; Ganter, B., Wille, R., (1999) Formal Concept Analysis-Mathematical Foundations, , Springer; (1993), http://www.idef.com/idef0.html, Dec; Koskimies, K., Mössenböck, H., (1995) Scenario-Based Browsing of Object-Oriented Systems with Scene, , Technical Report 4, Johannes Kepler Univ., Linz, Austria Aug; Lange, D.B., Nakamura, Y., Program explorer: A program visualizer for C++ (1995) Proc. USENIX Conf. Object-Oriented Technologies, , June; Lange, D.B., Nakamura, Y., Object-oriented program tracing and visualization (1997) Computer, 30 (5), pp. 63-70. , May; Wilde, N., Gomez, J.A., Gust, T., Strasburg, D., Locating user functionality in old code (1992) Proc. Int'l Conf. Software Maintenance, pp. 200-205. , Nov; Wong, W.E., Gokhale, S.S., Horgan, J.R., Trivedi, K.S., Locating program features using execution slices (1999) Proc. IEEE Symp. Application-Specific Systems and Software Eng. and Technology, pp. 194-203. , Mar; Wong, W.E., Gokhale, S.S., Hogan, J.R., Quantifying the closeness between program components and features (2000) The J. Systems and Software, 54 (2), pp. 87-98. , Oct; Chen, K., Rajlich, V., Case study of feature location using dependence graph (2000) Proc. Eighth Int'l Workshop Program Comprehension, pp. 241-249. , June; Wilde, N., Buckellew, M., Page, H., Rajlich, V., A case study of feature location in unstructured legacy fortran code (2001) Proc. Fifth European Conf. Software Maintenance and Reeng, pp. 68-75. , Mar; Snelting, G., Tip, F., Reengineering class hierarchies using concept analysis (1998) Proc. Sixth SIGSOFT Symp. Foundations of Software Eng., pp. 99-110. , Nov; Krone, M., Snelting, G., On the inference of configuration structures from source code (1994) Proc. 16th Int'l Conf. Software Eng., pp. 49-58. , May; Snelting, G., Reengineering of configurations based on mathematical concept analysis (1996) ACM Trans. Software Eng. and Methodology, 5 (2), pp. 146-189. , Apr; Kuipers, T., Moonen, L., Types and concept analysis for legacy systems (2000) Proc. Eighth Int'l Workshop Program Comprehension, pp. 221-230. , June; Canfora, G., Cimitile, A., Delucia, A., Dilucca, G.A., A case study of applying an eclectic approach to identify objects in code (1999) Proc. Seventh Int'l Workshop Program Comprehension, pp. 136-143. , May; Graudejus, H., (1998) Implementing a Concept Analysis Tool for Identifying Abstract Data Types in C Code, , Diplomarbeit, Univ. Kaiserslautern, Germany; Lindig, C., Snelting, G., Assessing modular structure of legacy code based on mathematical concept analysis (1997) Proc. 19th Int'l Conf. Software Eng., pp. 349-359. , May; Sahraoui, H., Melo, W., Lounis, H., Dumont, F., Applying concept formation methods to object identification in procedural code (1997) Proc. Int'l Conf. Automated Software Eng., pp. 210-218. , Nov; Siff, M., Reps, T., Identifying modules via concept analysis (1997) Proc. Int'l Conf. Software Maintenance, pp. 170-179. , Oct; Van Deursen, A., Kuipers, T., Identifying objects using cluster and concept analysis (1999) Proc. 21st Int'l Conf. Software Eng., pp. 246-255; Tonella, P., Concept analysis for module restructuring (2001) IEEE Trans. Software Eng., 27 (4), pp. 351-363. , Apr; Ball, T., The concept of dynamic analysis (1999) ACM SIGSOFT Software Eng. Notes, 24 (6), pp. 216-234. , Nov; Eisenbarth, T., Koschke, R., Simon, D., Aiding program comprehension by static and dynamic feature analysis (2001) Proc. Int'l Conf. Software Maintainence, pp. 602-611. , Nov; Eisenbarth, T., Koschke, R., Simon, D., Incremental location of combined features for large-scale programs (2002) Proc. Int'l Conf. Software Maintainence, pp. 273-282. , Oct; (2002) The New Bauhaus Stuttgart, , http://www.bauhaus-stuttgart.de/},
correspondence_address1={Eisenbarth, T.; Institute of Computer Science, University of Stuttgart, Breitwiesenstraße 20-22, D-70565 Stuttgart, Germany; email: eisenbarth@informatik.uni-stuttgart.de},
issn={00985589},
coden={IESED},
language={English},
abbrev_source_title={IEEE Trans Software Eng},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koschke200336,
author={Koschke, R. and Simon, D.},
title={Hierarchical reflexion models},
journal={Proceedings - Working Conference on Reverse Engineering, WCRE},
year={2003},
volume={2003-January},
pages={36-45},
doi={10.1109/WCRE.2003.1287235},
art_number={1287235},
note={cited By 46; Conference of 10th Working Conference on Reverse Engineering, WCRE 2003 ; Conference Date: 13 November 2003 Through 16 November 2003;  Conference Code:114280},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84924726569&doi=10.1109%2fWCRE.2003.1287235&partnerID=40&md5=be6413da406bf48e08d2ee18cd292aca},
affiliation={University of Stuttgart, Universitätsstr. 38, Stuttgart, 70569, Germany},
abstract={The reflexion model originally proposed by Murphy and Notkin allows one to structurally validate a descriptive or prescriptive architecture model against a source model. First, the entities in the source model are mapped onto the architectural model, then discrepancies between the architecture model and source model are computed automatically. The original reflexion model allows an analyst to specify only non-hierarchical architecture models, which is insufficient for larger systems that are decomposed into hierarchical subsystems. This paper extends the original reflexion model to hierarchical architecture models, describes a method to apply this technique, and reports on case studies conducted on two large-scale and complex applications (namely, the C compiler sdcc for 8-bit microprocessors and the GNU C compiler gcc). © 2003 IEEE.},
author_keywords={Reverse engineering},
keywords={Architecture;  Hierarchical systems;  Program compilers;  Reverse engineering, 8-bit microprocessors;  Architectural modeling;  Architecture modeling;  C compilers;  Case-studies;  Complex applications;  Hierarchical architectures;  Source modeling, C (programming language)},
references={(2003), http://www.bauhaus-stuttgart.de/, June; Hofmeister, C., Nord, R., Soni, D., Applied Software Architecture (2000) Object Technology Series, , Addison Wesley; (2000) IEEE Recommended Practice for Architectural Description of Software-intensive Systems, , std. 1471-2000; Knodel, J., (2002) Process Models for the Reconstruction of Software Architecture Views, , Diploma thesis no. 1987, University of Stuttgart, Computer Science, July; Koschke, R., (2000) Atomic Architectural Component Recovery for Program Understanding and Evolution, , http://www.iste.uni-stuttgart.de/ps/rainer/thesis, PhD thesis, Institute for Computer Science, University of Stuttgart; Murphy, G.C., Notkin, D., Reengineering with reflexion models: A case study (1997) IEEE Computer, 30 (8), pp. 29-36. , Aug; (1998) Nikkei Computer, 19, pp. 161-169. , Reprinted in January; Murphy, G.C., Notkin, D., Sullivan, K., Software reflexion models: Bridging the gap between source and high-level models (1995) Proc. of the Third ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 18-28. , New York, NY, ACM Press; Murphy, G.C., Notkin, D., Sullivan, K.J., Software reflexion models: Bridging the gap between design and implementation (2001) IEEE TSE, 27 (4), pp. 364-380. , Apr; (2003) Sdcc, A C Compiler for Small Devices, , http://sourceforge.net/projects/sdcc/, June; Shaw, M., Garlan, D., Chapter An Introduction to Software Architecture (1993) Advances in Software Engineering and Knowledge Engineering, , World Scientific Publishing Company, River Edge, NJ; Steensgaard, B., Points-to analysis in almost linear time (1996) Symposium on Principles of Programming Languages, pp. 32-41},
editor={Stroulia E., Storey M.-A., van Deursen A.},
sponsors={IEEE Computer Society Technical Council on Software Engineering (TCSE); Reengineering Forum},
publisher={IEEE Computer Society},
issn={10951350},
isbn={0769520278},
language={English},
abbrev_source_title={Proc. Working Conf. Rev. Eng. WCRE},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Lakhotia2003368,
author={Lakhotia, A. and Walenstein, A. and Koschke, R.},
title={Second International Workshop on Detection of Software Clones},
journal={Proceedings - Working Conference on Reverse Engineering, WCRE},
year={2003},
volume={2003-January},
pages={368},
doi={10.1109/WCRE.2003.1287269},
art_number={1287269},
note={cited By 0; Conference of 10th Working Conference on Reverse Engineering, WCRE 2003 ; Conference Date: 13 November 2003 Through 16 November 2003;  Conference Code:114280},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84944585996&doi=10.1109%2fWCRE.2003.1287269&partnerID=40&md5=abf11c18829605e310d19605a04cdf2b},
affiliation={Center for Advanced Computer Science, University of Louisiana at Lafayette, United States; Institute for Software Technology, University of Stuttgart, Germany},
abstract={The aim of this half-day workshop is to bring together researchers within the field of clone detection to critically assess the current state of research, and to establish new directions and partnerships for research. Position papers and an index card-based brainstorming technique will be employed to organize the discussion and help form a foundation for a workshop report. © 2003 IEEE.},
keywords={Reverse engineering, Clone detection;  Half-day workshop;  Index cards;  International workshops;  Position papers;  Software clones;  State of research, Cloning},
editor={Stroulia E., Storey M.-A., van Deursen A.},
sponsors={IEEE Computer Society Technical Council on Software Engineering (TCSE); Reengineering Forum},
publisher={IEEE Computer Society},
issn={10951350},
isbn={0769520278},
language={English},
abbrev_source_title={Proc. Working Conf. Rev. Eng. WCRE},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{VanDeursen2003283,
author={Van Deursen, A. and Favre, J.-M. and Koschke, R. and Rilling, J.},
title={Experiences in teaching software evolution and program comprehension},
journal={Proceedings - IEEE Workshop on Program Comprehension},
year={2003},
volume={2003-May},
pages={283-284},
doi={10.1109/WPC.2003.1199214},
art_number={1199214},
note={cited By 3; Conference of 11th IEEE International Workshop on Program Comprehension, IWPC 2003 ; Conference Date: 10 May 2003 Through 11 May 2003;  Conference Code:113890},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84979074245&doi=10.1109%2fWPC.2003.1199214&partnerID=40&md5=880a2e1652801c7df1eeafac5b867ec7},
affiliation={CWI, Delft University of Technology, Netherlands; University of Grenoble, France; University of Stuttgart, Germany; Concordia University, Canada},
abstract={A large amount of research is devoted to software evolution and program understanding, but these topics are often neglected in software engineering curricula. The CCSE initiative from IEEE/ACM proposes guidelines for the future. At the ICSM'02 conference, a panel was held to establish what should be taught in the future. This working session focuses on what is being taught and what will be taught in the near future. The goals include (1) to share experiences in teaching software evolution and program understanding, (2) to establish the state of the practice and (3) to identify future directions. © 2003 IEEE.},
keywords={Curricula;  Software engineering, Large amounts;  Program comprehension;  Program understanding;  Software engineering curricula;  Software Evolution;  State of the practice;  Teaching software;  Working sessions, Computer programming},
references={Van Deursen, A., Lethbridge, T., Stevens, P., How should software maintenance and evolution be taught? (2002) Proceedings of the International Conference on Software Maintenance (ICSM 2002), , IEEE Computer Society; Van Deursen, A., Visser, E., The reengineering wiki (2002) Proceedings 6th European Conference on Software Maintenance and Reengineering (CSMR)., pp. 217-220. , IEEE Computer Society; Mancoridis, S., Souder, T.S., Gansner, E.R., Korn, J.L., RE-portal: A web-based portal site for reverse engineering (2001) Eighth Working Conference on Reverse Engineering (WCRE'01), pp. 221-229. , IEEE Computer Society; Sobel, A.E.K., (2002) Computing Curricula - Software Engineering Volume; Second Draft of the Software Engineering Knowledge (SEEK), , ACM/IEEE, December},
sponsors={IEEE Computer Society Technical Council on Software Engineering},
publisher={IEEE Computer Society},
issn={10928138},
isbn={0769518834},
language={English},
abbrev_source_title={Proc. IEEE Workshop Program Comprehension},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Koschke2002138,
author={Koschke, R.},
title={Software visualization for reverse engineering},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2002},
volume={2269},
pages={138-150},
doi={10.1007/3-540-45875-1_11},
note={cited By 17; Conference of International Dagstuhl Seminar on Software Visualization, 2001 ; Conference Date: 20 May 2001 Through 25 May 2001;  Conference Code:121409},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84884293742&doi=10.1007%2f3-540-45875-1_11&partnerID=40&md5=db81e18aac368bf87a4ffef0b65781e0},
affiliation={University of Stuttgart, Breitwiesenstr. 20-22, Stuttgart, 70565, Germany},
abstract={This article describes the Bauhaus tool suite as a concrete example for software visualization in reverse engineering, re-engineering, and soft ware maintenance. Results from a recent survey on software visualization in these domains are reported. According to this survey, Bauhaus can indeed be considered a typical representative of these domains regarding the way software artifacts are visualized. Specific requirements for software visualizations are drawn from both the specific example and the survey. © Springer-Verlag Berlin Heidelberg 2002.},
keywords={Reverse engineering;  Surveys, Bauhaus;  Software artifacts;  Software visualization;  Toolsuite, Visualization},
references={http://www.bauhaus-stuttgart.de; Chikofsky, E.J., Cross, J.H., II, Reverse Engineering and Design Recovery (1990) IEEE Software, January, pp. 13-17; http://www.graphlet.de; http://www.research.att.com/sw/tools/graphviz; http://www.gupro.de/GXL, See also the paper by Andreas Winter et al. in these proceedings; http://www.uni-passau.de/GraphEd; (2000) IEEE; Koschke, R., (2000) Atomic Architectural Component Recovery for Program Understanding and Evolution, , Dissertation, Institute of Computer Science, University of Stuttgart, Germany; Koschke, R., Survey on Software Visualization for Software Maintenance, Re-Engineering, and Reverse Engineering, , http://www.informatik.uni-stuttgart.de/ifi/ps/rainer/softviz; Müller, H., Wong, K., Tilley, S., A Reverse Engineering Environment Spatial and Visual Software Interconnection Models (1992) Proc. Of ACM SIGSOFT Symposium Software Development Environments, pp. 88-98. , December; Roman, G.-C., Cox, K.C., Program Visualization: The Art of Mapping Programs to Pictures (1992) Proc. Of the International Conference on Software Engineering, , Association of Computing Machinery; http://rw4.cs.uni-sb.de/users/sander/html/gsvcg1.html},
correspondence_address1={Koschke, R.; University of Stuttgart, Breitwiesenstr. 20-22, Germany; email: koschke@informatik.uni-stuttgart.de},
editor={Diehl S.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783540433231},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koschke2002478,
author={Koschke, R.},
title={Atomic architectural component recovery for program understanding and evolution},
journal={Conference on Software Maintenance},
year={2002},
pages={478-481},
note={cited By 16; Conference of 2002 IEEE International Conference on Software Maintenance ; Conference Date: 3 October 2002 Through 6 October 2002;  Conference Code:60311},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0036441965&partnerID=40&md5=0aeca4f12f72f5152d18b990301c8c4f},
affiliation={University of Stuttgart, Breitwiesenstr. 20-22, D-70565 Stuttgart, Germany},
abstract={A report on the atomic architectural component recovery for program understanding and evaluation was presented. The types of components considered were modules and subsystems. The integration was eased by unification and categorization of automatic component recovery techniques. The results of the techniques was combined by high-level operators modeled on intersection, union and difference for fuzzy sets.},
keywords={Algorithms;  Computer aided software engineering;  Computer software selection and evaluation, Component recovery, Legacy systems},
references={Girard, J.-F., Koschke, R., Schied, G., A metric-based approach to detect abstract data types and state encapsulations (1999) Journal on Automated Software Engineering, 6 (4), pp. 357-386. , Kluwer Academic Publishers, October; Girard, J.-F., Koschke, R., A comparison of abstract data type and objects recovery techniques (2000) Journal Science of Computer Programming, 36 (2-3), pp. 149-181. , Elsevier, March; Girard, J.-F., Koschke, R., Finding components in a hierarchy of modules: A step towards architectural understanding (1997) Proceedings of the International Conference on Software Maintenance - ICSM'97, pp. 58-65. , Bari, Italy, IEEE Computer Society Press; Girard, J.-F., Koschke, R., Schied, G., Comparison of abstract data type and abstract state encapsulation detection techniques for architectural understanding (1997) Proceedings of the Working Conference on Reverse Engineering - WCRE'97, pp. 66-75. , IEEE Computer Society Press; Girard, J.-F., Koschke, R., Schied, G., A metric-based approach to detect abstract data types and state encapsulations (1997) Proceedings of the Conference on Automated Software Engineering - ASE'97, pp. 82-89. , IEEE Computer Society Press, November; Koschke, R., An incremental semi-automatic method for component recovery (1999) Proceedings of the Working Conference on Reverse Engineering, pp. 256-267. , Atlanta, USA, IEEE Computer Society Press, October; Canfora, G., Czeranski, J., Koschke, R., Revisiting the delta IC approach to component recovery (2000) Proceedings of the Working Conference on Reverse Engineering, pp. 140-149. , Brisbane, Australia, IEEE Computer Society Press, November; Koschke, R., Eisenbarth, T., A framework for experimental evaluation of clustering techniques (2000) Proceedings of the International Workshop on Program Comprehension, IWPC'00, pp. 201-210. , Limerick, Ireland, IEEE Computer Society Press, June; Belady, L.A., Evangelisti, C.J., System partitioning and its measure (1982) Journal of Systems and Software, 2 (1), pp. 23-29. , February; Hutchens, D.H., Basili, V.R., System structure analysis: Clustering with data bindings (1985) IEEE Transactions on Software Engineering, SE-11 (8), pp. 749-757. , August; Canfora, G., Cimitile, A., Munro, M., An improved algorithm for identifying objects in code (1996) Journal of Software Practice and Experience, 26 (1), pp. 25-48. , January; Choi, S.C., Scacchi, W., Extracting and restructuring the design of large systems (1990) IEEE Software, 7 (1), pp. 66-71. , January; Doval, D., Mancoridis, S., Mitchel, B.S., Chen, Y., Gansner, E.R., Automatic clustering of software systems using a genetic algorithm (1999) Proceedings of the International Conference on Software Tools and Engineering Practice, , August; Gall, H., Klösch, R., Finding objects in procedural programs: An alternative approach (1995) Proceedings of the Second Working Conference on Reverse Engineering, pp. 208-216. , Toronto, July; Kazman, R., Carrière, S.J., (1997) Playing detective: Reconstructing software architecture from available evidence, , Technical Report CMU/SEI-97-TR-010, ESC-TR-97-010, Software Engineering Institute, Pittsburgh, USA; Lakhotia, A., A unified framework for expressing software subsystems classification techniques (1997) Journal Systems Software, 36, pp. 211-231. , Elsevier Science Publisher; Lakhotia, A., Gravely, J.M., Toward experimental evaluation of subsystem classification recovery techniques (1995) Proceedings of the Second Working Conference on Reverse Engineering, pp. 262-269. , Toronto, July; Lindig, C., Snelting, G., Assessing modular structure of legacy code based on mathematical concept analysis (1997) Proceedings of the Nineteenth International Conference on Software Engineering, , Boston; Liu, S.S., Wilde, N., Identifying objects in a conventional procedural language: An example of data design recovery (1990) Proceedings of the International Conference on Software Maintenance, pp. 266-271. , November; Müller, H., Wong, K., Tilley, S., A reverse engineering environment based on spatial and visual software interconnection models (1992) Proceedings of the Fifth ACM SIGSOFT Symposium on Software Development Environments, pp. 88-98. , Tyson's Corner, December; Müller, H.A., Orgun, M.A., Tilley, S.R., Uhl, J.S., A reverse engineering approach to subsystem structure identification (1993) Journal of Software Maintenance: Research and Practice, 5 (4), pp. 181-204. , December; Yau, S.S., Wilde, N., An object finder for program structure understanding in software maintenance (1994) Journal of Software Maintenance, 6 (5), pp. 261-283. , September-October; Patel, S., Chu, W., Baxter, R., A measure for composite module cohesion (1992) Proceedings of the Fourteenth International Conference on Software Engineering, pp. 38-48. , Melbourne, May; Sahraoui, H., Melo, W., Lounis, H., Dumont, F., Applying concept formation methods to object identification in procedural code (1997) Proceedings of the Twelfth Conference on Automated Software Engineering, pp. 210-218. , Nevada, November; Schwanke, R.W., An intelligent tool for re-engineering software modularity (1991) Proceedings of the International Conference on Software Engineering, pp. 83-92. , May; Siff, M., Reps, T., Identifying modules via concept analysis (1997) Proceedings of the International Conference on Software Maintenance, pp. 170-179. , Bari, October; Valasareddi, R.R., Carver, D.L., A graph-based object identification process for procedural programs (1998) Proceedings of the Fifth Working Conference on Reverse Engineering, pp. 50-58. , Honolulu, October; Yeh, A.S., Harris, D., Reubenstein, H., Recovering abstract data types and object instances from a conventional procedural language (1995) Proceedings of the Second Working Conference on Reverse Engineering, pp. 227-236. , July; Porrmann, A., (2000) 'Komponentenerkennung mittels Begriffsanalyse (Component Recovery through Concept Analysis)', 1855. , English Manuscript, Master Thesis, University of Stuttgart, October; Michtel, B., Mancoridis, S., Comparing the decomposition produced by software clustering algorithms using similarity measurements (2001) Proceedings of the International Conference on Software Maintenance, pp. 744-753. , IEEE Computer Society Press; Tzerpos, V., Holt, R., MoJo: A distance metric for software clusterings (1999) Proceedings of the Working Conference on Reverse Engineering, pp. 187-195. , IEEE Computer Society Press; Girard, J.-F., Würthner, M., Evaluating the accessor classification approach to detect abstract data types (2000) Proceedings of the International Workshop on Program Comprehension, pp. 87-98. , IEEE Computer Society Press},
correspondence_address1={Koschke, R.; University of Stuttgart, Breitwiesenstr. 20-22, D-70565 Stuttgart, Germany; email: koschke@informatik.uni-stuttgart.de},
sponsors={IEEE},
address={Montreal},
coden={CSFME},
language={English},
abbrev_source_title={Conf Software Maint},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Eisenbarth2002128,
author={Eisenbarth, T. and Koschke, R. and Vogel, G.},
title={Static trace extraction},
journal={Proceedings - Working Conference on Reverse Engineering, WCRE},
year={2002},
volume={2002-January},
pages={128-137},
doi={10.1109/WCRE.2002.1173071},
art_number={1173071},
note={cited By 14; Conference of 9th Working Conference on Reverse Engineering, WCRE 2002 ; Conference Date: 29 October 2002 Through 1 November 2002;  Conference Code:116291},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84952934494&doi=10.1109%2fWCRE.2002.1173071&partnerID=40&md5=a93bcc55e0c98bc410a43c746042dcf6},
affiliation={University of Stuttgart, Germany},
abstract={A trace is a record of the execution of a computer program, showing the sequence of operations executed. Dynamic traces are obtained by executing the program and depend upon the input. Static traces, on the other hand, describe potential sequences of operations extracted statically from the source code. Static traces offer the advantage that they do not depend upon input data. This paper describes a new automatic technique to extract static traces for individual stack and heap objects. The extracted static traces can be used in many ways, such as protocol recovery and validation in particular and program understanding in general. © 2002 IEEE.},
author_keywords={Computer languages;  Data mining;  Law;  Legal factors;  Program processors;  Protocols;  Reverse engineering;  Software systems},
keywords={Computer programming languages;  Data mining;  Network protocols;  Reverse engineering, Automatic technique;  Dynamic traces;  Law;  Legal factors;  Program understanding;  Protocol recovery;  Sequences of operations;  Software systems, Program processors},
references={Butkevich, S., Renedo, M., Baumgartner, G., Young, M., Compiler and tool support for debugging object protocols (2000) Proceedings of the 8th International Symposium on Foundations of Software Engineering for Twenty-first Century Applications, pp. 50-59; Cook, J.E., Wolf, A.L., Discovering models of software processes from event-based data (1998) ACM Transactions on Software Engineering and Methodology, 7 (3), pp. 215-249. , July; Heiber, T., Semi-automatische herleitung von komponentenprotokollen aus statischen verwendungsmustern (semiautomatic recovery of component protocols from static usage patterns) (2001) Diplomarbeit; Horwitz, S., Reps, T., Binkley, D., Interprocedural slicing using dependencek graphs (1990) ACM Transactions on Programming Languages and Systems, 12 (1), pp. 26-60. , Jan; Jerding, D.F., Rugaber, S., Using visualization for architectural localization and extraction (1997) Proceedings of the Working Conference on Reverse Engineering, , IEEE Computer Society Press; Jerding, D.F., Stasko, J.T., Ball, T., Visualizing interactions in program executions (1997) Proceedings of the International Conference on Software Engineering, , ACM; Koschke, R., Zhang, Y., Component recovery, protocol recovery and validation in bauhaus (2001) 3rd Reengineering Workshop, pp. 73-76. , J. Ebert, B. Kullbach, and F. Lehner, editors Bad Honnef, Germany, volume 1/2002 of Fachberichte Informatik University of Koblenz-Landau; Lindig, C., (1999) Concepts 0.3e, , http://www.gaertner.de/lindig/software/; Olender, K., Osterweil, L., Interprocedural static analysis of sequencing constraints (1992) ACM Transactions on Software Engineering and Methodology, 1 (1), pp. 21-52. , Jan; Ramalingam, G., The undecidability of aliasing (1994) ACM Transactions on Programming Languages and Systems, 16 (5), pp. 1467-1471. , Sept; Wilson, R., (1997) Efficient, Context-Sensitive Pointer Analysis, , PhD thesis, Department of Electrical Engineering, Stanford University, Dec},
editor={Burd E., van Deursen A.},
sponsors={IEEE Computer Society Technical Council on Software Engineering (TCSE); Reengineering Forum; Virginia Commonwealth University},
publisher={IEEE Computer Society},
issn={10951350},
isbn={0769517994},
language={English},
abbrev_source_title={Proc. Working Conf. Rev. Eng. WCRE},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Eisenbarth2002273,
author={Eisenbarth, T. and Koschke, R. and Simon, D.},
title={Incremental location of combined features for large-scale programs},
journal={Conference on Software Maintenance},
year={2002},
pages={273-282},
note={cited By 18; Conference of 2002 IEEE International Conference on Software Maintenance ; Conference Date: 3 October 2002 Through 6 October 2002;  Conference Code:60311},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0036443769&partnerID=40&md5=2981bc5add7b76ef65961c7502dad730},
affiliation={Universität Stuttgart, Breitwiesenstraiße 20-22, 70565 Stuttgart, Germany},
abstract={The need for changing a program frequently confronts maintainers with the reality that no valid architectural description is at hand. To solve that problem, we presented at ICSM 2001 a language-independent and easy to use technique for opportunistic and demand driven location of features in source code based on static and dynamic analysis and concept analysis. In order to further validate the technique, we recently performed an industrial case study on a 1.2 million LOC production system. The experiences we made during that case study showed two problems of our approach: the growing complexity of concept lattices for large systems with many features and the need for handling compositions of features. This paper extends our technique to solve these problems. We show how this method allows incremental exploration of features while preserving the "mental map" the maintainer has gained through the analysis. The second improvement is a detailed look at composing features into more complex scenarios. Rather than assuming a one-to-one correspondence between features and scenarios as in earlier work, we can now handle scenarios that invoke many features.},
keywords={Computer programming languages;  Large scale systems;  Problem solving;  Software engineering, Large scale programs, Computer program listings},
references={(2002) The New Bauhaus Stuttgart, , http://www.bauhaus-stuttgart.de/; Canfora, G., Cimitile, A., De Lucia, A., Di Lucca, G.A., A case study of applying an eclectic approach to identify objects in code (1999) Proc. of the 7th IWPC, pp. 136-143. , Pittsburgh, PA, USA, May. IEEE Press; Chen, K., Rajlich, V., Case study of feature location using dependence graph (2000) Proc. of the 8th IWPC, pp. 241-249. , Limerick, Ireland, June. IEEE Press; Eisenbarth, T., Koschke, R., Simon, D., Aiding program comprehension by static and dynamic feature analysis (2001) Proc. of the ICSM, pp. 602-611. , Florence, Italy, Nov. IEEE Press; Canter, B., Wille, R., (1999) Formal Concept Analysis - Mathematical Foundations, , Springer; (2002) Graph Viz., , http://www.research.att.com/sw/tools/graphviz/; Krone, M., Snelting, G., On the inference of configuration structures from source code (1994) Proc. of the 16th ICSE, pp. 49-58. , Sorrento, Italy, May. IEEE Press; Kuipers, T., Moonen, L., Types and concept analysis for legacy systems (2000) Proc. of the 8th IWPC, pp. 221-230. , IEEE Press, June; Lindig, C., (1999) Concepts 0.3e, , http://www.gaertner.de/~lindig/software/; Snelting, G., Reengineering of configurations based on mathematical concept analysis (1996) ACM TOSEM, 5 (2), pp. 146-189. , Apr; Snelting, G., Tip, F., Reengineering class hierarchies using concept analysis (1998) Proc. of the 6th SIG-SOFT Symposium on Foundations of Software Engineering, pp. 99-110. , Orlando, FL, USA, Nov. ACM Press; Tonella, P., Concept analysis for module restructuring (2001) IEEE TSE, 27 (4), pp. 351-363. , Apr; Van Deursen, A., Kuipers, T., Identifying objects using cluster and concept analysis (1999) Proc. of the 21st ICSE, pp. 246-255. , Los Angeles, CA, USA, IEEE Press; Wilde, N., Buckellew, M., Page, H., Rajlich, V., A case study of feature location in unstructured legacy Fortran code (2001) Proc. of the 5th CSMR, pp. 68-75. , Lisbon, Portugal, Mar. IEEE Press; Wilde, N., Scully, M.C., Software reconnaissance: Mapping program features to code (1995) Journal of Software Maintenance: Research and Practice, 7, pp. 49-62. , Jan; Wong, W.E., Gokhale, S.S., Horgan, J.R., Trivedi, K.S., Locating program features using execution slices (1999) Proc. of the IEEE Symposium on Application-Specific Systems and Software Engineering & Technology, pp. 194-203. , Richardson, TX, USA, Mar. IEEE Press},
correspondence_address1={Eisenbarth, T.; Universität Stuttgart, Breitwiesenstraiße 20-22, 70565 Stuttgart, Germany; email: eisenbarth@informatik.uni-stuttgart.de},
sponsors={IEEE},
address={Montreal},
coden={CSFME},
language={English},
abbrev_source_title={Conf Software Maint},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Eisenbarth2001602,
author={Eisenbarth, T. and Koschke, R. and Simon, D.},
title={Aiding program comprehension by static and dynamic feature analysis},
journal={IEEE International Conference on Software Maintenance, ICSM},
year={2001},
pages={602-611},
doi={10.1109/ICSM.2001.972777},
note={cited By 83; Conference of Proceedings IEEE International Conference on Software Maintenance (ICSM 2001) ; Conference Date: 7 November 2001 Through 9 November 2001;  Conference Code:60554},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-77956610621&doi=10.1109%2fICSM.2001.972777&partnerID=40&md5=d256c285acd966762aa1c9c6d8f909bc},
affiliation={Universität Stuttgart, Breitwiesenstr. 20-22, 70565 Stuttgart, Germany},
abstract={Understanding a system's implementation without prior knowledge is a hard task for reengineers in general. However, some degree of automatic aid is possible. In this paper, we present a technique building a mapping between the system's externally visible behavior and the relevant parts of the source code. Our technique combines dynamic and static analyses to rapidly focus on the system's parts urgently required for a goal-directed process of program understanding.},
keywords={Concept analysis;  Dynamic feature analysis;  Program comprehension;  Static feature analysis, Computer programming languages;  Functions;  Mathematical techniques;  Program diagnostics;  Reverse engineering, Software engineering},
references={http://www.informatik.uni-stuttgart.de/ifi/ps/bauhaus, Bauhaus project, University of Stuttgart; Brandenburg, F.J., Graphlet http://www.infosun.fmi.uni-passau.de/Graphlet, Universität Passau; Booch, G., Rumbaugh, J.J., The Unified Modeling Language Reference Manual, , Addison-Wesley; Canfora, G., Cimitile, A., De Lucia, A., Di Lucca, G.A., A case study of applying an eclectic approach to identify objects in code (1999) Workshop on Program Comprehension, pp. 136-143; Chen, K., Rajlich, V., Case study of feature location using dependence graph (2000) Proc. of the 8th Int. Workshop on Program Comprehension, pp. 241-249. , June; Eisenbarth, E., Koschke, R., Simon, D., Feature-driven program understanding using concept analysis of execution traces Proc. Int. Workshop on Program Comprehension, 2001, , to appear; Garlan, D., Allen, R., Ockerbloom, J., Architectural mismatch or, Why it's hard to build systems out of existing parts (1995) Proceedings of the 17th International Conference on Software Engineering, pp. 179-185. , April; Graudejus, H., Implementing a concept analysis tool for identifying abstract data types in C code (1998), master thesis, University of Kaiserslautern, Germany; Horwitz, S., Reps, T., Binkley, D., Interprocedural slicing using dependence graphs (1990) ACM Transactions on Programming Languages and Systems, 12 (1), pp. 26-60. , January; Lindig, C., Snelting, G., Assessing modular structure of legacy code based on mathematical concept analysis (1997) Proceedings of the International Conference on Software Engineering, pp. 349-359; Lindig, C., Concepts ftp://ftp.ips.cs.tu-bs.de/pub/local/softech/misc; Koschke, R., Girard, J.-F., Würthner, M., An intermediate representation for reverse engineering analyses Proceedings of the Working Conference on Reverse Engineering, 1998; Koschke, R., Atomic architectural component recovery for program understanding and evolution (2000), http://www.informatik.uni-stuttgart.de/ifi/ps/rainer/thesis, Dissertation, Institut für Informatik, Universität Stuttgart; Krone, M., Snelting, G., On the inference of configuration structures from source code (1994) Proceedings of the International Conference on Software Engineering, pp. 49-57. , May; Kuipers, T., Moonen, L., Types and concept analysis for legacy systems Proc. Int. Workshop on Program Comprehension, 2001; Sahraoui, H., Melo, W., Lounis, H., Dumont, F., Applying concept formation methods to object identification in procedural code (1997) Proceedings of the Conference on Automated Software Engineering, pp. 210-218. , November; Siff, M., Reps, T., Identifying modules via concept analysis (1997) Proceedings of the International Conference on Software Maintenance, pp. 170-179. , October; Snelting, G., Reengineering of configurations based on mathematical concept analysis (1997) ACM Transactions on Software Engineering and Methodology, 5 (2), pp. 146-189. , April; Snelting, G., Tip, F., Reengineering class hierarchies using concept analysis (1994) Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 99-110. , November; Van Deursen, A., Kuipers, T., Identifying objects using cluster and concept analysis Proc. Int. Conf. Software Engineering, 1999; Wilde, N., Scully, M.C., Software reconnaissance: Mapping program features to code (1995) Software Maintenance: Research and Practice, 7, pp. 49-62; Wong, K., (1998) The Rigi User's Manual', Version 5.4.4, , June},
correspondence_address1={Eisenbarth, T.; Universität Stuttgart, Breitwiesenstr. 20-22, 70565 Stuttgart, Germany; email: eisenbts@informatik.uni-stuttgart.de},
sponsors={IEEE Computer Society; Technical Council on Software Engineering},
address={Florence},
coden={CSFME},
language={English},
abbrev_source_title={IEEE Int. Conf. Softw. Maint. ICSM},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Eisenbarth2001176,
author={Eisenbarth, T. and Koschke, R. and Simon, D.},
title={Derivation of feature component maps by means of concept analysis},
journal={Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR},
year={2001},
pages={176-179},
doi={10.1109/CSMR.2001.914982},
note={cited By 22; Conference of Proceedings of the 5th European Conference on Software Maintenance and Reengineering ; Conference Date: 14 March 2001 Through 16 March 2001;  Conference Code:63009},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0035784516&doi=10.1109%2fCSMR.2001.914982&partnerID=40&md5=2b19ab2d96ca1a6db6de44dff75d87f1},
affiliation={University of Stuttgart, Breitwiesenstr. 20-22, 70565 Stuttgart, Germany},
abstract={Feature component maps describe which components are needed to implement a particular feature and are used early in processes to develop a product line based on existing assets. This paper describes a new technique to derive the feature component map and additional dependencies utilizing dynamic information and concept analysis. The method is simple to apply, cost-effective, largely language independent, and can yield results quickly and very early in the process.},
keywords={Concept analysis;  Feature component maps;  Software architecture, Computational methods;  Computer architecture;  Computer programming languages;  Computer software reusability;  Mathematical models;  Product development;  Program diagnostics, Software engineering},
references={Bayer, J., Girard, J.-F., Würthner, M., Apel, M., DeBaud, J.-M., Transitioning legacy assets - a product line approach (1999) Proceedings of the SIGSOFT Foundations of Software Engineering, pp. 446-463. , September; Bosch, J., Product-line architectures in industry: A case study (1999) Proc. of the 21st International Conference on Software Engineering (ICSE'99), pp. 544-554. , May; Brandenburg, F.J., Graphlet http://www.infosun.fmi.uni-passau.de/Graphlet/, Universität Passau; Canfora, G., Cimitile, A., De Lucia, A., Di Lucca, G.A., A case study of applying an eclectic approach to identify objects in code (1999) Workshop on Program Comprehension, pp. 136-143. , May; Chen, K., Rajlich, V., Case study of feature location using dependence graph (2000) Proc. of the 8th Int. Workshop on Program Comprehension, pp. 241-249. , June; Graudejus, H., Implementing a concept analysis tool for identifying abstract data types in C code (1998), master thesis, University of Kaiserslautern, Germany; Lindig, C., Snelting, G., Assessing modular structure of legacy code based on mathematical concept analysis (1997) Proceedings of the International Conference on Software Engineering, pp. 349-359. , May; Lindig, C., ftp://ftp.ips.cs.tu-bs.de/pub/local/softech/misc, Concepts; Krone, M., Snelting, G., On the inference of configuration structures from source code (1994) Proceedings of the International Conference on Software Engineering, pp. 49-57. , May; Perry, D., Generic architecture descriptions for product lines (1998) Proceedings of the Second International ESPRIT ARES Workshop, Lecture Notes in Computer Science 1429, pp. 51-56. , Springer; Sahraoui, H., Melo, W., Lounis, H., Dumont, F., Applying concept formation methods to object identification in procedural code (1997) Proceedings of the Conference on Automated Software Engineering, pp. 210-218. , November; Siff, M., Reps, T., Identifying modules via concept analysis (1997) Proceedings of the International Conference on Software Maintenance, pp. 170-179. , October; Snelting, G., Reengineering of configurations based on mathematical concept analysis (1997) ACM Transactions on Software Engineering and Methodology, 5 (2), pp. 146-189. , April; Snelting, G., Tip, F., Reengineering class hierarchies using concept analysis (1994) Proc. of the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 99-110. , November; Staudenmayer, N.S., Perry, D.E., Session 5: Key techniques and process aspects for product line development Proceedings of the 10th International Software Process Workshop, June 1996; Wilde, N., Scully, M.C., Software reconnaissance: Mapping program features to code (1995) Software Maintenance: Research and Practice, 7, pp. 49-62; http://www.xfig.org, Xfig system},
correspondence_address1={Eisenbarth, T.; University of Stuttgart, Breitwiesenstr. 20-22, 70565 Stuttgart, Germany; email: eisenbts@informatik.uni-stuttgart.de},
editor={Sousa P, Ebert J},
sponsors={IEEE},
address={Lisbon},
language={English},
abbrev_source_title={Proc. Eur. Conf. Software Maint. Reeng.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koschke2001,
author={Koschke, R.},
title={Message from the general chair},
journal={Reverse Engineering - Working Conference Proceedings},
year={2001},
pages={ix},
note={cited By 0; Conference of 8th Working Conference on Reverse Engineering (WCRE 2001) ; Conference Date: 2 October 2001 Through 5 October 2001;  Conference Code:58770},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0034781152&partnerID=40&md5=69d39d27e13a1d1c05f5803efe2c34b2},
editor={Burd E., Aiken P., Korchke R.},
sponsors={IEEE; Reenginering Forum; Informatik-Forum Stuttgart},
address={Stuttgart},
language={English},
abbrev_source_title={Rev Eng Working Conf Proc},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Eisenbarth2001300,
author={Eisenbarth, T. and Koschke, R. and Simon, D.},
title={Feature-driven program understanding using concept analysis of execution traces},
journal={Proceedings - IEEE Workshop on Program Comprehension},
year={2001},
volume={2001-January},
pages={300-309},
doi={10.1109/WPC.2001.921740},
art_number={921740},
note={cited By 30; Conference of 9th International Workshop on Program Comprehension, IWPC 2001 ; Conference Date: 12 May 2001 Through 13 May 2001;  Conference Code:116336},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84951025638&doi=10.1109%2fWPC.2001.921740&partnerID=40&md5=68e9117b6bff2c6e57a3d8231535984b},
affiliation={University of Stuttgart, Breitwiesenstr. 20-22, Stuttgart, 70565, Germany},
abstract={The first task of a programmer who wants to understand how a certain feature is implemented is to localize the implementation of the feature in the code. If the implementations of a set of related features are to be understood, a programmer is interested in their commonalities and variabilities. For large and badly documented programs, localizing features in code and identifying the commonalities and variabilities of components and features can be difficult and time-consuming. It is useful to derive this information automatically. The feature-component correspondence describes which components are needed to implement a set of features and what are the respective commonalities and variabilities of those features and components. This paper describes a new technique to derive the feature-component correspondence utilizing dynamic information and concept analysis. The method is simple to apply, cost-effective, largely language-independent, and can yield results quickly. © 2001 IEEE.},
author_keywords={Documentation;  Information analysis;  Information resources;  Programming profession;  Software architecture},
keywords={Cost effectiveness;  Information analysis;  Software architecture;  System program documentation, Concept analysis;  Cost effective;  Dynamic information;  Execution trace;  Information resource;  Language independents;  Program understanding;  Programming profession, Computer programming},
references={Brandenburg, F.J., Graphlet, , http://www.infosun.fmi.uni-passau.de/Graphlet/; Canfora, G., Cimitile, A., De Lucia, A., Di Lucca, G.A., A Case Study of Applying an Eclectic Approach to Identify Objects in Code (1999) Workshop on Program Comprehension, pp. 136-143. , Pittsburgh, IEEE Computer Society Press; Chen, K., Rajlich, V., Case Study of Feature Location Using Dependence Graph (2000) Proc. of the 8th Int. Workshop on Program Comprehension, pp. 241-249. , June 10-11, Limerick, Ireland, IEEE Computer Society Press; Graudejus, H., (1998) Implementing a Concept Analysis Tool for Identifying Abstract Data Types in C Code, , master thesis, University of Kaiserslautern, Germany; Lindig, C., Snelting, G., Assessing Modular Structure of Legacy Code Based on Mathematical Concept Analysis (1997) Proc. of the Int. Conference on Software Engineering, pp. 349-359. , Boston; Lindig, C., Concepts, , ftp://ftp.ips.cs.tu-bs.de/pub/local/softech/misc; Koschke, R., (2000) Atomic Architectural Component Recovery for Program Understanding and Evolution, , http://www.informatik.uni-stuttgart.de/ifi/ps/rainer/thesis, Dissertation, Institut für Informatik; Krone, M., Snelting, G., On the Inference of Configuration Structures From Source Code (1994) Proc. of the Int. Conference on Software Engineering, pp. 49-57. , May IEEE Computer Society Press; Kuipers, Moonen, L., Types and Concept Analysis for Legacy Systems (2000) Proc. the International Workshop on Program Comprehension, IWPC, , IEEE Computer Society Press; Sahraoui, H., Melo, W., Lounis, H., Dumont, F., Applying Concept Formation Methods to Object Identification in Procedural Code (1997) Proc. of the Conference on Automated Software Engineering, pp. 210-218. , Nevada, November, IEEE Computer Society; Siff, M., Reps, T., Identifying Modules via Concept Analysis (1997) Proc. of the Int. Conference on Software Maintenance, pp. 170-179. , Bari, October, IEEE Computer Society; Snelting, G., Reengineering of Configurations Based on Mathematical Concept Analysis (1997) ACM Transactions on Software Engineering and Methodology, 5 (2), pp. 146-189. , April; Snelting, G., Tip, F., Reengineering Class Hierarchies Using Concept Analysis (1994) Proc. of the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 99-110. , November; Van Deursen, A., Kuipers, Identifying Objects Using Cluster and Concept Analysis (1999) Proc. of the International Conference on Software Engineering, , IEEE Computer Society Press; Wilde, N., Scully, M.C., Software Reconnaissance: Mapping Program Features to Code (1995) Software Maintenance: Research and Practice, 7, pp. 49-62; http://www.xfig.org},
sponsors={},
publisher={IEEE Computer Society},
issn={10928138},
isbn={0769511317},
language={English},
abbrev_source_title={Proc. IEEE Workshop Program Comprehension},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Ferenc200149,
author={Ferenc, R. and Sim, S.E. and Holt, R.C. and Koschke, R. and Gyimóthy, T.},
title={Towards a standard schema for C/C++},
journal={Reverse Engineering - Working Conference Proceedings},
year={2001},
pages={49-58},
note={cited By 30; Conference of 8th Working Conference on Reverse Engineering (WCRE 2001) ; Conference Date: 2 October 2001 Through 5 October 2001;  Conference Code:58770},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0034774351&partnerID=40&md5=bc4247a10a1fca09dc4d26c990f42525},
affiliation={University of Szeged, Res. Grp. on Artificial Intelligence, Szeged, Hungary},
abstract={Developing a standard schema at the abstract syntax tree level for C/C++ to be used by reverse engineering and reengineering tools is a complex and difficult problem. In this paper, we present a catalogue of issues that need to be considered iii order to design a solution. Three categories of issues are discussed. Lexical structure is the first category and pertains to characteristics of the source code, such as spaces and comments. The second category, syntax, includes both the mundane and hard problems in the C++ programming language. The final category is semantics and covers aspects such as naming and reference resolution. Example solutions to these challenges are provided from the Datrix schema from Bell Canada and the Columbus schema from University of Szeged. The paper concludes with a discussion of lessons learnt and plans for future work on a C/C++ AST standard schema.},
author_keywords={AST;  C/C++ schema;  Columbus;  Datrix;  Extractor;  Front end;  GXL;  Parser;  Reverse engineering;  Standard exchange format},
keywords={Computational complexity;  Computer software;  Reverse engineering;  Semantics;  Trees (mathematics), Standard exchage format (SEF), Computer programming languages},
references={(2000) DATRIX - Abstract semantic graph reference manual, version 1.2, , Bell Canada Inc., Montréal, Canada, January 14; (2001) The Datrix Home Page, , http://www.iro.umontreal.ca/labs/gelo/datrix, last accessed April 30; (2001) The GXL Homepage, , http://www.gupro.de/GXL, last accessed April 16; Aigner, G., Diwan, A., Heine, D.L., Lam, M.S., Moore, D.L., Murphy, B.R., Sapuntzakis, C., (1999) The Basic SUIF Programming Guide, , Computer Systems Laboratory, Standord University, November; Baxter, I., (2001) Semantic Designs, , personal communication; Beszédes Á, Ferenc, R., Magyar, F., Gyimóthy, T., (1998) Columbus Setup and User's Guide, , Nokia Research Center; Boshernitsan, M., Graham, S.L., Designing an XML-based exchange format for Harmonia (2000) Working Conference on Reverse Engineering, pp. 287-289. , Brisbane, Queensland, Australia, November 23-25; Bowman, I.T., Godfrey, M.W., Holt, R., Connecting architecture reconstruction frameworks (1999) Journal of Information and Software Technology, 42 (2), pp. 93-104; Dean, T., Malton, A.J., Holt, R., Union schemas as a basis for a C++ extractor (2001) Proceedings of Working Conference on Reverse Engineering, , Stuttgart, Germany, October 2-5; Ferenc, R., (2001) A short introduction to the Columbus Proposal for a standard C/C++ Schema, , http://www.inf.u-szeged.hu/~ferenc/research/Columbusschemashort.pdf, last accessed April 17; Ferenc, R., Magyar, F., Beszédes, Á., Kiss, Á., Tarkiainen, M., Columbus - Tool for reverse engineering large object oriented software systems (2001) Symposium on Programming Languages and Software Tools, pp. 16-27. , Szeged, Hungary, June 15-16; Gamma, E., Helm, R., Johnson, R., Vlissides, J., (1995) Design Patterns. Elements of Reusable Object-Oriented Software, , Reading, Massachusetts: Addison-Wesley; Holt, R., Winter, A., Schürr, A., GXL: Towards a standard exchange format (2000) Working Conference on Reverse Engineering, pp. 162-171. , Brisbane, Queensland, Australia, November 23-25; Holt, R.C., (1997) An Introduction to TA: The Tuple-Attribute Language, , University of Toronto, Toronto, Draft Mar 24; (1998) Programming languages - C++, pp. 1998E. , ISO/IEC 14882; (1999) Ada Semantic Interface Specification, p. 1999. , ISO/IEC 15291; Karasick, M., The architecture of Montana: An open and extensible programming environment with an incremental C++ compiler (1998) International Symposium on Foundations of Software Engineering, pp. 131-142. , Orlando, USA, November 1-5; Koschke, R., Girard, J.-F., Würthner, M., An intermediate representation for integrating reverse engineering analyses (1998) Working Conference on Reverse Engineering, , Honolulu, HI, October 12-14; Mamas, E., Kontogiannis, K., Towards portable source code representations using XML (2000) Working Conference on Reverse Engineering, pp. 172-182. , Brisbane, Queensland, Australia, November 23-25; (1999) "OMG Unified Modeling Language Specification", Version 1.3; Riva, C., Przybilski, M., Koskimies, K., Environment for software assessment (1999) Workshop on Object-Oriented Architectural Evolution, ECOOP'99, , Lisbon, Portugal; Sander, G., (2001) VCG Overview, , http://rw4.cs.uni-sb.de/~sander/html/gsvcg1.html, last accessed April 30; Van Deursen, A., (2001) CWI, , personal communication},
correspondence_address1={Ferenc, R.; University of Szeged, Res. Grp. on Artificial Intelligence, Szeged, Hungary; email: ferenc@cc.u-szeged.hu},
editor={Burd E., Aiken P., Korchke R.},
sponsors={IEEE; Reenginering Forum; Informatik-Forum Stuttgart},
address={Stuttgart},
language={English},
abbrev_source_title={Rev Eng Working Conf Proc},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Canfora2000140,
author={Canfora, Gerardo and Czeranski, Joerg and Koschke, Rainer},
title={Revisiting the Delta IC approach to component recovery},
journal={Reverse Engineering - Working Conference Proceedings},
year={2000},
pages={140-149},
note={cited By 4; Conference of 7th Conference on Reverse Engineering (WCRE-2000) ; Conference Date: 23 November 2000 Through 25 November 2000;  Conference Code:57679},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0034497255&partnerID=40&md5=00fc372c988b73f7798d16b9c9626518},
affiliation={Univ of Sannio, Benevento, Italy},
abstract={Component recovery supports program understanding, architecture recovery, and re-use. Among the best known techniques for detection of re-usable objects (related global variables and their accessor functions) is Delta-IC. This paper re-visits the original approach and extends it in different ways. It describes a variant of Delta-IC suitable for reverse engineering that omits the slicing step of the original approach. The underlying metric of Delta-IC is extended toward types integrating ideas of the Internal Access technique such that abstract data types can also be detected. Furthermore, the connectivity metric of Delta-IC is combined with a cohesion metric based on vertex connectivity. The new metrics and the new algorithm for reverse engineering are quantitatively evaluated using the framework proposed in [19] as a standard evaluation of clustering techniques for component recovery.},
keywords={Algorithms;  Computer software;  Data structures;  Graph theory;  Semantics;  Software engineering, Abstract data object;  Abstract data type;  Component recovery;  Delta internal connectivity, Reverse engineering},
correspondence_address1={Canfora, Gerardo; Univ of Sannio, Benevento, Italy},
sponsors={IEEE Computer Society; TCSE},
publisher={IEEE, Los Alamitos, CA, United States},
address={Brisbane, Australia},
coden={00211},
language={English},
abbrev_source_title={Rev Eng Working Conf Proc},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Czeranski2000197,
author={Czeranski, Joerg and Eisenbarth, Thomas and Kienle, Holger and Koschke, Rainer and Simon, Daniel},
title={Analyzing xfig using the Bauhaus tool},
journal={Reverse Engineering - Working Conference Proceedings},
year={2000},
pages={197-199},
note={cited By 6; Conference of 7th Conference on Reverse Engineering (WCRE-2000) ; Conference Date: 23 November 2000 Through 25 November 2000;  Conference Code:57679},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0034497485&partnerID=40&md5=5f77cf956bc4d4723c73fc4699aa6150},
affiliation={Univ of Stuttgart, Stuttgart, Germany},
abstract={We used the Bauhaus tool, which helps program understanding and architecture recovery, to analyze the xfig program. xfig's architecture was recovered and all of the (hypothetical) maintenance tasks described in the Developer Handbook were performed.},
keywords={Computer architecture;  Computer software maintenance;  Computer system recovery;  Constraint theory;  Database systems;  Graph theory;  Graphical user interfaces;  Program diagnostics, Architecture recovery;  Software Package Bauhaus, Computer aided software engineering},
correspondence_address1={Czeranski, Joerg; Univ of Stuttgart, Stuttgart, Germany},
sponsors={IEEE Computer Society; TCSE},
publisher={IEEE, Los Alamitos, CA, United States},
address={Brisbane, Australia},
coden={00211},
language={English},
abbrev_source_title={Rev Eng Working Conf Proc},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Czeranski2000293,
author={Czeranski, Joerg and Eisenbarth, Thomas and Kienle, Holger M. and Koschke, Rainer and Ploedereder, Erhard and Simon, Daniel and Zhang, Yan and Girard, Jean-Francois and Wuerthner, Martin},
title={Data exchange in Bauhaus},
journal={Reverse Engineering - Working Conference Proceedings},
year={2000},
pages={293-295},
note={cited By 6; Conference of 7th Conference on Reverse Engineering (WCRE-2000) ; Conference Date: 23 November 2000 Through 25 November 2000;  Conference Code:57679},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0034497404&partnerID=40&md5=11b06ecbe44ddef81d24fcaf48b09dae},
affiliation={Univ of Stuttgart, Germany},
abstract={In the context of the Bauhaus project, reengineering environments to support program understanding of legacy code are being developed. Bauhaus defines two formats to represent information that has been extracted from source code. One of these formats, RG, is suitable as an exchange format. This paper introduces RG, describes how it is represented as an exchange format, and discusses schema conversions in RG.},
keywords={Computer programming languages;  Computer simulation;  Data transfer;  Information retrieval;  Legacy systems, Bauhaus;  Data exchange, Reverse engineering},
correspondence_address1={Czeranski, Joerg; Univ of StuttgartGermany},
sponsors={IEEE Computer Society; TCSE},
publisher={IEEE, Los Alamitos, CA, United States},
address={Brisbane, Australia},
coden={00211},
language={English},
abbrev_source_title={Rev Eng Working Conf Proc},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koschke2000201,
author={Koschke, R. and Eisenbarth, T.},
title={A framework for experimental evaluation of clustering techniques},
journal={Proceedings - IEEE Workshop on Program Comprehension},
year={2000},
volume={2000-January},
pages={201-210},
doi={10.1109/WPC.2000.852494},
art_number={852494},
note={cited By 65; Conference of 8th International Workshop on Program Comprehension, IWPC 2000 ; Conference Date: 10 June 2000 Through 11 June 2000;  Conference Code:116500},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84951099346&doi=10.1109%2fWPC.2000.852494&partnerID=40&md5=83fceeff1e30dd9253bd8908d86f15ee},
affiliation={University of Stuttgart, Breitwiesenstr. 20-22, Stuttgart, D-70565, Germany},
abstract={Experimental evaluation of clustering techniques for component recovery is necessary in order to analyze their strengths and weaknesses in comparison to other techniques. For comparable evaluations of automatic clustering techniques, a common reference corpus of freely available systems is needed for which the actual components are known. The reference corpus is used to measure recall and precision of automatic techniques. For this measurement, a standard scheme for comparing the components recovered by a clustering technique to components in the reference corpus is required. This paper describes both the process of setting up reference corpora and ways of measuring recall and precision of automatic clustering techniques. For methods with human intervention, controlled experiments should be conducted. This paper additionally proposes a controlled experiment as a standard for evaluating manual and semi-Automatic component recovery methods that can be conducted cost-effectively. © 2000 IEEE.},
author_keywords={Analysis of variance;  Automatic control;  Automatic testing;  Benchmark testing;  Control systems;  Cost accounting;  Humans;  Measurement standards;  System testing;  Terminology},
keywords={Analysis of variance (ANOVA);  Automatic testing;  Automation;  Computer programming;  Control;  Control system analysis;  Control systems;  Cost accounting;  Cost benefit analysis;  Recovery;  Standards;  Terminology, Automatic clustering techniques;  Benchmark testing;  Clustering techniques;  Controlled experiment;  Experimental evaluation;  Humans;  Measurement standards;  System testing, Cluster analysis},
references={Belady, L.A., Evangelisti, C.J., System partitioning and its measure (1982) Journal of Systems and Software, 2 (1), pp. 23-29. , February; Canfora, G., Cimitile, A., Munro, M., An improved algorithm for identifying objects in code (1996) Journal of Software Practice and Experience, 26 (1), pp. 25-48. , January; Choi, S.C., Scacchi, W., Extracting and restructuring the design of large systems (1990) IEEE Software, 7 (1), pp. 66-71. , January; Doval, D., Mancoridis, S., Mitchel, B.S., Chen, Y., Gansner, E.R., Automatic clustering of software systems using a genetic algorithm (1999) Proceedings of the International Conference on Software Tools and Engineering Practice, , August; Gall, H., Klsch, R., Finding objects in procedural programs: An alternative approach (1995) Proceedings of the Second Working Conference on Reverse Engineering, pp. 208-216. , Toronto July; Ghezzi, G., Jazayeri, M., Madrioli, D., (1991) Fundamental Software Engineering, , Prentice Hall International; Girard, J.F., Koschke, R., Schied, G., A metric-based approach to detect abstract data types and abstract State Encapsulation (1999) Journal on Automated Software Engineering, 6, pp. 357-386. , Kluwer; Girard, J.F., Koschke, R., A comparison of abstract data type and objects recovery Techniques Journal Science of Computer Programming, , Elsevier, to appear; Girard, J.F., Koschke, R., Finding components in a hierarchy of modules: A step towards Architectural Understanding (1997) International Conference on Software Maintenance, pp. 58-65. , Bari October; Hutchens, D.H., Basili, V.R., System structure analysis: Clustering with data bindings (1985) IEEE Transactions on Software Engineering, SE-11, 8, pp. 749-757. , August; Kazman, R., Carrire, S.J., (1997) Playing Detective: Reconstructing Software Architecture from Available Evidence, , Technical Report CMU/SEI-97-TR-010, ESC-TR-97-010, Software Engineering Institute, Pittsburgh, USA; Kirk Roger, E., (1994) Experimental Design: Procedures for the Behavioral Sciences; Koschke, R., An semi-Automatic method for component recovery (1999) Proceedings of the Sixth Working Conference on Reverse Engineering, pp. 256-267. , Atlanta October; Koschke, R., (2000) Atomic Architectural Component Detection for Program Understanding and System Evolution, , Ph.D. thesis University of Stuttgart, to appear; Lakhotia, A., A unified framework for expressing software subsystems Classification Techniques (1997) Journal Systems Software, 36, pp. 211-231. , Elsevier Science Publisher; Lakhotia, A., Gravely, J.M., Toward experimental evaluation of subsystem classification Recovery Techniques (1995) Proceedings of the Second Working Conference on Reverse Engineering, pp. 262-269. , Toronto July; Lindig, C., Snelting, G., Assessing modular structure of legacy code based on mathematical Concept Analysis (1997) Proceedings of the Nineteenth International Conference on Software Engineering, , Boston; Liu, S.S., Wilde, N., Identifying objects in a conventional procedural language: An Example of Data Design Recovery (1990) Proceedings of the International Conference on Software Maintenance, pp. 266-271. , November; Lienert, G.A., (1973) Verteilungsfreie Methoden in der Biostatistik, , Verlag Anton Hain, Meisenheim am Glan, Germany; Mann, H.B., Whithney, D.R., On a test of whether one of two (1947) Random Variables Is Stochastically Larger Than the Other Annuals of Mathematical Statistics, 18; Mller, H., Wong, K., Tilley, S., A reverse engineering environment based on spatial and visual Software Interconnection Models (1992) Proceedings of the Fifth ACM SIGSOFT Symposium on Software Development Environments, pp. 88-98. , Tysons Corner December; Mller, H.A., Orgun, M.A., Tilley, S.R., Uhl, J.S., A reverse engineering approach to subsystem structure Identification (1993) Journal of Software Maintenance: Research and Practice, 5 (4), pp. 181-204. , December; Ogando, R.M., Yau, S.S., Wilde, N., An object finder for program structure understanding in software Maintenance (1994) Journal of Software Maintenance, 6 (5), pp. 261-283. , September-October; Owen, D.B., (1962) Handbook of Statistical Tables, , Addison-Wesley; Patel, S., Chu, W., Baxter, R., A measure for composite module cohesion (1992) Proceedings of the Fourteenth International Conference on Software Engineering, pp. 38-48. , Melbourne May; Pitman, E.J.G., Significance test which may be applied to samples from any Population (1937) Journal of the Royal Statistics Society, 4; Rugaber, S., Wills, L., Building up an infrastructure for reverse engineering (1996) Proceedings of the Third Working Conference on Reverse Engineering, pp. 120-130. , Monterey September; Sahraoui, H., Melo, W., Lounis, H., Dumont, F., Applying concept formationmethods to object identfication in Procedural Code (1997) Proceedings of the Twelfth Conference on Automated Software Engineering, pp. 210-218. , Nevada November; Schwanke, R.W., An intelligent tool for re-engineering software modularity (1991) Proceedings of the International Conference on Software Engineering, pp. 83-92. , May; Siff, M., Reps, T., Identifying modules via concept analysis (1997) Proceedings of the International Conference on Software Maintenance, pp. 170-179. , Bari October; Tzerpos, V., Holt, R., Mojo: A distance metric for software clusterings (1999) Proceedings of the Sixth Working Conference on Reverse Engineering, pp. 187-193. , Atlanta July; Valasareddi, R.R., Carver, D.L., A graph-based object identification process for procedural programs (1998) Proceedings of the Fifth Working Conference on Reverse Engineering, pp. 50-58. , Honolulu October; Winer, B.J., Brown, D.R., Michels, K.M., (1991) Statistical Principles in Experimental Design, , 3rd edition McGraw-Hill Series in Psychology; Yeh, A.S., Harris, D., Reubenstein, H., Recovering abstract data types and object instances from a Conventional Procedural Language (1995) Proceedings of the Second Working Conference on Reverse Engineering, pp. 227-236. , July},
sponsors={IEEE Computer Society Technical Council on Software Engineering},
publisher={IEEE Computer Society},
issn={10928138},
isbn={0769506569},
language={English},
abbrev_source_title={Proc. IEEE Workshop Program Comprehension},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Girard2000149,
author={Girard, J.-F. and Koschke, R.},
title={Comparison of abstract data types and objects recovery techniques},
journal={Science of Computer Programming},
year={2000},
volume={36},
number={2},
pages={149-181},
doi={10.1016/S0167-6423(99)00035-0},
note={cited By 14; Conference of Working Conference on Reverse Engineering (WCRE 97) ; Conference Date: 6 October 1997 Through 8 October 1997;  Conference Code:56560},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0033904066&doi=10.1016%2fS0167-6423%2899%2900035-0&partnerID=40&md5=16a809b7989e45f77f7c294f5b44368f},
affiliation={Fraunhofer Inst. Exp. Software Eng., Sauerwiesen 6, D-67661, Kaiserslautern, Germany; University of Stuttgart, Breitwiesenstr. 20-22, D-70565, Stuttgart, Germany},
abstract={In the context of the authors' research on architectural features recovery, abstract data types (ADT) and abstract data objects (ADO, also called objects) have been identified as two of the smallest components which are useful for building a significant architectural overview of the system. The authors have named these the atomic components (AC) of an architecture. This article compares six published techniques which extract ADTs and ADOs from source code without extensive data flow analysis. A prototype tool implementing each technique has been developed and applied to three medium-sized systems written in C (each over 30 Kloc). The results from each approach are compared with the atomic components identified by hand by a group of software engineers. This article extends previous papers by discussing how the software engineers' AC identification was validated and by analyzing the false positives, i.e., the atomic components identified by automatic approaches which were not identified by software engineers.},
keywords={C (programming language);  Codes (symbols);  Computer aided software engineering;  Computer architecture;  Data flow analysis;  Data structures, Abstract data objects (ADO);  Atomic components (AC), Computer systems programming},
references={Canfora, G., Cimitile, A., De Lucia, A., Di Lucca, G.A., A case study of applying an eclectic approach to identify objects in code (1999) Workshop on Program Comprehension, , Pittsburgh, IEEE Computer Society, Silver Spring, MD; Canfora, G., Cimitile, A., Munro, M., An improved algorithm for identifying objects in code. (1996) J. Software Practice Exper., 26 (1), pp. 25-48; Canfora, G., Cimitile, A., Munro, M., Taylor, C.J., Extracting abstract data type from c programs: A case study (1993) Int. Conf. on Software Maintenance, pp. 200-209; Dean, T.R., Cordy, J.R., A syntactic theory of software architecture (1995) IEEE Trans. Software Eng., 21 (4), pp. 302-313; Gall, H., Klösch, R., Finding objects in procedural programs: an alternative approach (1995) Proc. 2nd Working Conf. on Reverse Engineering, , IEEE Computer Society Press, Silver Spring, MD, July; Garlan, D., Shaw, M., An Introduction to Software Architecture (1993) Advances in Software Engineering and Knowledge Engineering, 1. , World Scientific Publishing Company, NJ; Ghezzi, C., Jazayeri, M., Madrioli, D., (1991) Fundamental Software Engineering, , Englewood Cliffs, NJ: Prentice-Hall; Girard, J.-F., Koschke, R., Finding components in a hierarchy of modules: A step towards architectural understanding (1997) Int. Conf. on Software Maintenance, pp. 66-75. , Bari; Girard, J.-F., Koschke, R., A metric-based approach to detect abstract data types and abstract state encapsulation (1997) Autom. Software Eng. Conf., pp. 82-89. , Nevada, USA, November; Girard, J.-F., Koschke, R., Schied, G., Comparison of abstract data type and abstract state encapsulation detection techniques for architectural understanding (1997) Working Conf. on Reverse Engineering, pp. 66-75. , Amsterdam, The Netherlands, October; Girard, J.-F., Koschke, R., Schied, G., A metric-based approach to detect abstract data types and state encapsulations (1999) J. Autom. Software Eng., 6 (4), pp. 357-386; Guttag, J., Abstract data types and the development of data structures (1977) Comm. ACM, 20 (6), pp. 396-404; Keller, H., Stolz, H., Ziegler, A., Bräunl, T., Virtual mechanics simulation and animation of rigid body systems with aero (1995) Simulation for Understanding, 65 (1), pp. 74-79; Lindig, C., Snelting, G., Assessing modular structure of legacy code based on mathematical concept analysis (1997) Proc. Int. Conf. on Software Engineering, , Boston; Liskov, B., Zilles, S.N., Programming with abstract data types (1974) SIGPLAN Notice, 9 (4), pp. 50-60; Liu, S.S., Wilde, N., Identifying objects in a conventional procedural language: An example of data design recovery (1990) In: Conf. in Software Maintenance, pp. 266-271. , IEEE Computer Society Press, Silver Spring, MD, November; Luckham, D.C., Kenney, J.H., Augustin, L.M., Vera, J., Bryan, D., Mann, W., Specification and analysis of system architecture using rapide (1995) IEEE Trans. Software Eng., 21 (4), pp. 336-355; Müller, H., (1986) Rigi - A Model for Software System Construction, Integration and Evolution Based on Module Interface Specifications, , Ph.D. Thesis, Rice University, August; Perry, D., Wolf, A., Foundations for the study of software architecture (1992) ACM SIGSOFT, 17 (4), pp. 40-52; Sahraoui, H., Melo, W., Lounis, H., Dumont, F., Applying concept formation methods to object identification in procedural code (1997) In: Automated Software Engineering, pp. 210-128. , IEEE Computer Society, Nevada; Schwanke, R.W., An intelligent tool for re-engineering software modularity (1991) Int. Conf. on Software Engineering, pp. 83-92. , May; Shaw, M., DeLine, R., Klein, D.V., Ross, T.L., Young, D.M., Zelesnik, G., Abstraction for software architecture and tools to support them (1995) IEEE Trans. Software Eng., 21 (4), pp. 314-335; Siff, M., Reps, T., Identifying modules via concept analysis (1997) Int. Conf. on Software Maintenance, , Bari, Italy, September; Sommerville, I., Software Engineering (1992) 4th Editon, , Reading, MA: Addison-Wesley; Valasareddi, R.R., Carver, D.L., A graph-based object identification process for procedural programs (1998) Proc. 5th Working Conf. on Reverse Engineering, , IEEE Computer Society Press, Silver Spring, MD, October; Yeh, A.S., Harris, D., Reubenstein, H., Recovering abstract data types and object instances from a conventional procedureal language (1995) 2nd Working Conf. on Reverse Engineering, pp. 227-236. , in: L. Wills, P. Newcomb, E. Chikofsky (Eds.), Los Alamitos, California, IEEE Computer society Press, Silver Spring, MD, July},
correspondence_address1={Girard, Jean-Franqois; Fraunhofer Inst for Experimental, Software Engineering, Kaiserslautern, Germany},
sponsors={},
publisher={Elsevier Science B.V., Amsterdam},
address={Amsterdam, Neth},
issn={01676423},
coden={SCPGD},
language={English},
abbrev_source_title={Sci Comput Program},
document_type={Article},
source={Scopus},
}

@ARTICLE{Sim2000805,
author={Sim, S.E. and Holt, R. and Koschke, R.},
title={Workshop on standard exchange format (WoSEF)},
journal={Proceedings - International Conference on Software Engineering},
year={2000},
pages={805-806},
doi={10.1109/ICSE.2000.870519},
note={cited By 1},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0033701266&doi=10.1109%2fICSE.2000.870519&partnerID=40&md5=11625b95148bed647027cb7d0aba84dc},
affiliation={Dept. of Computer Science, University of Toronto, 10 Kings College Rd., Toronto, ON M5S 3G4, Canada; Dept. of Computer Science, University of Waterloo, Waterloo, ON N2L 3G1, Canada; Universität Stuttgart, Breitwiesenstraβe 20-22, 70565 Stuttgart, Germany},
abstract={To date, there have been many efforts to create a standard data exchange format. A workshop aimed at the evolution of a consensus on a standard exchange format is discussed. The workshop is discussion-oriented and the organization of the sessions is based on the position papers and how they addressed the development of a standard exchange format.},
keywords={Extensible markup language;  Program comprehension;  Resource descriptor format;  Rigi standard form;  Software visualization;  Standard exchange format;  Tuple attribute language, Computer programming languages;  Computer software selection and evaluation;  Program diagnostics;  Reverse engineering;  Technical presentations, Computer aided software engineering},
references={Ebert, J., Kullbach, B., Winter, A., GraX-An interchange format for reengineering tools (1999) Sixth Working Conference on Reverse Engineering (WCRE), pp. 89-98. , Atlanta, GA, October; Emst, J., Introduction to CDIF, , http://www.eigroup.org/cdif/intro.html; http://www.w3.org/RDF; RSF Web Site, , http://www.rigi.csc.uvic.ca/rigi/manual/user.html; http://plg.uwaterloo.ca/-holtlpapers/ta.html; http://www.cs.utoronto.ca/-simsuz/wosef; http://www.software.ibm.com/ad/features/xmi.html; http:/lwww.w3.org/XMU},
issn={02705257},
language={English},
abbrev_source_title={Proc Int Conf Software Eng},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Koschke1999256,
author={Koschke, Rainer},
title={Incremental semi-automatic method for component recovery},
journal={Reverse Engineering - Working Conference Proceedings},
year={1999},
pages={256-267},
note={cited By 18; Conference of Proceedings of the 1999 6th Working Conference on Reverse Engineering (WCRE'99) ; Conference Date: 6 October 1999 Through 8 October 1999;  Conference Code:55893},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0033364799&partnerID=40&md5=3576db84c23e320e5655c756cf46b33f},
affiliation={Univ of Stuttgart, Stuttgart, Germany},
abstract={Atomic components are sets of related variables, types, and subprograms, e.g., abstract data types and objects. Many techniques exist to detect them automatically. However, as an evaluation has shown, none of them has the precision needed. One approach to achieve a higher precision is to integrate the user into the detection cycle. This paper describes a method in which computer and human work together to find atomic components. Furthermore, it discusses how the techniques can be enhanced to work incrementally, which is needed if they are to be integrated with this method. Moreover, it proposes ways of combining the techniques within this interactive method.},
keywords={Computer architecture;  Data structures;  Precision engineering;  Software engineering, Component recovery;  Incremental semi-automatic methods, Reverse engineering},
correspondence_address1={Koschke, Rainer; Univ of Stuttgart, Stuttgart, Germany},
sponsors={IEEE Computer Society},
publisher={IEEE, Los Alamitos, CA, United States},
address={Atlanta, GA, USA},
coden={00211},
language={English},
abbrev_source_title={Rev Eng Working Conf Proc},
document_type={Article},
source={Scopus},
}

@ARTICLE{Girard1999357,
author={Girard, J.-F. and Koschke, R. and Schied, G.},
title={Metric-based approach to detect abstract data types and state encapsulations},
journal={Automated Software Engineering},
year={1999},
volume={6},
number={4},
pages={357-386},
doi={10.1023/A:1008715506131},
note={cited By 17; Conference of Proceedings of the 1997 12th IEEE International Automated Software Engineering Conference (ASE'97) ; Conference Date: 1 November 1997 Through 5 November 1997;  Conference Code:56008},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0033208054&doi=10.1023%2fA%3a1008715506131&partnerID=40&md5=788022ac99a3db7b3efd2d3f6c3c4366},
affiliation={Fraunhofer Inst. Exp. Software Eng., Sauerwiesen 6, D-67661 Kaiserslautern, Germany; University of Stuttgart, Breitwiesenstr. 20-22, D-70565 Stuttgart, Germany},
abstract={This article presents an approach to identify abstract data types (ADT) and abstract state encapsulations (ASE, also called abstract objects) in source code. This approach, named similarity clustering, groups together functions, types, and variables into ADT and ASE candidates according to the proportion of features they share. The set of features considered includes the context of these elements, the relationships to their environment, and informal information. A prototype tool has been implemented to support this approach. It has been applied to three C systems (each between 30-38 Kloc). The ADTs and ASEs identified by the approach are compared to those identified by software engineers who did not know the proposed approach or other automatic approaches. Within this case study, this approach has been shown to have a higher detection quality and to identify, in most of the cases, more ADTs and ASEs than the other techniques. In all other cases its detection quality is second best, N.B. This article reports on work in progress on this approach which has evolved since it was presented in the original ASE97 conference paper.},
keywords={Codes (symbols);  Computer architecture;  Computer system recovery;  Data structures;  Functions;  Program diagnostics;  Reverse engineering, Abstract data types;  Abstract state encapsulation;  Similarity clustering;  Source code, Software engineering},
references={Aamodt, A., Explanation-based case-based reasoning (1994) Topic in Case-Based Reasoning, pp. 274-288. , Springer Verlag; Biggerstaff, T.J., Design recovery for maintenance and reuse (1989) IEEE Computer, 22, pp. 36-49; Canfora, G., Cimitile, A., Munro, M., An improved algorithm for identifying objects in code (1996) Journal of Software Practice and Experience, 26 (1), pp. 25-48; Canfora, G., Cimitile, A., Munro, M., Taylor, C.J., Extracting abstract data type from C programs: A case study (1993) International Conference on Software Maintenance, pp. 200-209; Dean, T.R., Cordy, J., A syntactic theory of software architecture (1995) IEEE Transaction of Software Engineering, 21 (4), pp. 302-313; Garlan, D., Shaw, M., (1993) An Introduction to Software Architecture Vol. 1, Advances in Software Engineering and Knowledge Engineering, 1. , New Jersey, World Scientific Publishing Company; Ghezzi, C., Jazayeri, M., Madrioli, D., (1991) Fundamental Software Engineering, , Prentice Hall International; Girard, J.-F., Koschke, R., Finding components in a hierarchy of modules: A step towards architectural understanding (1997) International Conference on Software Maintenance, pp. 66-75. , Bari; Girard, J.-F., Koschke, R., Schied, G., Comparison of abstract data type and abstract state encapsulation detection techniques for architectural understanding (1997) Working Conference on Reverse Engineering, pp. 66-75. , Amsterdam, The Netherlands; Guttag, J., Abstract data types and the development of data structures (1977) Communications of the ACM, 20 (6), pp. 396-404; Keller, H., Stolz, H., Ziegler, A., Bräunl, T., Virtual mechanics simulation and animation of rigid body systems with Aero (1995) Simulation for Understanding, 65 (1), pp. 74-79; Liskov, B., Zilles, S.N., Programming with abstract data types (1974) SIGPLAN Notice, 9 (4), pp. 50-60; Liu, S., Wilde, N., Identifying objects in a conventional procedural language: An example of data design recovery (1990) Conference in Software Maintenance, pp. 266-271. , IEEE Computer Society Press; Luckham, D.C., Kenney, J.H., Augustin, L.M., Vera, J., Bryan, D., Mann, W., Specification and analysis of system architecture using rapide (1995) IEEE Transaction of Software Engineering, 21 (4), pp. 336-355; Perry, D., Wolf, A., Foundations for the study of software architecture (1992) acm SIGSOFT, 17 (4), pp. 40-52; Richter, Classification and learning of similarity measures (1992) Annual Conference of the German Society for Classification, , number 16. Springer Verlag; Schwanke, Hanson, Using neural networks to modularize software (1994) Machine Learning, 15, pp. 137-168; Schwanke, R.W., An intelligent tool for re-engineering software modularity (1991) International Conference on Software Engineering, pp. 83-92; Shannon, C.E., (1972) The Mathematical Theory of Communication, , Urbana: Univ. of Ill. Press. ISBN 0-252-72548-4; Shaw, M., DeLine, R., Klein, D.V., Ross, T.L., Young, D.M., Zelesnik, G., Abstraction for software architecture and tools to support them (1995) IEEE Transaction of Software Engineering, 21 (4), pp. 314-335; Sommerville, I., (1992) Software Engineering, 4th Edition, , Addison Wesley; Yeh, A., Harris, D., Reubenstein, H., Recovering abstract data types and object instances from a conventional procedural language (1995) Second Working Conference on Reverse Engineering, pp. 227-236. , Wills, L., Newcomb, P., and Chikofsky, E., editors, Los Alamitos, California. IEEE Computer Society Press},
correspondence_address1={Girard, Jean-Francois; Fraunhofer Inst for Experimental, Software Engineering, Kaiserslautern, Germany},
publisher={Kluwer Academic Publishers, Dordrecht, Netherlands},
address={Incline Village, NV, USA},
issn={09288910},
coden={ASOEE},
language={English},
abbrev_source_title={Autom Software Eng},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Koschke1998241,
author={Koschke, Rainer and Girard, Jean-Francois and Wuerthner, Martin},
title={Intermediate representation for integrating reverse engineering analyses},
journal={Reverse Engineering - Working Conference Proceedings},
year={1998},
pages={241-250},
note={cited By 24; Conference of Proceedings of the 1998 5th Working Conference on Reverse Engineering ; Conference Date: 12 October 1998 Through 14 October 1998;  Conference Code:49211},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0032316684&partnerID=40&md5=8bcdd9e9c8d7410fe0eeb04cc8355f42},
affiliation={Univ of Stuttgart, Stuttgart, Germany},
abstract={Intermediate representations (IR) are a key issue both for compilers as well as for reverse engineering tools to enable efficient analyses. Research in the field of compilers has proposed many sophisticated IRs that can be used in the domain of reverse engineering, especially in the case of deep analyses, but reverse engineering has also its own requirements for intermediate representations not covered by traditional compiler technology. This paper discusses requirements of IRs for reverse engineering. It shows then how most of these requirements can be met by extending and integrating existing IRs. These extensions include a generalized AST and a mechanism supporting multiple views on programs. Moreover, the paper shows how these views can efficiently be implemented.},
keywords={Computer aided software engineering;  Program compilers;  Requirements engineering, Intermediate representations (IR), Reverse engineering},
correspondence_address1={Koschke, Rainer; Univ of Stuttgart, Stuttgart, Germany},
sponsors={IEEE},
publisher={IEEE Comp Soc, Los Alamitos, CA, United States},
address={Honolulu, HI, USA},
coden={00211},
language={English},
abbrev_source_title={Rev Eng Working Conf Proc},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Girard199758,
author={Girard, Jean-Francois and Koschke, Rainer},
title={Finding components in a hierarchy of modules: A step towards architectural understanding},
journal={Conference on Software Maintenance},
year={1997},
pages={58-65},
note={cited By 47; Conference of Proceedings of the 1997 International Conference on Software Maintenance ; Conference Date: 1 October 1997 Through 3 October 1997;  Conference Code:47301},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0031351641&partnerID=40&md5=78b289789e486b7714698b1d65b029b7},
affiliation={Fraunhofer Inst for Experimental, Software Engineering, Kaiserslautern, Germany},
abstract={This paper presents a method to view a system as a hierarchy of modules according to information hiding concepts and to identify architectural component candidates in this hierarchy. The result of the method eases the understanding of a system's underlying software architecture. A prototype tool implementing this method was applied to three systems written in C (each over 30 Kloc). For one of these systems, an author of the system created an architectural description. The components generated by our method correspond to those of this architectural description in almost all cases. For the other two systems, most of the components resulting from the method correspond to meaningful system abstractions.},
keywords={C (programming language);  Computer architecture;  Computer software selection and evaluation;  Hierarchical systems;  Software prototyping, Architectural understanding, Computer aided software engineering},
correspondence_address1={Girard, Jean-Francois; Fraunhofer Inst for Experimental, Software Engineering, Kaiserslautern, Germany},
sponsors={IEEE},
publisher={IEEE, Piscataway, NJ, United States},
address={Bari, Italy},
coden={CSFME},
language={English},
abbrev_source_title={Conf Software Maint},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Girard199766,
author={Girard, Jean-Francois and Koschke, Rainer and Schied, Georg},
title={Comparison of abstract data type and abstract state encapsulation detection techniques for architectural understanding},
journal={Reverse Engineering - Working Conference Proceedings},
year={1997},
pages={66-75},
note={cited By 13; Conference of Proceedings of the 1997 4th Working Conference on Reverse Engineering ; Conference Date: 6 October 1997 Through 8 October 1997;  Conference Code:47282},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0031385202&partnerID=40&md5=7067fa5b0517c7307e8bce34c7c01efd},
affiliation={Fraunhofer Inst for Experimental, Software Engineering, Kaiserslautern, Germany},
abstract={In the context of the authors' research on architectural features recovery, abstract data type (ADT) and abstract state encapsulation (ASE, also called abstract object) have been identified as two of the smallest components which are useful to build a significant architectural over-view of the system. The authors have named these the atomic components of an architecture. This paper compares five published techniques which extract ADT and ASE from source code. A prototype tool implementing each technique has been developed and applied to three medium-size systems written in C (each over 30 Kloc). The results from each approach are compared with the atomic components identified by hand by a group of software engineers. These people did not know the automatic techniques which were going to be applied to the systems.},
keywords={C (programming language);  Codes (symbols);  Computer architecture;  Data reduction;  Software prototyping, Abstract data types (ADT);  Abstract state encapsulation (ASE), Data structures},
correspondence_address1={Girard, Jean-Francois; Fraunhofer Inst for Experimental, Software Engineering, Kaiserslautern, Germany},
sponsors={IEEE},
publisher={IEEE Comp Soc, Los Alamitos, CA, United States},
address={Amsterdam, Neth},
coden={00211},
language={English},
abbrev_source_title={Rev Eng Working Conf Proc},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Girard199782,
author={Girard, Jean-Francois and Koschke, Rainer and Schied, Georg},
title={Metric-based approach to detect abstract data types and state encapsulations},
journal={Proceedings of the IEEE International Automated Software Engineering Conference, ASE},
year={1997},
pages={82-89},
note={cited By 10; Conference of Proceedings of the 1997 12th IEEE International Automated Software Engineering Conference, ASE ; Conference Date: 3 November 1997 Through 5 November 1997;  Conference Code:47793},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0031362106&partnerID=40&md5=5ffb2d1a099d921c87a35b50c6d04a9b},
affiliation={Fraunhofer Inst for Experimental, Software Engineering, Kaiserslautern, Germany},
abstract={This article presents an approach to identify abstract data types (ADT) and abstract state encapsulations (ASE, also called abstract objects) in source code. This approach groups together functions, types, and variables into ADT and ASE candidates according to the proportion of features they share. The set of features considered includes the context of these elements, the relationships to their environment, and informal information. A prototype tool has been implemented to support this approach. It has been applied to three C systems (each between 30-38 Kloc). The ADTs and ASEs identified by the approach are compared to those identified by software engineers who did not know the proposed approach. In a case study, this approach has been shown to identify, in most cases, more ADTs and ASEs than five published techniques applied on the same systems. This is important when trying to identify as many ADTs and ASEs as possible.},
keywords={C (programming language);  Data structures;  Software prototyping, Abstract data types (ADT);  Abstract state encapsulation (ASE), Computer aided software engineering},
correspondence_address1={Girard, Jean-Francois; Fraunhofer Inst for Experimental, Software Engineering, Kaiserslautern, Germany},
sponsors={IEEE},
publisher={IEEE Comp Soc, Los Alamitos, CA, United States},
address={Incline Village, NV, USA},
coden={00276},
language={English},
abbrev_source_title={Proc IEEE Int Autom Software Eng Conf ASE},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Betz199729,
author={Betz, Hiltrud and Holzmueller, Bernd and Koschke, Rainer},
title={Experiences in adjusting a compiler toolkit to generate Ada 95 code},
journal={Ada user},
year={1997},
volume={18},
number={1},
pages={29-40},
note={cited By 1},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-0031094575&partnerID=40&md5=665d87097f0343df736b1f1ce041a3a1},
affiliation={Univ of Stuttgart, Stuttgart, Germany},
abstract={Ada 95 code is generated using a compiler toolkit called Cocktail. The object-oriented features of the compiler was used to map data structures and algorithms to Ada 95. A problem between dispatching and locality that seemed to have no real solution in the current Ada language definition was encountered but was solved by making a trade off between tedious and inefficient nested if-statements to implement additional user-defined operations. Differences between the form of compilation and run-time efficiency and code size of Ada 83 and Ada 95 solutions were evaluated.},
keywords={Algorithms;  C (programming language);  Codes (symbols);  Data structures;  Modula (programming language);  Object oriented programming;  Program compilers, Abstract syntax tree;  Cocktail compiler toolkit, Ada (programming language)},
correspondence_address1={Betz, Hiltrud; Univ of Stuttgart, Stuttgart, Germany},
publisher={Ada Lang UK Ltd, York, United Kingdom},
issn={0268652X},
coden={AUJOE},
language={English},
abbrev_source_title={Ada User J},
document_type={Article},
source={Scopus},
}
